<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[An Analysis of PerformanceEvolution of Linux’s Core Operations]]></title>
    <url>%2F2019%2F11%2F13%2Flinux-core-op-performance%2F</url>
    <content type="text"><![CDATA[KPTI: Kernel page-table isolation &#x5185;&#x6838;&#x9875;&#x8868;&#x9694;&#x79BB; &#x89E3;&#x51B3; melt down &#x6F0F;&#x6D1E; &#x5B8C;&#x5168;&#x5206;&#x79BB;&#x7528;&#x6237;&#x7A7A;&#x95F4;&#x548C;&#x5185;&#x6838;&#x7A7A;&#x95F4;&#x9875;&#x8868;&#x6765;&#x89E3;&#x51B3;&#x9875;&#x8868;&#x6CC4;&#x9732; &#x4ECE;&#x5185;&#x6838;&#x7A7A;&#x95F4;&#x8FDB;&#x5165;&#x7528;&#x6237;&#x7A7A;&#x95F4;&#x65F6;&#xFF0C;&#x5220;&#x9664;&#x5185;&#x6838;&#x9875;&#x8868;&#x9879; &#x8FDB;/&#x51FA;&#x5185;&#x6838;&#x90FD;&#x4F1A;swap page table pointer (CR3&#x5BC4;&#x5B58;&#x5668;), &#x5BFC;&#x81F4;TLB flush, &#x5BFC;&#x81F4;&#x5176;&#x4ED6;&#x7684;TLB miss &#x5BF9;&#x4E8E;&#x652F;&#x6301;process-context identifier(PCID)&#x7684;cpu&#xFF0C;linux&#x505A;&#x4E86;&#x4E2A;&#x4F18;&#x5316;&#xFF0C;&#x7ED9;&#x5185;&#x6838;&#x548C;&#x7528;&#x6237;&#x7A7A;&#x95F4;&#x7684;TLB entry&#x5206;&#x522B;&#x8BBE;&#x7F6E;&#x4E0D;&#x540C;&#x7684;PCID&#xFF0C;&#x5404;&#x81EA;&#x8BBF;&#x95EE;&#x5404;&#x81EA;&#x7684;&#xFF0C;&#x907F;&#x514D;&#x4E86;TLB flush Avoid indirect branch speculation eg: jmp [rax], rax&#x9700;&#x8981;&#x8FD0;&#x884C;&#x65F6;&#x51B3;&#x5B9A;&#xFF0C;cpu&#x4F1A;&#x6839;&#x636E;&#x5386;&#x53F2;&#x9884;&#x6267;&#x884C;&#x53EF;&#x80FD;&#x7684;target&#xFF0C;&#x53EF;&#x80FD;&#x88AB;exploiter&#x5229;&#x7528; Retpoline patch&#x5728;&#x7F16;&#x8BD1;&#x671F;&#x5C06;indirect branch (jmp [rax])&#x6362;&#x6210;&#x4EE5;&#x4E0B;thunk: 12345678910110 # normal code1 call load_label ;push return address to stack, and jmp to 62 capture_ret_spec:3 pause ; lfence ;&#x6B64;&#x4E24;&#x6761;inst&#x63D0;&#x793A;cpu&#x6B64;&#x8BED;&#x53E5;&#x5728;&#x4E00;&#x4E2A;spin-loop&#x91CC;&#xFF0C;&#x4F7F;&#x4E4B;&#x51CF;&#x5C11;power consumption4 jmp capture_ret_spec5 load_label:6 mov rax, [rsp] ;replace return address with rax (&#x539F;&#x8DF3;&#x8F6C;&#x5730;&#x5740;)7 ret ;&#x6B64;ret&#x5C06;&#x8DF3;&#x8F6C;&#x5230;[rax]8 9 # rax target10 ... &#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x5728;&#x4E0D;&#x4F7F;&#x7528;indirect branch&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x8FBE;&#x5230;indirect branch&#x7684;&#x6548;&#x679C; &#x8FD0;&#x884C;&#x65F6;cpu&#x4F1A;&#x8BA4;&#x4E3A;&#x8DF3;&#x8F6C;&#x7684;&#x5730;&#x5740;&#x662F;3&#xFF0C;&#x4ECE;&#x800C;&#x589E;&#x52A0;&#x4E86;branch misprediction&#x673A;&#x7387;&#xFF0C;&#x5BFC;&#x81F4;&#x6027;&#x80FD;&#x53D8;&#x5DEE;&#xFF0C;&#x9884;&#x6D4B;&#x6267;&#x884C;&#x7684;&#x5C06;&#x662F;3&#xFF0C;&#x56E0;&#x6B64;&#x589E;&#x52A0;pause&#x548C;&#x5FAA;&#x73AF;&#x8DF3;&#x8F6C;&#xFF0C;&#x63D0;&#x793A;cpu&#x51CF;&#x5C11;power&#x6D88;&#x8017;* SLAB freelist randomization &#x7B49;&#x5927;&#x5C0F;&#x7684;&#x8FDE;&#x7EED;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#xFF0C;&#x7528;&#x4E8E;&#x5B58;&#x653E;&#x7B49;&#x5927;&#x5C0F;&#x7684;&#x5185;&#x6838;&#x6570;&#x636E; allocator&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;freelist&#xFF0C;&#x5C06;&#x8FDE;&#x7EED;&#x7684;&#x5185;&#x5B58;&#x533A;&#x57DF;&#x7528;&#x94FE;&#x8868;&#x4E32;&#x8D77;&#x6765; &#x5BFC;&#x81F4;&#xFF1A;&#x8FDE;&#x7EED;&#x5206;&#x914D;&#x7684;&#x5BF9;&#x8C61;&#xFF0C;&#x5728;&#x5185;&#x5B58;&#x4E0A;&#x4E5F;&#x662F;&#x76F8;&#x90BB;&#x5B58;&#x653E;&#x7684;&#xFF0C;&#x5BB9;&#x6613;&#x88AB;exploit fix: &#x5728;slab&#x521D;&#x59CB;&#x5316;&#x65F6;&#xFF0C;&#x7ED9;&#x6BCF;&#x5757;&#x5185;&#x5B58;&#x5206;&#x914D;&#x4E00;&#x4E2A;&#x968F;&#x673A;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x94FE;&#x8868;&#x662F;&#x6839;&#x636E;&#x968F;&#x673A;&#x6570;&#x7684;&#x5927;&#x5C0F;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x5EFA;&#x7ACB;&#xFF0C;&#x8FD9;&#x6837;&#x8FDE;&#x7EED;&#x5206;&#x914D;&#x5185;&#x5B58;&#x7ED9;&#x5185;&#x6838;&#x5BF9;&#x8C61;&#x65F6;&#xFF0C;&#x5C31;&#x4E0D;&#x662F;&#x7269;&#x7406;&#x76F8;&#x90BB;&#x7684;&#x4E86; overhead: &#x751F;&#x6210;&#x968F;&#x673A;&#x6570;&#xFF0C;&#x964D;&#x4F4E;locality&#xFF0C;&#x5C06;&#x987A;&#x5E8F;&#x8BBF;&#x95EE;&#x53D8;&#x6210;&#x4E86;&#x968F;&#x673A;&#x65B9;&#x6CD5; Hardened usercopy &#x5728;&#x5185;&#x6838;&#x548C;&#x7528;&#x6237;&#x7A7A;&#x95F4;&#x4E4B;&#x95F4;&#x62F7;&#x8D1D;&#x6570;&#x636E;&#x65F6;&#x8981;validate kernel pointers, &#x68C0;&#x67E5;&#x6570;&#x636E;&#x5927;&#x5C0F;&#xFF0C;&#x9632;&#x6B62;kernel-&gt;userspace&#x62F7;&#x8D1D;&#x8FC7;&#x591A;&#x4ECE;&#x800C;&#x6CC4;&#x9732;&#x5185;&#x6838;&#x6570;&#x636E;&#xFF0C;&#x4E5F;&#x9632;&#x6B62;userspace-&gt;kernel&#x62F7;&#x8D1D;&#x592A;&#x591A;&#x9020;&#x6210;buffer overflow &#x68C0;&#x67E5;&#x5305;&#x62EC;&#xFF1A; kernel pointer != null kernel region doesn&#x2019;t overlap text segment the object&#x2019;s size does not exceed the size limit of its SLAB if it is allocated using the SLAB allocator Fault around Pre-establishes mappings for pages surrounding a faulting page, if they are available in the file cache Adds constant overhead for page faults on read-only file-backed pages Control group memory controller Accounts and limits memory usage per control group Adds overhead when establishing or destroying page mappings Disableing transparent huge pages Userspace page fault handling &#x7528;&#x6237;&#x6001;&#x8FDB;&#x7A0B;&#x5904;&#x7406;&#x67D0;&#x4E9B;&#x5185;&#x5B58;&#x533A;&#x57DF;&#x7684;page fault Forced context tracking TLB layout specification Missing CPU power saving states]]></content>
  </entry>
  <entry>
    <title><![CDATA[Efficient Scalable Thread-Safety-Violation Detection]]></title>
    <url>%2F2019%2F11%2F13%2FThread-safety-violation-detection%2F</url>
    <content type="text"><![CDATA[&#x57FA;&#x672C;&#x601D;&#x60F3;&#xFF1A; &#x5217;&#x51FA;&#x7EBF;&#x7A0B;&#x4E0D;&#x5B89;&#x5168;&#x7684;&#x5E38;&#x7528;&#x7C7B;&#x53CA;&#x5176;&#x65B9;&#x6CD5;&#xFF0C;&#x5982;[array add:] hook&#x8FD9;&#x4E9B;&#x65B9;&#x6CD5;&#xFF0C;&#x5728;hook&#x4E2D;&#x968F;&#x673A;&#x63D2;&#x5165;&#x5EF6;&#x65F6;&#xFF0C;&#x4EE5;&#x8BA9;&#x53EF;&#x80FD;&#x53D1;&#x751F;&#x51B2;&#x7A81;&#x7684;&#x5730;&#x65B9;&#x66F4;&#x5BB9;&#x6613;&#x53D1;&#x751F;&#x51B2;&#x7A81;&#x7279;&#x70B9;&#xFF1A; &#x81EA;&#x9002;&#x5E94;&#x7B56;&#x7565;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x8DD1;&#x591A;&#x6B21;&#x5373;&#x53EF;&#x53D1;&#x73B0;&#x5F88;&#x591A;&#x95EE;&#x9898; overhead&#x8F83;&#x4F4E;&#xFF0C;&#x53EF;&#x4E0E;&#x5DE5;&#x7A0B;&#x7684;&#x5355;&#x5143;&#x6D4B;&#x8BD5;&#x4E00;&#x8D77;&#x8DD1; False positive&#x6781;&#x5C11; 123456789//Hook&#x65B9;&#x6CD5;OnCall(thread_id, obj_id, op_id) { check_for_trap(thread_id, obj_id, op_id) if (should_delay(op_id)) { set_trap(thread_id, obj_id, op_id) delay() clear_trap(thread_id, obj_id, op_id) }} &#x68C0;&#x6D4B;&#x51B2;&#x7A81;&#x70B9;&#xFF1A; &#x4E24;&#x4E2A;&#x64CD;&#x4F5C;&#x5728;&#x4E0D;&#x540C;&#x7EBF;&#x7A0B;&#x8FD0;&#x884C; &#x81F3;&#x5C11;&#x6709;&#x4E00;&#x4E2A;&#x662F;&#x5199;&#x64CD;&#x4F5C; &#x5173;&#x952E;&#x70B9;&#xFF1A; Where to inject delays? &#x52A8;&#x6001;&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;trap set, Identify near misses 12345678&lt;tid1, obj1, op1, t1&gt;&lt;tid2, obj2, op2, t2&gt;Dangerous if: tid1 != tid2 obj1 == obj2 op1 == write || op2 == write |t1 - t2| &lt;= sigma TSVD maintains a list of accesses per object since sigma time ago Inferring Concurrent Phases TSVD infers concurrent execution phases by checking the execution history of TSVD points It maintains a global history buffer with a fixed number of most recently executed TSVD points. If the TSVD points in this buffer fcome from more than one thread, TSVD considers the execution to be inside a concurrent phase Inferring likely HB (happens-before) relationship &#x56E0;&#x679C;&#x5173;&#x7CFB;&#xFF1A;If loc1&#x53D1;&#x751F;&#x5728;loc2&#x4E4B;&#x524D;&#xFF0C;&#x5219;loc1&#x4E4B;&#x524D;&#x7684;delay&#x5C06;&#x5BFC;&#x81F4;loc2&#x4E5F;&#x6210;&#x6BD4;&#x4F8B;&#x5730;delay TSVD maintains a history of the most recent access made by every thread123456789&#x8BBE;&#xFF1A;loc1&#x4E4B;&#x524D;&#x63D2;&#x5165;&#x4E00;&#x4E2A;&#x5EF6;&#x8FDF;d1, &#x65F6;&#x95F4;&#x4E3A;[t1_start, t1_end]&#x968F;&#x540E;&#xFF0C;&#x53E6;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;Thd2&#x5728;t2&#x65F6;&#x523B;&#x8BBF;&#x95EE;&#x4E86;loc2we&apos;ll check Thd2&#x4E0A;&#x6B21;&#x8BBF;&#x95EE;&#x53D1;&#x751F;&#x4EC0;&#x4E48;&#x65F6;&#x5019;&#xFF0C;&#x8BB0;&#x4E3A;t0&#x5982;&#x679C;&#xFF1A;1. t2 - t0 &gt;= sigma_hb * delay_time ;t0&#x548C;t2&#x4E4B;&#x95F4;&#x6709;&#x4E2A;long gap2. t0 &lt;= t1_end ;&#x6B64;long gap&#x4E0E;injected delay&#x6709;&#x91CD;&#x5408;&#x5219;&#x8BA4;&#x4E3A;&#xFF1A;loc1&#x548C;loc2&#x6709;&#x51B2;&#x7A81; 4. Delay Decaying * &#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;dangerous pair {p1, p2}, every injection at either p1 or p2 that fails to make p1 and p2 execute in parallel with the same object accessed will cause TSVD to decay the probability of future delay injection at p1 and p2 * when probability drops to 0, it&apos;s removed from the trap set When to inject delays? Planning &amp; injection in the same run loc&#x6267;&#x884C;&#x524D;&#xFF0C;TSVD&#x68C0;&#x67E5;loc&#x662F;&#x5426;&#x5728;trap set&#x4E2D;&#xFF0C;&#x82E5;&#x662F;&#xFF0C;&#x5219;insert a delay at loc with probability P_loc Multiple testing runs &#x6709;&#x4E9B;&#x95EE;&#x9898;&#x53EA;&#x51FA;&#x73B0;&#x4E00;&#x6B21; &#x7B2C;&#x4E00;&#x6B21;&#x8FD0;&#x884C;&#x751F;&#x6210;trap file&#xFF0C;&#x7B2C;&#x4E8C;&#x6B21;&#x8FD0;&#x884C;&#x4F7F;&#x7528; Parallel delay injection &#x4E0D;&#x9650;&#x5236;&#x540C;&#x4E00;&#x65F6;&#x523B;&#x53EA;inject&#x4E00;&#x4E2A;delay&#xFF0C;&#x591A;&#x4E2A;loc&#x53EF;&#x80FD;&#x90FD;&#x540C;&#x65F6;inject&#x4E86;delay]]></content>
  </entry>
  <entry>
    <title><![CDATA[ObjC ARC Internals]]></title>
    <url>%2F2019%2F05%2F07%2FARC%2F</url>
    <content type="text"><![CDATA[&#x6574;&#x7406;&#x7684;&#x4E00;&#x4E9B;&#x5173;&#x4E8E;ARC&#x673A;&#x5236;&#x7684;&#x601D;&#x7EF4;&#x5BFC;&#x56FE;&#x3002;]]></content>
  </entry>
  <entry>
    <title><![CDATA[iOS App中与tail call相关的一个bug定位]]></title>
    <url>%2F2018%2F12%2F28%2FiOS-tailcall-bug%2F</url>
    <content type="text"><![CDATA[&#x4ECA;&#x5929;&#x9047;&#x5230;&#x4E2A;&#x5D29;&#x6E83;&#xFF0C;&#x6808;&#x9876;&#x5D29;&#x6E83;&#x7684;&#x5730;&#x5740;&#x662F;gcd&#x91CC;&#x7684;&#x4E00;&#x4E2A;&#x5185;&#x90E8;&#x51FD;&#x6570;&#xFF0C;log&#x4E2D;&#x663E;&#x793A;&#x5176;&#x76F4;&#x63A5;&#x8C03;&#x7528;&#x8005;&#x662F;&#x6211;&#x4EEC;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x4F46;&#x5B9E;&#x9645;&#x4EE3;&#x7801;&#x5176;&#x5B9E;&#x5E76;&#x672A;&#x8C03;&#x7528;&#x6B64;&#x51FD;&#x6570;&#x3002;&#x4EE5;&#x4E0B;&#x8BB0;&#x5F55;&#x4E00;&#x4E0B;&#x5B9A;&#x4F4D;&#x6B64;&#x95EE;&#x9898;&#x8FC7;&#x7A0B;&#x4E2D;&#x7684;&#x4E00;&#x4E9B;&#x6536;&#x83B7;&#x3002; &#x62FF;&#x5230;&#x624B;&#x7684;&#x662F;&#x4E00;&#x6761;&#x5D29;&#x6E83;log&#xFF1A; &#x5D29;&#x6E83;&#x57FA;&#x672C;&#x4FE1;&#x606F;&#xFF1A; &#x5D29;&#x6E83;&#x4F4D;&#x7F6E;&#x4E3A;thread 10&#xFF0C;&#x5176;&#x8C03;&#x7528;&#x6808;&#x5982;&#x4E0B;&#xFF1A; &#x5148;&#x4ECE;SEGV_ACCERR at 0x70&#x5F00;&#x59CB;&#x3002; &#x7ECF;&#x67E5;&#xFF0C;&#x6808;&#x9876;&#x7684;dispatch_continuation_async&#x65B9;&#x6CD5;&#x662F;&#x7531;dispatch_sync&#x8C03;&#x7528;&#x7684;&#x4E00;&#x4E2A;&#x5185;&#x90E8;&#x65B9;&#x6CD5;&#x3002;&#x901A;&#x8FC7;&#x67E5;&#x770B;dispatch_continuation_async&#x7684;&#x6C47;&#x7F16;&#x4EE3;&#x7801;&#xFF0C;&#x7ED3;&#x5408;&#x5176;&#x5F00;&#x6E90;&#x5B9E;&#x73B0;&#xFF0C;SEGV_ACCERR at 0x70&#x5E94;&#x8BE5;&#x662F;&#x5728;&#x8C03;&#x7528;dispatch_continuation_async&#x65F6;&#x7ED9;queue&#x53C2;&#x6570;&#x4F20;&#x4E86;0&#x3002; &#x4F46;&#x4E0E;&#x4E0A;&#x56FE;&#x4E2D;Thread 10&#x7684;&#x5D29;&#x6E83;&#x6808;&#x76F8;&#x77DB;&#x76FE;&#x7684;&#x662F;&#xFF0C;audioSourceDidStop&#x5E76;&#x672A;&#x76F4;&#x63A5;&#x8C03;&#x7528;dispatch_async&#x3002; audioSourceDidStop&#x7684;&#x6E90;&#x7801;&#x5982;&#x4E0B;&#xFF1A; &#x5C06;&#x5D29;&#x6E83;&#x8BE6;&#x7EC6;&#x4FE1;&#x606F;&#x4E2D;lr&#x5BC4;&#x5B58;&#x5668;&#x7684;&#x5730;&#x5740;&#x7ECF;&#x8FC7;atos&#x8FDB;&#x884C;&#x7B26;&#x53F7;&#x89E3;&#x6790;&#x540E;&#x5F97;&#x5230;&#xFF0C;&#x5D29;&#x6E83;&#x5F53;&#x65F6;&#x7684;&#x8FD4;&#x56DE;&#x5730;&#x5740;&#x5E94;&#x4E3A;&#xFF1A;vadData2SpeexData&#x65B9;&#x6CD5;&#x4E2D;&#x7684;&#x6587;&#x4EF6;485&#x884C;&#x5904;&#xFF1A; 12$atos -arch arm64 -o xxx.dSYM/Contents/Resources/DWARF/XXX -l 0x10016c000 0x00000001003e5b80-[SogouDefaultSpeechRecognizer vadData2SpeexData:status:beginSampleOffset:endSampleOffset:] (in SogouInput) (SogouDefaultSpeechRecognizer.m:485) &#x5B9E;&#x9645;&#x4EE3;&#x7801;&#x4E2D;audioSourceDidStop&#x5B9E;&#x9645;&#x4E0A;&#x662F;&#x901A;&#x8FC7;postEndSignal&#x65B9;&#x6CD5;&#x8C03;&#x7528;&#x5230;&#x4E86;vadData2SpeexData&#xFF0C;&#x800C;&#x6B64;&#x65B9;&#x6CD5;&#x4E5F;&#x7684;&#x786E;&#x8C03;&#x5230;&#x4E86;dispatch_async&#xFF0C;&#x5176;485&#x884C;&#x4E3A;dispatch_async&#x7684;&#x4E0B;&#x4E00;&#x884C;&#x3002;&#x6240;&#x4EE5;&#x53EF;&#x4EE5;&#x57FA;&#x672C;&#x786E;&#x5B9A;&#xFF0C;&#x5D29;&#x6E83;&#x65F6;&#x7684;&#x73B0;&#x573A;&#x7684;&#x8C03;&#x7528;&#x5173;&#x7CFB;&#x662F;&#xFF1A; audioSourceDidStop -&gt; postEndSignal -&gt; vadData2SpeexData &#x5176;&#x4E2D;postEndSignal&#x7684;&#x6E90;&#x7801;&#x5982;&#x4E0B;&#xFF1A; &#x518D;&#x7ECF;&#x8FC7;&#x8FDB;&#x4E00;&#x6B65;&#x5B9A;&#x4F4D;&#xFF0C;&#x5D29;&#x6E83;&#x539F;&#x56E0;&#x5E94;&#x8BE5;&#x662F;&#xFF1A;&#x5728;vadData2SpeexData&#x65B9;&#x6CD5;&#x4E2D;&#xFF0C;&#x7ED9;dispatch_async&#x4F20;&#x5165;&#x7684;queue&#x53C2;&#x6570;&#x7684;&#x786E;&#x4F1A;&#x88AB;&#x591A;&#x4E2A;&#x7EBF;&#x7A0B;&#x8FDB;&#x884C;&#x8BFB;&#x5199;&#xFF0C;&#x5728;&#x8C03;&#x7528;&#x65F6;&#x7684;&#x786E;&#x53EF;&#x80FD;&#x4E3A;&#x7A7A;&#xFF1A; &#x6240;&#x4EE5;&#x57FA;&#x672C;&#x53EF;&#x4EE5;&#x786E;&#x5B9A;&#x4FEE;&#x6539;&#x65B9;&#x5411;&#x4E3A;_speexQueue&#x7684;&#x591A;&#x7EBF;&#x7A0B;&#x4FDD;&#x62A4;&#x3002; &#x4F46;&#x662F;&#x4E3A;&#x4F55;&#x5D29;&#x6E83;&#x6808;&#x4E2D;&#x5E76;&#x672A;&#x663E;&#x793A;postEndSignal&#x548C;vadData2SpeexData&#x5462;&#xFF1F; &#x9996;&#x5148;&#x6000;&#x7591;&#x662F;&#x6808;&#x56DE;&#x6EAF;&#x51FA;&#x4E86;&#x95EE;&#x9898;&#xFF0C;&#x662F;&#x4E0D;&#x662F;&#x6808;&#x88AB;&#x5199;&#x574F;&#x4E86;&#xFF1F;&#x4F46;&#x6309;&#x7406;&#x8BF4;&#x5982;&#x679C;&#x5199;&#x574F;&#x7684;&#x8BDD;&#x540E;&#x9762;&#x7684;frame&#x4E5F;&#x5C31;&#x627E;&#x4E0D;&#x5230;&#x4E86;&#xFF0C;&#x7CFB;&#x7EDF;&#x662F;&#x5982;&#x4F55;&#x5728;&#x5934;&#x90E8;&#x627E;&#x4E0D;&#x5230;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x627E;&#x5230;&#x66F4;&#x6DF1;&#x5C42;&#x7684;frame pointer&#x7684;&#x5462;&#xFF1F; &#x5E26;&#x7740;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x67E5;&#x4E86;&#x4E00;&#x4E9B;&#x6587;&#x6863;&#xFF0C;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x6BD4;&#x8F83;&#x6709;&#x8DA3;&#x7684;&#x70B9;&#xFF1A; apple&#x7684;arm64 calling convention&#x89C4;&#x8303;&#x4E2D;&#x6709;&#x5982;&#x4E0B;&#x63CF;&#x8FF0;&#xFF1A; &#x90A3;&#x4E48;&#x5728;&#x521A;&#x624D;&#x8FD9;&#x4E2A;&#x5D29;&#x6E83;&#x7684;&#x73B0;&#x573A;&#x6709;&#x6CA1;&#x6709;tail call&#x5462;&#xFF1F;&#x7528;hopper&#x770B;&#x4E86;&#x4E00;&#x4E0B;&#xFF0C;&#x5728;postEndSignal&#x8C03;&#x7528;vadData2SpeexData&#x65F6;&#xFF0C;&#x7684;&#x786E;&#x662F;&#x4E00;&#x4E2A;&#x76F4;&#x63A5;&#x8DF3;&#x8F6C;&#xFF0C;postEndSignal&#x7684;&#x6C47;&#x7F16;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A; &#x5982;&#x7EA2;&#x6846;&#x4E2D;&#x6240;&#x793A;&#xFF0C;&#x5728;&#x8DF3;&#x8F6C;&#x5230;objc_msgSend&#xFF08;&#x5373;&#x8C03;&#x7528;vadData2SpeexData&#xFF09;&#x524D;&#x5DF2;&#x7ECF;&#x5C06;&#x6808;&#x548C;&#x5BC4;&#x5B58;&#x5668;&#xFF08;&#x5305;&#x62EC;x29&#x548C;x30&#xFF0C;&#x5373;fp&#x548C;lr&#xFF09;&#x90FD;&#x6062;&#x590D;&#x6210;&#x8C03;&#x7528;postEndSignal&#x4E4B;&#x524D;&#x7684;&#x72B6;&#x6001;&#x4E86;&#xFF0C;&#x800C;&#x4E14;&#x8DF3;&#x8F6C;&#x7528;&#x7684;&#x662F;b&#x6307;&#x4EE4;&#x3002; &#x8FD9;&#x6837;&#x5BF9;vadData2SpeexData&#x7684;&#x8C03;&#x7528;&#x5C31;&#x50CF;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x5185;&#x7684;&#x5730;&#x5740;&#x8DF3;&#x8F6C;&#x4E00;&#x6837;&#xFF0C;&#x800C;&#x4E14;&#x5176;&#x6267;&#x884C;&#x73AF;&#x5883;&#x4E3A;audioSourceDidStop&#x4E2D;&#xFF08;&#x7C7B;&#x6BD4;&#x5C06;vadData2SpeexData inline&#x5230;audioSourceDidStop&#x4E2D;&#xFF09;&#xFF0C;&#x5373;&#x5E76;&#x6CA1;&#x6709;&#x7ED9;vadData2SpeexData&#x5206;&#x914D;frame record&#xFF0C;&#x800C;postEndSignal&#x7684;&#x6267;&#x884C;&#x5DF2;&#x7ECF;&#x7ED3;&#x675F;&#x3002; &#x5D29;&#x6E83;&#x65F6; fp&#x5BC4;&#x5B58;&#x5668;&#x5B58;&#x653E;&#x7684;&#x5E94;&#x8BE5;&#x662F;dispatch_continuation_async&#x7684;fp, &#x56E0;&#x6B64;&#x6808;&#x9876;&#x4E3A;&#x6B64;gcd&#x65B9;&#x6CD5;&#xFF1B;&#x5176;&#x524D;&#x9A71;fp&#x4E3A;audioSourceDidStop&#x7684;fp&#xFF0C;&#x627E;&#x5230;&#x5176;&#x5BF9;&#x5E94;&#x7684;pc&#x4E3A;:audioSourceDidStop&#x4E2D;&#x7684;1048&#x884C;&#x6240;&#x5BF9;&#x5E94;&#x7684;&#x5730;&#x5740;&#x3002; ** &#x81F3;&#x6B64;&#xFF0C;&#x57FA;&#x672C;&#x53EF;&#x4EE5;&#x786E;&#x5B9A;&#x662F;&#x4E00;&#x4E2A;&#x591A;&#x7EBF;&#x7A0B;&#x5BFC;&#x81F4;&#x7684;&#x5D29;&#x6E83;&#xFF0C;&#x5176;&#x5934;&#x90E8;&#x7684;&#x5D29;&#x6E83;&#x6808;&#x56E0;&#x4E3A;tail call&#x7684;&#x4F18;&#x5316;&#x800C;&#x88AB;&#x9690;&#x85CF;&#x8D77;&#x6765;&#x4E86;&#x3002;**]]></content>
  </entry>
  <entry>
    <title><![CDATA[OCPack技术方案总结]]></title>
    <url>%2F2018%2F12%2F19%2FOCPack-design%2F</url>
    <content type="text"><![CDATA[OCPack&#x6280;&#x672F;&#x65B9;&#x6848;&#x603B;&#x7ED3;I. &#x7B80;&#x4ECB;OCPack&#x662F;&#x4E00;&#x79CD;iOS&#x52A8;&#x6001;&#x5316;&#x65B9;&#x6848;&#xFF0C;&#x7528;&#x6237;&#x53EF;&#x4EE5;&#x7528;OC&#x7F16;&#x5199;&#x5F85;&#x52A8;&#x6001;&#x5316;&#x7684;&#x529F;&#x80FD;&#x903B;&#x8F91;&#xFF08;.m&#xFF09;&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7;OCPack&#x63D0;&#x4F9B;&#x7684;&#x5DE5;&#x5177;&#x94FE;&#x751F;&#x6210;patch&#x6587;&#x4EF6;&#xFF08;.bin)&#x3002;&#x5BA2;&#x6237;&#x7AEF;&#x5219;&#x5185;&#x7F6E;&#x4E86;&#x4E00;&#x4E2A;&#x57FA;&#x4E8E;Native&#x73AF;&#x5883;&#x7684;&#x7684;&#x865A;&#x62DF;&#x6808;&#x673A;&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x52A8;&#x6001;&#x52A0;&#x8F7D;&#x5E76;&#x6267;&#x884C;&#x5B58;&#x50A8;&#x5728;&#x5BA2;&#x6237;&#x7AEF;&#x7684;patch&#x6587;&#x4EF6;&#x4E2D;&#x7684;&#x65B9;&#x6CD5;&#x3002;patch&#x6587;&#x4EF6;&#x53EF;&#x6839;&#x636E;&#x4E1A;&#x52A1;&#x9700;&#x8981;&#x968F;&#x65F6;&#x4E0B;&#x8F7D;&#x3001;&#x66F4;&#x65B0;&#x5E76;&#x7531;&#x865A;&#x62DF;&#x673A;&#x91CD;&#x65B0;&#x52A0;&#x8F7D;&#x3001;&#x8FD0;&#x884C;&#x3002; &#x6B64;&#x65B9;&#x6848;&#x7684;&#x4E3B;&#x8981;&#x4F18;&#x70B9;&#xFF1A; 1.&#x5F00;&#x53D1;&#x6548;&#x7387;&#x53EF;&#x4EE5;&#x4F7F;&#x5F00;&#x53D1;&#x8005;&#x50CF;&#x5199;&#x666E;&#x901A;&#x529F;&#x80FD;&#x4EE3;&#x7801;&#x4E00;&#x6837;&#xFF0C;&#x4F7F;&#x7528;&#x719F;&#x6089;&#x7684;Xcode IDE&#x548C;Objective-C&#x8BED;&#x8A00;&#x8FDB;&#x884C;&#x5F00;&#x53D1;&#x3001;&#x8C03;&#x8BD5;&#xFF0C;&#x5728;&#x5F00;&#x53D1;&#x5B8C;&#x6210;&#x540E;&#x4F7F;&#x7528;&#x5DE5;&#x5177;&#x94FE;&#x5373;&#x53EF;&#x65B9;&#x4FBF;&#x5730;&#x751F;&#x6210;patch&#x6587;&#x4EF6;&#xFF0C;&#x63D0;&#x9AD8;&#x5F00;&#x53D1;patch&#x7684;&#x6548;&#x7387;&#x3002; 2.&#x8BED;&#x6CD5;&#x8986;&#x76D6;&#x8003;&#x8651;&#x5230;&#x4F7F;&#x7528;&#x8005;&#x7684;&#x65B9;&#x4FBF;&#x6027;&#x548C;&#x5F00;&#x53D1;&#x5468;&#x671F;&#x7684;&#x5E73;&#x8861;&#xFF0C;&#x76EE;&#x524D;OCPack&#x7684;&#x5B9E;&#x73B0;&#x8986;&#x76D6;&#x4E86;c&#x8BED;&#x8A00;&#x7684;&#x57FA;&#x672C;&#x8BED;&#x6CD5;&#x548C;Objective-C&#x4E2D;&#x6BD4;&#x8F83;&#x5E38;&#x7528;&#x7684;&#x8BED;&#x6CD5;&#xFF0C;&#x4FDD;&#x8BC1;&#x5F00;&#x53D1;&#x8005;&#x5728;&#x4F7F;&#x7528;&#x4E2D;&#x5927;&#x90E8;&#x5206;&#x5E38;&#x7528;&#x7684;&#x5199;&#x6CD5;&#x90FD;&#x80FD;&#x76F4;&#x63A5;&#x652F;&#x6301;&#xFF0C;&#x800C;&#x90E8;&#x5206;&#x4E0D;&#x80FD;&#x652F;&#x6301;&#x7684;&#x8BED;&#x6CD5;&#x4E5F;&#x6709;&#x76F8;&#x5E94;&#x7684;&#x66FF;&#x4EE3;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#x3002; 3.&#x95EE;&#x9898;&#x5B9A;&#x4F4D; &#x5BF9;&#x4E8E;&#x6682;&#x4E0D;&#x652F;&#x6301;&#x7684;&#x8BED;&#x6CD5;&#xFF0C;OCPack&#x7684;&#x5DE5;&#x5177;&#x94FE;&#x80FD;&#x591F;&#x660E;&#x786E;&#x5730;&#x7ED9;&#x51FA;&#x9519;&#x8BEF;&#x539F;&#x56E0;&#x63D0;&#x793A;&#x53CA;&#x9519;&#x8BEF;&#x4EE3;&#x7801;&#x4F4D;&#x7F6E;&#xFF0C;&#x65B9;&#x4FBF;&#x5B9A;&#x4F4D;&#x5F00;&#x53D1;&#x4E2D;&#x9047;&#x5230;&#x7684;&#x95EE;&#x9898;&#x3002; &#x4E0A;&#x7EBF;&#x540E;&#x4E5F;&#x53EF;&#x4EE5;&#x8C03;&#x7528;&#x76F8;&#x5E94;&#x63A5;&#x53E3;&#x83B7;&#x53D6;&#x865A;&#x62DF;&#x673A;&#x5728;&#x5404;&#x7EBF;&#x7A0B;&#x7684;&#x8C03;&#x7528;&#x6808;&#x4FE1;&#x606F;&#xFF0C;&#x7ED3;&#x5408;&#x7F16;&#x8BD1;&#x8FC7;&#x7A0B;&#x4E2D;&#x751F;&#x6210;&#x7684;&#x7B26;&#x53F7;&#x6587;&#x4EF6;&#xFF0C;&#x5F00;&#x53D1;&#x5C31;&#x80FD;&#x591F;&#x51C6;&#x786E;&#x5B9A;&#x4F4D;&#x5230;&#x5F53;&#x65F6;&#x865A;&#x62DF;&#x673A;&#x8C03;&#x7528;&#x5230;&#x7684;&#x6E90;&#x6587;&#x4EF6;&#x4EE3;&#x7801;&#x884C;&#x6570;&#xFF0C;&#x65B9;&#x4FBF;&#x5B9A;&#x4F4D;&#x3001;&#x89E3;&#x51B3;&#x7EBF;&#x4E0A;&#x95EE;&#x9898;&#x3002;&#x7B26;&#x53F7;&#x89E3;&#x6790;&#x5DE5;&#x5177;&#x4E5F;&#x5305;&#x542B;&#x5728;&#x5DE5;&#x5177;&#x94FE;&#x4E2D;&#x3002; 4.&#x6027;&#x80FD;&#x7531;&#x4E8E;&#x662F;&#x57FA;&#x4E8E;Native&#x73AF;&#x5883;&#xFF0C;&#x4E14;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x6808;&#x673A;&#x6307;&#x4EE4;&#x96C6;&#x610F;&#x4E49;&#x660E;&#x786E;&#x3001;&#x8BBE;&#x8BA1;&#x7CBE;&#x7B80;&#xFF0C;&#x5E76;&#x4E14;&#x5927;&#x90E8;&#x5206;&#x4E0E;Native&#x73AF;&#x5883;&#x4E4B;&#x95F4;&#x7684;&#x4EA4;&#x4E92;&#x90FD;&#x662F;&#x76F4;&#x63A5;&#x64CD;&#x4F5C;&#x5185;&#x5B58;&#x5730;&#x5740;&#xFF0C;&#x7701;&#x53BB;&#x4E86;&#x50CF;JSPatch&#x4E00;&#x6837;&#x9891;&#x7E41;&#x5B57;&#x7B26;&#x4E32;&#x89E3;&#x6790;&#x53CA;Box/Unbox&#x7684;&#x5F00;&#x9500;&#x3002;&#x5176;&#x4E2D;OC&#x6865;&#x63A5;&#x8C03;&#x7528;&#x6548;&#x7387;&#x8FD1;&#x4F3C;&#x539F;&#x751F;&#x3002; 5.&#x5185;&#x5B58;&#x53CA;&#x7A33;&#x5B9A;&#x6027; JS&#x7684;GC&#x7684;&#x5185;&#x5B58;&#x7BA1;&#x7406;&#x673A;&#x5236;&#x4F1A;&#x5BFC;&#x81F4;&#x5185;&#x5B58;&#x4E0D;&#x80FD;&#x53CA;&#x65F6;&#x91CA;&#x653E;&#xFF0C;&#x800C;&#x5982;&#x679C;&#x5F3A;&#x884C;&#x91CA;&#x653E;&#x6389;JSContext&#x4F1A;&#x5BFC;&#x81F4;&#x7EBF;&#x4E0A;&#x51FA;&#x73B0;&#x4E00;&#x4E9B;&#x8BE1;&#x5F02;&#x7684;&#x5D29;&#x6E83;&#xFF0C;&#x96BE;&#x4EE5;&#x5B9A;&#x4F4D;&#x548C;&#x89E3;&#x51B3;&#x3002; &#x6B64;&#x65B9;&#x6848;&#x7684;&#x5185;&#x5B58;&#x7BA1;&#x7406;&#x5B8C;&#x5168;&#x7531;&#x7528;&#x6237;&#x4EE3;&#x7801;&#x63A7;&#x5236;&#xFF08;MRC&#xFF09;&#xFF0C;&#x80FD;&#x591F;&#x4E0E;&#x5BA2;&#x6237;&#x7AEF;&#x7684;ARC/MRC&#x5185;&#x5B58;&#x7BA1;&#x7406;&#x673A;&#x5236;&#x6B63;&#x786E;&#x914D;&#x5408;&#xFF0C;&#x6D88;&#x9664;&#x4E86;GC&#x65F6;&#x673A;&#x4E0D;&#x53EF;&#x63A7;&#x7684;&#x95EE;&#x9898;&#x3002; &#x800C;&#x4E14;&#x7ED3;&#x5408;xxx&#x672C;&#x8EAB;&#x7684;&#x7279;&#x70B9;&#xFF0C;&#x5C06;&#x4E3B;&#x8981;&#x5185;&#x5B58;&#x90FD;&#x653E;&#x5230;mmap&#x4E2D;&#xFF0C;&#x5C3D;&#x91CF;&#x4E0D;&#x5360;&#x7528;xxx&#x7684;&#x5185;&#x5B58;&#x914D;&#x989D;&#xFF0C;&#x63D0;&#x9AD8;xxx&#x7684;&#x7A33;&#x5B9A;&#x6027;&#x3002; II. &#x6280;&#x672F;&#x65B9;&#x6848;OCPack&#x4F7F;&#x7528;clang&#x5206;&#x6790;&#x76EE;&#x6807;Objective-C&#x4EE3;&#x7801;&#x7684;&#x8BED;&#x6CD5;&#x6811;&#xFF0C;&#x901A;&#x8FC7;&#x81EA;&#x5B9A;&#x4E49;ASTFrontendAction&#x6765;&#x904D;&#x5386;&#x8BED;&#x6CD5;&#x6811;&#xFF0C;&#x751F;&#x6210;&#x81EA;&#x5B9A;&#x4E49;&#x6307;&#x4EE4;&#x96C6;&#x7684;&#x6C47;&#x7F16;&#x7A0B;&#x5E8F;&#x3002;&#x5728;&#x5BA2;&#x6237;&#x7AEF;&#xFF0C;&#x7531;&#x81EA;&#x7814;&#x7684;&#x865A;&#x62DF;&#x6808;&#x673A;&#x6765;&#x89E3;&#x91CA;&#x6267;&#x884C;&#x6C47;&#x7F16;&#x7A0B;&#x5E8F;&#x4E2D;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x6307;&#x4EE4;&#x3002; &#x751F;&#x6210;patch&#x6587;&#x4EF6;&#x7684;&#x57FA;&#x672C;&#x6570;&#x636E;&#x6D41;&#x7A0B;&#x662F;&#xFF1A; OC&#x6E90;&#x7801;&#x4F1A;&#x9996;&#x5148;&#x901A;&#x8FC7;OCPack&#x7F16;&#x8BD1;&#x5DE5;&#x5177;&#x8F6C;&#x6362;&#x4E3A;&#x81EA;&#x5B9A;&#x4E49;&#x6307;&#x4EE4;&#x96C6;&#x7684;&#x6C47;&#x7F16;&#x7A0B;&#x5E8F;&#xFF08;.s&#xFF09;&#x3002;&#x6B64;&#x8FC7;&#x7A0B;&#x4E3B;&#x8981;&#x662F;&#x901A;&#x8FC7;&#x89E3;&#x6790;LLVM&#x751F;&#x6210;&#x7684;OC&#x4EE3;&#x7801;&#x8BED;&#x6CD5;&#x6811;&#xFF08;AST&#xFF09;&#x5B9E;&#x73B0;&#x7684;&#x3002; &#x6C47;&#x7F16;&#x7A0B;&#x5E8F;&#x5219;&#x901A;&#x8FC7;&#x4E00;&#x4E2A;assemble&#x5DE5;&#x5177;&#xFF08;smc&#xFF09;&#x8F6C;&#x6362;&#x4E3A;&#x4E8C;&#x8FDB;&#x5236;&#x7684;patch&#x6587;&#x4EF6;&#xFF08;.bin&#xFF09;&#x3002;&#x6211;&#x4EEC;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x6808;&#x673A;&#x6C47;&#x7F16;&#x6307;&#x4EE4;&#x4E3B;&#x8981;&#x6709;67&#x6761;&#xFF0C;&#x9664;&#x57FA;&#x672C;&#x6307;&#x4EE4;&#x4EE5;&#x5916;&#xFF0C;&#x4E3B;&#x8981;&#x662F;&#x4F9D;&#x636E;&#x8BED;&#x6CD5;&#x6811;&#x7ED3;&#x70B9;&#x7C7B;&#x578B;&#x8BBE;&#x8BA1;&#x3002; &#x5728;&#x8FD0;&#x884C;&#x65F6;&#xFF0C;&#x5BA2;&#x6237;&#x7AEF;&#x5185;&#x7F6E;&#x7684;&#x865A;&#x62DF;&#x6808;&#x673A;&#x80FD;&#x591F;&#x6839;&#x636E;&#x7528;&#x6237;&#x9700;&#x6C42;&#x52A0;&#x8F7D;&#x6307;&#x5B9A;&#x7684;patch&#x6587;&#x4EF6;&#xFF0C;&#x7136;&#x540E;&#x5C31;&#x53EF;&#x4EE5;&#x6267;&#x884C;&#x5176;&#x4E2D;&#x4EFB;&#x610F;&#x65B9;&#x6CD5;&#x4E86;&#x3002; &#x4EE5;&#x4E0B;&#x5206;&#x6A21;&#x5757;&#x6765;&#x4ECB;&#x7ECD;&#x4E3B;&#x8981;&#x6280;&#x672F;&#x70B9;&#xFF1A; Compiler&#xFF1A;Objective-C&#x7A0B;&#x5E8F;(.m) -&gt; &#x8BED;&#x6CD5;&#x6811; -&gt; &#x6C47;&#x7F16;&#x7A0B;&#x5E8F;(.s)1. &#x72EC;&#x7ACB;&#x7684;&#x7F16;&#x8BD1;&#x7A0B;&#x5E8F;&#x4E3B;&#x8981;&#x4F7F;&#x7528;clang&#x7684;libTooling&#x63A5;&#x53E3;&#xFF0C;&#x5B9E;&#x73B0;&#x4E86;AST FrontendAction&#xFF0C;&#x901A;&#x8FC7;&#x5B9E;&#x73B0;&#x81EA;&#x5B9A;&#x4E49;&#x7684;ASTConsumer&#x9012;&#x5F52;&#x904D;&#x5386;&#x8BED;&#x6CD5;&#x6811;&#xFF0C;&#x5BF9;&#x4E0D;&#x540C;&#x7684;&#x8282;&#x70B9;&#x7C7B;&#x578B;&#x4F5C;&#x76F8;&#x5E94;&#x5904;&#x7406;&#xFF0C;&#x751F;&#x6210;&#x53EF;&#x6267;&#x884C;&#x7684;&#x6C47;&#x7F16;&#x6307;&#x4EE4;&#x7A0B;&#x5E8F;&#x3002; &#x7F16;&#x8BD1;&#x9009;&#x9879;&#x8981;&#x8C03;&#x7528;clang&#x7684;&#x6A21;&#x5757;&#x4E3A;&#x76EE;&#x6807;OC&#x6587;&#x4EF6;(.m)&#x751F;&#x6210;&#x8BED;&#x6CD5;&#x6811;&#xFF0C;&#x9700;&#x8981;&#x5148;&#x63D0;&#x4F9B;&#x7F16;&#x8BD1;&#x6B64;.m&#x6240;&#x9700;&#x7684;&#x7F16;&#x8BD1;&#x9009;&#x9879;&#x3002;&#x5BF9;&#x4E8E;&#x96C6;&#x6210;&#x65B9;&#x6765;&#x8BF4;&#xFF0C;&#x76EE;&#x6807;&#x6587;&#x4EF6;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x4F9D;&#x8D56;&#x5F88;&#x591A;&#x76F8;&#x5173;&#x7684;.h&#x6216;&#x6709;&#x5176;&#x4ED6;&#x7F16;&#x8BD1;&#x5F00;&#x5173;&#xFF0C;&#x4E3A;&#x4E86;&#x65B9;&#x4FBF;&#x96C6;&#x6210;&#x65B9;&#x5F97;&#x5230;&#x5B8C;&#x6574;&#x7684;&#x7F16;&#x8BD1;&#x9009;&#x9879;&#x5217;&#x8868;&#xFF0C;&#x6211;&#x4EEC;&#x5236;&#x4F5C;&#x4E86;&#x76F8;&#x5E94;&#x7684;&#x5DE5;&#x5177;&#xFF0C;&#x53EF;&#x4EE5;&#x65B9;&#x4FBF;&#x5730;&#x4ECE;&#x96C6;&#x6210;&#x65B9;&#x5DE5;&#x7A0B;&#x7684;&#x7F16;&#x8BD1;&#x65E5;&#x5FD7;&#x4E2D;&#x5F97;&#x5230;&#x76EE;&#x6807;&#x6587;&#x4EF6;&#x6240;&#x9700;&#x7684;&#x7F16;&#x8BD1;&#x9009;&#x9879;&#x7684;&#x5B8C;&#x6574;&#x5217;&#x8868;&#x3002; &#x7F16;&#x8BD1;&#x9519;&#x8BEF;&#x548C;&#x8B66;&#x544A;OCPack&#x652F;&#x6301;Objective-C&#x8BED;&#x8A00;&#x4E2D;&#x5E38;&#x7528;&#x7684;&#x8BED;&#x6CD5;&#x7C7B;&#x578B;&#xFF0C;&#x5BF9;&#x4E8E;&#x4E0D;&#x652F;&#x6301;&#x7684;&#x8BED;&#x6CD5;&#xFF0C;&#x5728;&#x7F16;&#x8BD1;&#x671F;&#x95F4;&#x4F1A;&#x751F;&#x6210;&#x76F8;&#x5E94;&#x7684;&#x65E5;&#x5FD7;&#x6587;&#x4EF6;&#xFF0C;&#x5177;&#x4F53;&#x6807;&#x660E;&#x4E86;&#x9519;&#x8BEF;&#x7C7B;&#x578B;&#x548C;&#x9519;&#x8BEF;&#x4F4D;&#x7F6E; &#xFF0C;&#x65B9;&#x4FBF;&#x5F00;&#x53D1;&#x5B9A;&#x4F4D;&#x95EE;&#x9898;&#x3002; &#x6CE8;&#xFF1A;&#x4E3A;&#x4E86;&#x8FDB;&#x4E00;&#x6B65;&#x63D0;&#x9AD8;&#x5F00;&#x53D1;&#x6548;&#x7387;&#xFF0C;OCPack&#x8FD8;&#x5B9E;&#x73B0;&#x4E86;&#x4E00;&#x4E2A;&#x72EC;&#x7ACB;&#x7684;clang plugin&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x7ED9;&#x5DE5;&#x7A0B;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;.xcconfig&#x6587;&#x4EF6;&#xFF08;&#x66FF;&#x6362;&#x9ED8;&#x8BA4;&#x7684;clang&#xFF09;&#xFF0C;&#x5B9E;&#x73B0;&#x5728;Xcode&#x4E2D;&#x663E;&#x793A;&#x76F8;&#x5173;&#x7684;&#x7F16;&#x8BD1;&#x9519;&#x8BEF;&#xFF0C;&#x5E76;&#x80FD;&#x4E00;&#x952E;&#x751F;&#x6210;.bin&#xFF0C;&#x7701;&#x53BB;&#x4E86;&#x83B7;&#x53D6;&#x7F16;&#x8BD1;&#x9009;&#x9879;&#x548C;&#x624B;&#x5DE5;&#x67E5;&#x770B;&#x9519;&#x8BEF;&#x65E5;&#x5FD7;&#x7684;&#x6B65;&#x9AA4;&#xFF0C;&#x7B80;&#x5316;&#x4E86;&#x5F00;&#x53D1;&#x6D41;&#x7A0B;&#x3002; 2. &#x6808;&#x673A;&#x6C47;&#x7F16;&#x6307;&#x4EE4;&#x96C6;&#x4E3A;&#x4E86;&#x8FDE;&#x63A5;&#x5305;&#x542B;&#x6709;Objective-C&#x4EE3;&#x7801;&#x903B;&#x8F91;&#x7684;&#x8BED;&#x6CD5;&#x6811;&#x548C;&#x5BA2;&#x6237;&#x7AEF;&#x8FD0;&#x884C;&#x7684;&#x865A;&#x62DF;&#x673A;&#xFF0C;OCPack&#x9700;&#x8981;&#x5B9A;&#x4E49;&#x4E00;&#x5957;&#x6BD4;&#x8F83;&#x5B8C;&#x6574;&#x7684;&#x6C47;&#x7F16;&#x6307;&#x4EE4;&#x96C6;&#x3002;&#x8BE5;&#x6307;&#x4EE4;&#x96C6;&#x5E94;&#x8BE5;&#x6EE1;&#x8DB3;&#x4EE5;&#x4E0B;&#x4E24;&#x4E2A;&#x6761;&#x4EF6;&#xFF1A; &#x63D0;&#x4F9B;&#x8DB3;&#x591F;&#x7684;&#x529F;&#x80FD;&#x652F;&#x6301;&#xFF0C;&#x7528;&#x4EE5;&#x5B9E;&#x73B0;&#x9884;&#x5B9A;&#x4E49;&#x7684;Objective-C&#x8BED;&#x6CD5;&#x8303;&#x56F4;&#x3002;&#x5177;&#x4F53;&#x5730;&#xFF0C;&#x5BF9;&#x4E8E;&#x6307;&#x5B9A;&#x7684;&#x8BED;&#x6CD5;&#x6811;&#x8282;&#x70B9;&#x7C7B;&#x578B;&#x96C6;&#x5408;&#xFF0C;&#x80FD;&#x591F;&#x901A;&#x8FC7;&#x7F16;&#x8BD1;&#x903B;&#x8F91;&#x751F;&#x6210;&#x76F8;&#x5E94;&#x7684;&#x6C47;&#x7F16;&#x6307;&#x4EE4;&#x7EC4;&#x5408;&#xFF0C;&#x7B49;&#x4EF7;&#x5730;&#x5B8C;&#x6210;&#x539F;Objective-C&#x4EE3;&#x7801;&#x6240;&#x8981;&#x5B9E;&#x73B0;&#x7684;&#x903B;&#x8F91;&#x529F;&#x80FD;&#x3002; &#x5C3D;&#x91CF;&#x51CF;&#x5C11;&#x6307;&#x4EE4;&#x96C6;&#x7684;&#x590D;&#x6742;&#x6027;&#xFF1A;&#x4E00;&#x65B9;&#x9762;&#x5E94;&#x5C3D;&#x91CF;&#x51CF;&#x5C11;&#x6307;&#x4EE4;&#x7684;&#x6761;&#x6570;&#xFF0C;&#x4EE5;&#x964D;&#x4F4E;&#x865A;&#x62DF;&#x673A;&#x5B9E;&#x73B0;&#x7684;&#x590D;&#x6742;&#x6027;&#xFF1B;&#x53E6;&#x4E00;&#x65B9;&#x9762;&#x5E94;&#x5C3D;&#x91CF;&#x964D;&#x4F4E;&#x5355;&#x6761;&#x6307;&#x4EE4;&#x672C;&#x8EAB;&#x7684;&#x8BED;&#x4E49;&#x590D;&#x6742;&#x6027;&#xFF0C;&#x6BCF;&#x6761;&#x6307;&#x4EE4;&#x5E94;&#x5B8C;&#x6210;&#x660E;&#x786E;&#x800C;&#x6709;&#x9650;&#x7684;&#x529F;&#x80FD;&#x3002; &#x4EE5;&#x4E0B;&#x7B80;&#x8981;&#x4ECB;&#x7ECD;&#x51E0;&#x4E2A;&#x6BD4;&#x8F83;&#x5178;&#x578B;&#x7684;&#x6307;&#x4EE4;&#x7684;&#x8BBE;&#x8BA1;&#x65B9;&#x6848;&#xFF1A; 2.1 push&#x548C;pop&#x6307;&#x4EE4;&#x6808;&#x673A;&#x4E2D;&#x6700;&#x57FA;&#x672C;&#x7684;&#x90E8;&#x4EF6;&#x662F;&#x64CD;&#x4F5C;&#x6808;&#xFF0C;&#x7528;&#x4E8E;&#x5B58;&#x653E;&#x6B63;&#x5728;&#x8FDB;&#x884C;&#x4E2D;&#x7684;&#x64CD;&#x4F5C;&#x6570;&#x548C;&#x64CD;&#x4F5C;&#x7ED3;&#x679C;&#x3002;&#x5982;&#xFF1A;&#x8981;&#x8BA1;&#x7B97;1+2&#xFF0C;&#x6808;&#x673A;&#x9700;&#x8981;&#x6267;&#x884C;&#x7C7B;&#x4F3C;&#x4EE5;&#x4E0B;&#x6307;&#x4EE4;&#xFF1A; 123push instant 1push instant 2add &#x5148;&#x5C06;&#x4E24;&#x4E2A;&#x64CD;&#x4F5C;&#x6570;1&#x548C;2&#x4F9D;&#x6B21;push&#x8FDB;&#x64CD;&#x4F5C;&#x6808;&#xFF0C;&#x518D;&#x6267;&#x884C;add&#x64CD;&#x4F5C;&#x3002;add&#x64CD;&#x4F5C;&#x8D1F;&#x8D23;&#x5148;pop&#x5BF9;&#x5E94;&#x7684;&#x64CD;&#x4F5C;&#x6570;&#xFF0C;&#x7ECF;&#x8FC7;&#x52A0;&#x6CD5;&#x8BA1;&#x7B97;&#x540E;&#x518D;&#x5C06;&#x7ED3;&#x679C;push&#x8FDB;&#x6808;&#x3002;&#x4EE5;&#x4E0A;&#x6307;&#x4EE4;&#x6267;&#x884C;&#x5B8C;&#x540E;&#xFF0C;&#x64CD;&#x4F5C;&#x6808;&#x9876;&#x5B58;&#x653E;&#x7684;&#x5C31;&#x662F;&#x64CD;&#x4F5C;&#x7ED3;&#x679C;3&#x3002;&#x4F46;&#x53EA;&#x6709;&#x64CD;&#x4F5C;&#x6808;&#x662F;&#x4E0D;&#x591F;&#x7684;&#xFF0C;&#x7A0B;&#x5E8F;&#x903B;&#x8F91;&#x7684;&#x590D;&#x6742;&#x6027;&#x8981;&#x6C42;&#x50CF;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x3001;&#x65B9;&#x6CD5;&#x53C2;&#x6570;&#x7B49;&#x6570;&#x636E;&#x62E5;&#x6709;&#x786E;&#x5B9A;&#x4E0D;&#x53D8;&#x7684;&#x5185;&#x5B58;&#x5730;&#x5740;&#xFF0C;&#x56E0;&#x6B64;OCPack&#x5C06;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x3001;&#x9759;&#x6001;&#x53D8;&#x91CF;&#x3001;&#x5E38;&#x91CF;&#x3001;&#x6307;&#x9488;&#x3001;&#x7ACB;&#x5373;&#x6570;&#x7B49;&#x5206;&#x522B;&#x5BF9;&#x5E94;&#x4E00;&#x4E2A;&#x6BB5;&#xFF0C;&#x6BCF;&#x79CD;&#x7C7B;&#x578B;&#x7684;&#x53D8;&#x91CF;&#x5BF9;&#x5E94;&#x4E8E;&#x6240;&#x5C5E;&#x6BB5;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;index&#x3002; &#x6BB5;&#xFF1A;&#x7528;&#x4E8E;&#x5B58;&#x653E;&#x5404;&#x79CD;&#x975E;&#x4E34;&#x65F6;&#x6570;&#x636E;&#xFF08;&#x53EF;&#x53D6;&#x5230;&#x5730;&#x5740;&#x7684;&#x6570;&#x636E;&#xFF09;&#xFF0C;&#x8FD9;&#x4E9B;&#x6570;&#x636E;&#x53C8;&#x5206;&#x7EBF;&#x7A0B;&#x76F8;&#x5173;&#x4E0E;&#x7EBF;&#x7A0B;&#x65E0;&#x5173;&#xFF0C;&#x5176;&#x4E2D;&#xFF1A; &#x7EBF;&#x7A0B;&#x76F8;&#x5173;&#x7684;&#x6570;&#x636E;&#x6BB5;&#x4E3B;&#x8981;&#x5305;&#x62EC;&#xFF1A; local //&#x5C40;&#x90E8;&#x53D8;&#x91CF; arg //&#x65B9;&#x6CD5;&#x5B9E;&#x53C2; this //&#x5B58;&#x653E;self&#xFF08;&#x7528;&#x4E8E;super&#x7684;&#x5B9E;&#x73B0;&#xFF09; that //&#x7528;&#x4E8E;&#x5B9E;&#x73B0;struct&#x7684;&#x6210;&#x5458;&#x53D8;&#x91CF; pointer //&#x7528;&#x4E8E;&#x8F85;&#x52A9;&#x5B9E;&#x73B0;this, that //&#x6CE8;: &#x7EBF;&#x7A0B;&#x76F8;&#x5173;&#x7684;&#x6BB5;&#x6570;&#x636E;&#x5B58;&#x653E;&#x5728;thread_context(&#x7EBF;&#x7A0B;&#x5C40;&#x90E8;&#x5B58;&#x50A8;)&#x4E2D;&#xFF0C;&#x53EA;&#x5BF9;&#x672C;&#x7EBF;&#x7A0B;&#x53EF;&#x89C1; &#x7EBF;&#x7A0B;&#x65E0;&#x5173;&#x7684;&#x6570;&#x636E;&#x6BB5;&#x4E3B;&#x8981;&#x5305;&#x62EC;&#xFF1A; const //&#x5E38;&#x91CF;&#x5B57;&#x7B26;&#x4E32; static //&#x9759;&#x6001;&#x53D8;&#x91CF; instant //&#x7ACB;&#x5373;&#x6570; //&#x6CE8;&#xFF1A;&#x7EBF;&#x7A0B;&#x65E0;&#x5173;&#x7684;&#x6BB5;&#x6570;&#x636E;&#x5B58;&#x653E;&#x5728;machine&#x4E2D;&#xFF0C;&#x5404;&#x7EBF;&#x7A0B;&#x90FD;&#x53EF;&#x89C1; &#x5728;&#x5BF9;&#x8BED;&#x6CD5;&#x6811;&#x8FDB;&#x884C;&#x904D;&#x5386;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;OCPack&#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;&#x7B26;&#x53F7;&#x8868;&#xFF0C;&#x5BF9;&#x6BCF;&#x4E2A;&#x53D8;&#x91CF;&#x58F0;&#x660E;(VarDecl)&#x5EFA;&#x7ACB;&#x76F8;&#x5E94;&#x7684;&#x7B26;&#x53F7;&#x8868;&#x9879;&#xFF0C;&#x5B58;&#x653E;&#x5176;&#x6BB5;&#x540D;&#x548C;index&#x3002;&#x5BF9;&#x8BED;&#x6CD5;&#x6811;&#x4E2D;&#x7684;&#x53D8;&#x91CF;&#x5F15;&#x7528;(VarDeclRef&#x7ED3;&#x70B9;)&#xFF0C;OCPack&#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x627E;&#x5230;&#x5176;&#x76F8;&#x5E94;&#x7684;VarDecl&#x7684;&#x7B26;&#x53F7;&#x8868;&#x9879;&#xFF0C;&#x751F;&#x6210;&#x76F8;&#x5E94;&#x7684;push&#x3001;pop&#x6307;&#x4EE4;&#x3002;push&#x548C;pop&#x6307;&#x4EE4;&#x7684;&#x53C2;&#x6570;&#x5C31;&#x662F;&#x6BB5;&#x540D;&#x548C;index&#xFF1A; push segment index &#x2014;&#x2014; &#x5C06;segment&#x6BB5;&#x4E2D;&#x7684;index&#x5904;&#x6570;&#x636E;push&#x5230;&#x64CD;&#x4F5C;&#x6808;&#x9876; pop segment index &#x2014;&#x2014; &#x5C06;&#x64CD;&#x4F5C;&#x6808;&#x9876;&#x7684;&#x6570;&#x636E;pop&#x5230;segment&#x6BB5;&#x4E2D;&#x7684;index&#x5904; 2.2 prolog&#x6307;&#x4EE4; prolog&#x6307;&#x4EE4;&#x662F;&#x6BCF;&#x4E2A;&#x865A;&#x62DF;&#x673A;&#x4E2D;&#x65B9;&#x6CD5;&#x7684;&#x7B2C;&#x4E00;&#x6761;&#x6307;&#x4EE4;&#xFF0C;&#x5B83;&#x4F1A;&#x6839;&#x636E;&#x5176;&#x6307;&#x4EE4;&#x53C2;&#x6570;&#x4E3A;&#x5F53;&#x524D;&#x65B9;&#x6CD5;&#x6808;&#x5E27;&#x4E2D;&#x7684;local&#x6BB5;&#x5F00;&#x8F9F;&#x76F8;&#x5E94;&#x5927;&#x5C0F;&#x7684;&#x6BB5;&#x7A7A;&#x95F4;&#xFF0C;&#x5E76;&#x8BB0;&#x5F55;&#x5F53;&#x524D;&#x6808;&#x5E27;&#x7684;&#x8FD4;&#x56DE;&#x5730;&#x5740;&#xFF0C;&#x7136;&#x540E;&#x8BA1;&#x7B97;&#x5E76;&#x8BB0;&#x5F55;&#x53C2;&#x6570;&#x5217;&#x8868;(arg&#x6BB5;)&#x8D77;&#x59CB;&#x5730;&#x5740;&#xFF0C;&#x518D;&#x5C06;&#x8C03;&#x7528;&#x8005;&#x7684;&#x6808;&#x9876;&#x6307;&#x9488;&#x6307;&#x5411;&#x53C2;&#x6570;&#x8868;&#x4E4B;&#x524D;&#xFF0C;&#x6700;&#x540E;&#x5207;&#x6362;&#x5230;&#x88AB;&#x8C03;&#x7528;&#x8005;&#x7684;&#x6808;&#x5E27;&#x3002; &#x683C;&#x5F0F;&#xFF1A;prolog arg_size local_size &#x5176;&#x4E2D;arg_size&#x8868;&#x793A;&#x6240;&#x6709;&#x53C2;&#x6570;&#x7684;&#x603B;&#x957F;&#x5EA6;&#xFF0C;&#x7528;&#x4E8E;&#x8BA1;&#x7B97;&#x53C2;&#x6570;&#x5217;&#x8868;&#x7684;&#x8D77;&#x59CB;&#x5730;&#x5740; local_size&#x8868;&#x793A;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x6BB5;&#x7684;&#x957F;&#x5EA6; &#x65B9;&#x6CD5;&#x8C03;&#x7528;&#x548C;&#x4F20;&#x53C2;&#x8FD9;&#x5757;&#x7684;&#x8BBE;&#x8BA1;&#x9700;&#x8981;&#x4E00;&#x4E9B;&#x7279;&#x522B;&#x7684;&#x8003;&#x8651;&#xFF0C;&#x4E3B;&#x8981;&#x9700;&#x8981;&#x6EE1;&#x8DB3;&#x51E0;&#x4E2A;&#x8981;&#x6C42;&#xFF1A; &#x8C03;&#x7528;&#x8005;&#x53EA;&#x9700;&#x5C06;&#x53C2;&#x6570;&#x548C;&#x8FD4;&#x56DE;&#x503C;&#x6309;&#x8981;&#x6C42;push&#x5230;&#x64CD;&#x4F5C;&#x6808;&#x4E0A;&#xFF0C;&#x7136;&#x540E;&#x76F4;&#x63A5;&#x8DF3;&#x8F6C;&#x5230;&#x88AB;&#x8C03;&#x65B9;&#x6CD5;&#x7684;&#x8D77;&#x59CB;&#x5730;&#x5740;&#xFF0C;&#x7A0B;&#x5E8F;&#x5C31;&#x53EF;&#x987A;&#x5229;&#x6267;&#x884C;&#xFF0C;&#x8C03;&#x7528;&#x65B9;&#x4E0D;&#x5E94;&#x627F;&#x62C5;&#x5176;&#x4ED6;&#x4E0D;&#x5FC5;&#x8981;&#x7684;&#x8D23;&#x4EFB; &#x6839;&#x636E;&#x6808;&#x673A;&#x7684;&#x4E00;&#x822C;&#x8C03;&#x7528;&#x903B;&#x8F91;&#xFF0C;&#x88AB;&#x8C03;&#x51FD;&#x6570;&#x8FD4;&#x56DE;&#x65F6;&#xFF0C;&#x521A;&#x624D;push&#x8FDB;&#x6765;&#x7684;&#x53C2;&#x6570;&#x548C;&#x8FD4;&#x56DE;&#x503C;&#x5E94;&#x8BE5;&#x5DF2;&#x7531;&#x88AB;&#x8C03;&#x8005;pop&#xFF0C;&#x6B64;&#x65F6;&#x6808;&#x9876;&#x5E94;&#x8BE5;&#x53EA;&#x6709;&#x8FD4;&#x56DE;&#x503C;&#xFF0C;&#x6808;&#x9876;&#x4EE5;&#x4E0B;&#x5E94;&#x8BE5;&#x662F;&#x8DDF;&#x8FD9;&#x6B21;&#x8C03;&#x7528;&#x65E0;&#x5173;&#x7684;&#x5176;&#x4ED6;&#x6570;&#x636E; &#x88AB;&#x8C03;&#x65B9;&#x9700;&#x8981;&#x77E5;&#x9053;&#x53C2;&#x6570;&#x548C;&#x8FD4;&#x56DE;&#x5730;&#x5740;&#x7684;&#x5177;&#x4F53;&#x4F4D;&#x7F6E;&#xFF0C;&#x53C2;&#x6570;&#x9700;&#x8981;&#x6709;&#x56FA;&#x5B9A;&#x5730;&#x5740;&#xFF0C;&#x652F;&#x6301;&#x968F;&#x673A;&#x8BBF;&#x95EE;&#xFF0C;&#x4E0D;&#x80FD;&#x662F;&#x53EA;&#x9760;pop&#x5F97;&#x5230;&#x7684;&#x6682;&#x5B58;&#x503C; &#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x4E5F;&#x9700;&#x8981;&#x968F;&#x673A;&#x8BBF;&#x95EE;&#xFF0C;&#x5176;&#x5927;&#x5C0F;&#x9700;&#x8981;&#x5728;&#x51FD;&#x6570;&#x6267;&#x884C;&#x4E00;&#x5F00;&#x59CB;&#x5C31;&#x5206;&#x914D;&#x597D; &#x4E3A;&#x4E86;&#x6EE1;&#x8DB3;&#x8FD9;&#x4E9B;&#x9700;&#x6C42;&#xFF0C;OCPack&#x4E2D;&#x8BBE;&#x8BA1;&#x4E86;prolog&#x8FD9;&#x4E00;&#x6307;&#x4EE4;&#xFF1A; &#x5728;&#x6BCF;&#x4E2A;&#x65B9;&#x6CD5;&#x5934;&#x90E8;&#x52A0;&#x6B64;&#x6307;&#x4EE4;&#xFF0C;&#x8C03;&#x7528;&#x8005;&#x4E00;&#x8DF3;&#x5230;&#x5F53;&#x524D;&#x65B9;&#x6CD5;&#x5C31;&#x6267;&#x884C;&#x6B64;&#x6307;&#x4EE4;&#xFF0C;&#x76F8;&#x5173;&#x8BBE;&#x7F6E;&#x90FD;&#x5728;&#x6B64;&#x6307;&#x4EE4;&#x4E2D;&#x6267;&#x884C;&#xFF0C;&#x5C3D;&#x91CF;&#x51CF;&#x5C11;&#x5BF9;&#x8C03;&#x7528;&#x8005;&#x7684;&#x8981;&#x6C42;&#x3002; &#x6839;&#x636E;&#x7EA6;&#x5B9A;&#xFF0C;&#x6267;&#x884C;&#x5230;prolog&#x65F6;&#xFF0C;&#x6808;&#x9876;&#x5B58;&#x653E;&#x7684;&#x662F;&#x8FD4;&#x56DE;&#x5730;&#x5740;&#xFF0C;&#x6808;&#x9876;&#x4EE5;&#x4E0B;&#x662F;&#x5012;&#x6392;&#x7684;&#x53C2;&#x6570;&#x8868;&#xFF0C;prolog&#x6307;&#x4EE4;&#x5148;pop&#x8FD4;&#x56DE;&#x5730;&#x5740;&#x5E76;&#x4FDD;&#x5B58;&#x4E0B;&#x6765;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x8C03;&#x7528;&#x8005;&#x7684;&#x6808;&#x6862;&#x7684;sp&#x5F80;&#x56DE;&#x8C03;&#x6574;&#x53C2;&#x6570;&#x8868;&#x7684;&#x957F;&#x5EA6;&#xFF08;&#x6B64;&#x957F;&#x5EA6;&#x4F5C;&#x4E3A;&#x6307;&#x4EE4;&#x53C2;&#x6570;&#x7531;&#x7F16;&#x8BD1;&#x65F6;&#x786E;&#x5B9A;&#xFF0C;&#x8C03;&#x7528;&#x8005;&#x65E0;&#x9700;&#x901A;&#x8FC7;&#x6808;&#x6765;&#x4F20;&#x9012;&#x6B64;&#x4FE1;&#x606F;&#xFF09;&#xFF0C;&#x4E5F;&#x5373;&#x6307;&#x5411;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x7684;&#x4F4D;&#x7F6E;&#x3002;&#x6CE8;&#x610F;&#x6B64;&#x65F6;&#x8FD8;&#x6CA1;&#x6709;&#x751F;&#x6210;&#x88AB;&#x8C03;&#x7528;&#x8005;&#x7684;&#x6808;&#x6862;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x64CD;&#x4F5C;&#x90FD;&#x8FD8;&#x5728;&#x8C03;&#x7528;&#x8005;&#x7684;&#x6808;&#x6862;&#x4E0A;&#x4E0B;&#x6587;&#x5185;&#x3002;&#x8FD9;&#x6837;&#x5C31;&#x80FD;&#x591F;&#x4FDD;&#x8BC1;&#x88AB;&#x8C03;&#x8005;&#x8FD4;&#x56DE;&#x65F6;&#x8C03;&#x7528;&#x8005;&#x7684;sp&#x662F;&#x5728;&#x5408;&#x9002;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x5230;&#x65F6;&#x5019;&#x76F4;&#x63A5;push&#x8FD4;&#x56DE;&#x503C;&#x5C31;&#x53EF;&#x4EE5;&#x3002; &#x6B64;&#x65F6;prolog&#x6839;&#x636E;&#x8FD4;&#x56DE;&#x5730;&#x5740;&#x53CA;&#x8C03;&#x7528;&#x8005;&#x7684;&#x6808;&#x6862;&#x4FE1;&#x606F;&#x751F;&#x6210;&#x65B0;&#x6808;&#x6862;&#xFF0C;&#x65B0;&#x6808;&#x5E27;&#x4E2D;&#x5EFA;&#x7ACB;&#x7684;arg&#x6BB5;&#x76F4;&#x63A5;&#x6307;&#x5411;&#x53C2;&#x6570;&#x8868;&#x7684;&#x8D77;&#x59CB;&#x4F4D;&#x7F6E;&#xFF0C;&#x4E4B;&#x540E;&#x8BBF;&#x95EE;&#x53C2;&#x6570;&#x5373;&#x53EF;&#x4F7F;&#x7528;push arg i&#x6216;pop arg i&#x7B49;&#x6307;&#x4EE4;&#x3002; &#x540C;&#x65F6;&#xFF0C;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x7684;local&#x6BB5;&#x4E5F;&#x9700;&#x8981;&#x5EFA;&#x7ACB;&#xFF0C;&#x5176;&#x5927;&#x5C0F;&#x4E5F;&#x7531;&#x7F16;&#x8BD1;&#x65F6;&#x786E;&#x5B9A;&#xFF0C;&#x5373;&#x662F;prolog&#x6307;&#x4EE4;&#x7684;local_size&#x53C2;&#x6570;&#xFF0C;&#x5728;&#x5EFA;&#x597D;&#x6808;&#x6862;&#x5E76;&#x5207;&#x6362;&#x5F53;&#x524D;&#x6808;&#x5E27;&#x540E;&#xFF0C;&#x5373;&#x5B8C;&#x6210;&#x4E86;&#x65B9;&#x6CD5;&#x8C03;&#x7528;&#x7684;&#x8FC7;&#x6E21;&#x9636;&#x6BB5;&#xFF0C;&#x7A0B;&#x5E8F;&#x6D41;&#x7A0B;&#x4FBF;&#x53EF;&#x7EE7;&#x7EED;&#x8FDB;&#x884C;&#x3002; 2.3 ret&#x6307;&#x4EE4; ret&#x6307;&#x4EE4;&#x662F;&#x865A;&#x62DF;&#x673A;&#x4E2D;&#x65B9;&#x6CD5;&#x7684;&#x6700;&#x540E;&#x4E00;&#x6761;&#x6307;&#x4EE4;&#xFF0C;&#x4E0E;prolog&#x76F8;&#x5BF9;&#x5E94;&#xFF0C;&#x7528;&#x4E8E;&#x56DE;&#x9000;&#x6808;&#x5E27;&#xFF08;unwind frame&#xFF09;&#xFF0C;&#x5E76;&#x5C06;&#x8FD4;&#x56DE;&#x503C;&#x6570;&#x636E;&#x7531;&#x88AB;&#x8C03;&#x65B9;&#x7684;&#x6808;&#x9876;&#x62F7;&#x8D1D;&#x5230;unwind&#x4EE5;&#x540E;&#x8C03;&#x7528;&#x65B9;&#x7684;&#x64CD;&#x4F5C;&#x6808;&#x9876;&#xFF0C;&#x4EE5;&#x5B9E;&#x73B0;&#x8C03;&#x7528;&#x5B8C;&#x6210;&#x540E;&#x8FD4;&#x56DE;&#x503C;&#x4F4D;&#x4E8E;&#x5F53;&#x524D;&#x6808;&#x9876;&#x7684;&#x8C03;&#x7528;&#x7EA6;&#x5B9A;&#x3002; &#x683C;&#x5F0F;&#xFF1A;ret retSize &#x6B64;&#x5904;&#x6709;&#x4E00;&#x6B21;&#x6570;&#x636E;&#x62F7;&#x8D1D;&#xFF0C;&#x62F7;&#x8D1D;&#x5927;&#x5C0F;&#x5373;&#x4E3A;&#x8FD4;&#x56DE;&#x503C;&#x7684;&#x5927;&#x5C0F;&#x3002;&#x4E3A;&#x5C3D;&#x91CF;&#x51CF;&#x5C11;&#x5BF9;&#x8C03;&#x7528;&#x8005;&#x7684;&#x5F71;&#x54CD;&#xFF0C;&#x5728;&#x7F16;&#x8BD1;&#x671F;&#x7ED9;ret&#x65B9;&#x6CD5;&#x589E;&#x52A0;retSize&#x53C2;&#x6570;&#xFF0C;&#x4EE5;&#x4FBF;&#x5728;&#x6267;&#x884C;ret&#x7684;&#x65F6;&#x5019;&#x5C31;&#x80FD;&#x5B8C;&#x6210;&#x6570;&#x636E;&#x62F7;&#x8D1D;&#xFF0C;&#x6808;&#x5E27;&#x56DE;&#x9000;&#x5230;&#x8C03;&#x7528;&#x8005;&#x540E;&#xFF0C;&#x8C03;&#x7528;&#x8005;&#x53EF;&#x4EE5;&#x9884;&#x671F;&#x8FD4;&#x56DE;&#x503C;&#x5C31;&#x5728;&#x81EA;&#x5DF1;&#x64CD;&#x4F5C;&#x6808;&#x7684;&#x6808;&#x9876;&#xFF0C;&#x540E;&#x7EED;&#x903B;&#x8F91;&#x4E0D;&#x53D7;&#x5F53;&#x524D;&#x6808;&#x9876;&#x503C;&#x662F;&#x7531;&#x65B9;&#x6CD5;&#x8C03;&#x7528;&#x8FD4;&#x56DE;&#x8FD8;&#x662F;&#x81EA;&#x884C;push&#x5F97;&#x5230;&#x7684;&#x5F71;&#x54CD;&#xFF0C;&#x903B;&#x8F91;&#x8F83;&#x6E05;&#x6670;&#x3002; 2.4 &#x8DF3;&#x8F6C;&#x6307;&#x4EE4;&#x4E3A;&#x4E86;&#x5B9E;&#x73B0;&#x6761;&#x4EF6;&#x5224;&#x65AD;if/else&#x548C;for&#x5FAA;&#x73AF;&#x7B49;&#x6D41;&#x7A0B;&#x63A7;&#x5236;&#x8BED;&#x6CD5;&#xFF0C;OCPack&#x6307;&#x4EE4;&#x96C6;&#x5B9A;&#x4E49;&#x4E86;jmp&#x548C;jmp_if&#x6307;&#x4EE4;&#xFF0C;&#x6839;&#x636E;&#x8BED;&#x6CD5;&#x6811;&#x4E2D;&#x5BF9;&#x5E94;&#x7C7B;&#x578B;&#x7684;&#x8282;&#x70B9;&#x5177;&#x4F53;&#x60C5;&#x51B5;&#xFF0C;&#x751F;&#x6210;&#x76F8;&#x5E94;&#x7684;&#x8DF3;&#x8F6C;&#x6307;&#x4EE4;&#x548C;&#x8DF3;&#x8F6C;label&#x3002;&#x8FD9;&#x4E9B;&#x6587;&#x672C;&#x8DF3;&#x8F6C;label&#x4F1A;&#x88AB;&#x5B58;&#x50A8;&#x5728;.s&#x6587;&#x4EF6;&#x4E2D;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x4E0B;&#x4E00;&#x9636;&#x6BB5;&#xFF08;Assembler&#x5C06;.s&#x8F6C;&#x6362;&#x4E3A;.bin&#x65F6;&#xFF09;&#x88AB;&#x66FF;&#x6362;&#x6210;&#x76F8;&#x5E94;&#x7684;&#x504F;&#x79FB;&#x5730;&#x5740;&#x3002; 2.5 switch&#x6307;&#x4EE4;1) switch&#x8DF3;&#x8F6C;&#x8868;switch&#x9700;&#x8981;&#x8FD0;&#x884C;&#x65F6;&#x51B3;&#x5B9A;&#x8DF3;&#x5230;&#x54EA;&#x4E2A;case label&#x5BF9;&#x5E94;&#x7684;&#x5730;&#x5740;&#xFF0C;&#x53EA;&#x7528;jmp_if&#x9700;&#x8981;&#x5728;case&#x5217;&#x8868;&#x4EE3;&#x7801;&#x5C3E;&#x90E8;&#x63D2;&#x5165;&#x591A;&#x6761;&#x6BD4;&#x8F83;&#x8BED;&#x53E5;&#xFF0C;&#x800C;&#x6808;&#x673A;&#x53C8;&#x9700;&#x8981;&#x6BCF;&#x6B21;&#x6BD4;&#x8F83;&#x524D;&#x90FD;push&#x76F8;&#x5E94;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x5B9E;&#x73B0;&#x6BD4;&#x8F83;&#x7E41;&#x7410;&#x800C;&#x4E14;&#x6027;&#x80FD;&#x8F83;&#x5DEE;&#xFF0C;&#x56E0;&#x6B64;OCPack&#x5728;&#x6307;&#x4EE4;&#x96C6;&#x4E2D;&#x589E;&#x52A0;&#x4E86;cmp_n&#x3001;resolve_label&#x548C;jmp_tos&#x6307;&#x4EE4;&#x3002; &#x9996;&#x5148;&#xFF0C;OCPack&#x7F16;&#x8BD1;&#x5668;&#x5728;&#x751F;&#x6210;&#x6307;&#x4EE4;&#x65F6;&#x4F1A;&#x5148;&#x5C06;switch&#x8981;&#x6BD4;&#x8F83;&#x7684;&#x76EE;&#x6807;push&#x8FDB;&#x64CD;&#x4F5C;&#x6808;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x5C06;&#x5404;&#x4E2A;case&#x7684;&#x503C;push&#x8FDB;&#x6808;&#xFF0C;&#x7136;&#x540E;&#x6DFB;&#x52A0;cmp_n n&#x6307;&#x4EE4;&#x3002;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#xFF0C;cmp_n n&#x6307;&#x4EE4;&#x4F1A;&#x4ECE;&#x6808;&#x4E0A;pop&#x51FA;n&#x4E2A;&#x6570;&#x636E;&#xFF0C;&#x4E0E;&#x6808;&#x9876;&#x7684;&#x6570;&#x636E;&#xFF08;&#x5373;switch&#x7684;&#x76EE;&#x6807;&#xFF09;&#x8FDB;&#x884C;&#x6BD4;&#x8F83;&#xFF0C;&#x5982;&#x679C;&#x4E0E;&#x7B2C;i&#x4E2A;&#x76F8;&#x7B49;&#xFF0C;&#x5219;&#x5C06;ipush&#x5230;&#x6808;&#x9876;&#x3002; &#x540E;&#x9762;&#x518D;&#x6DFB;&#x52A0;&#x6307;&#x4EE4;resolve_label label_prefix&#x3002;&#x6B64;&#x6307;&#x4EE4;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x4F1A;&#x5C06;label_prefix&#x4E0E;&#x6808;&#x9876;&#x7684;i&#x8FDB;&#x884C;&#x5B57;&#x7B26;&#x4E32;&#x62FC;&#x63A5;&#xFF0C;&#x751F;&#x6210;&#x76EE;&#x6807;label&#x540D;&#xFF0C;&#x5E76;&#x5728;machine&#x4E2D;&#x8FDB;&#x884C;&#x67E5;&#x627E;&#xFF0C;&#x627E;&#x5230;&#x5BF9;&#x5E94;&#x7684;label&#x5730;&#x5740;&#xFF0C;push&#x5230;&#x6808;&#x9876;&#x3002;&#x5176;&#x4E2D;label_prefix&#x662F;&#x6BCF;&#x4E2A;switch&#x8BED;&#x53E5;&#x552F;&#x4E00;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x652F;&#x6301;switch&#x5D4C;&#x5957;&#x3002; &#x7136;&#x540E;&#x518D;&#x6DFB;&#x52A0;&#x6307;&#x4EE4;jmp_tos&#x3002;&#x6B64;&#x6307;&#x4EE4;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x4F1A;&#x8DF3;&#x8F6C;&#x5230;&#x6808;&#x9876;&#x7684;&#x5730;&#x5740;&#xFF0C;&#x4ECE;&#x800C;&#x5B9E;&#x73B0;switch&#x7684;&#x529F;&#x80FD;&#x3002; 2) continue&#x548C;break&#x7684;&#x652F;&#x6301;&#xFF1A;&#x5206;&#x522B;&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;break&#x548C;continue&#x7684;label&#x6808;&#xFF0C;&#x6808;&#x9876;&#x5143;&#x7D20;&#x4E3A;&#x5F53;&#x524D;break&#x6216;continue&#x8C03;&#x7528;&#x65F6;&#x5E94;&#x8BE5;jmp&#x5230;&#x7684;&#x76EE;&#x6807;label&#xFF0C;&#x5728;&#x76EE;&#x6807;&#x8868;&#x8FBE;&#x5F0F;&#x5F00;&#x59CB;&#x548C;&#x7ED3;&#x675F;&#x65F6;&#x8FDB;&#x884C;&#x5165;&#x6808;&#x548C;&#x51FA;&#x6808;&#x64CD;&#x4F5C;&#x3002;&#x5728;&#x9047;&#x5230;&#x8BED;&#x6CD5;&#x6811;&#x4E0A;&#x7ED3;&#x70B9;&#x4E3A;break&#x6216;continue&#x65F6;&#xFF0C;&#x53D6;&#x51FA;&#x5F53;&#x524D;&#x6808;&#x9876;&#x7684;&#x76EE;&#x6807;label&#xFF0C;&#x751F;&#x6210;jmp &#x76EE;&#x6807;label&#x6307;&#x4EE4;&#x3002; 2.6 call&#x6307;&#x4EE4; &#x4F7F;&#x7528;libffi&#x5B9E;&#x73B0;&#x52A8;&#x6001;c&#x65B9;&#x6CD5;&#x8C03;&#x7528;&#x3002;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x88AB;&#x8C03;&#x7528;&#x7684;c&#x65B9;&#x6CD5;&#xFF0C;&#x5728;.s&#x4F1A;&#x6709;&#x4E00;&#x9879;DECL_C_FUNC&#x7684;&#x58F0;&#x660E;&#xFF0C;&#x58F0;&#x660E;&#x5305;&#x542B;&#x6B64;&#x65B9;&#x6CD5;&#x7684;&#x540D;&#x79F0;&#x3001;&#x7B7E;&#x540D;&#xFF08;&#x5305;&#x62EC;&#x53C2;&#x6570;&#x4E2A;&#x6570;&#x548C;&#x7C7B;&#x578B;&#xFF09;&#x7B49;&#x4FE1;&#x606F;&#x3002; .s&#x4E2D;&#x7684;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#x662F;OCPack&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x4E00;&#x4E00;&#x5BF9;&#x5E94;&#x5230;libffi&#x7684;&#x7C7B;&#x578B;&#x3002;&#x5BF9;&#x4E8E;struct&#x6765;&#x8BF4;&#xFF0C;&#x751F;&#x6210;&#x6307;&#x4EE4;&#x65F6;&#x9700;&#x8981;&#x9012;&#x5F52;&#x627E;&#x5230;struct&#x6240;&#x6709;&#x6210;&#x5458;&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x62FC;&#x6210;&#x76F8;&#x5E94;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x8FD0;&#x884C;&#x671F;&#x53CD;&#x89E3;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x6784;&#x9020;&#x51FA;libffi&#x6240;&#x9700;&#x7684;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x3002; &#x5BF9;&#x4E8E;&#x53D8;&#x53C2;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x65B9;&#x6CD5;&#x540D;&#x76F8;&#x540C;&#x800C;&#x53C2;&#x6570;&#x4E2A;&#x6570;&#x6216;&#x7C7B;&#x578B;&#x4E0D;&#x540C;&#x7684;&#xFF0C;&#x5728;DECL_C_FUNC&#x65F6;&#x4F1A;&#x5BF9;&#x5E94;&#x4E0D;&#x540C;&#x7684;&#x6761;&#x76EE;&#xFF0C;&#x865A;&#x62DF;&#x673A;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x4F1A;&#x6839;&#x636E;&#x5BF9;&#x5E94;&#x7684;&#x6761;&#x76EE;&#x53BB;&#x6784;&#x9020;&#x76F8;&#x5E94;&#x7684;libffi&#x53C2;&#x6570;&#x6570;&#x636E;&#x3002; 2.7 &#x57FA;&#x672C;&#x4E00;&#x5143;&#x3001;&#x4E8C;&#x5143;&#x8FD0;&#x7B97;&#x7B26;&#x6307;&#x4EE4; &#x6307;&#x4EE4;&#x96C6;&#x4E2D;&#x5BF9;&#x7B97;&#x672F;&#x3001;&#x903B;&#x8F91;&#x3001;&#x79FB;&#x4F4D;&#x7B49;&#x7B49;&#x57FA;&#x672C;&#x8FD0;&#x7B97;&#x7B26;&#x90FD;&#x6709;&#x5BF9;&#x5E94;&#x7684;&#x6307;&#x4EE4;&#xFF0C;&#x6307;&#x4EE4;&#x53C2;&#x6570;&#x5305;&#x62EC;&#x8FD4;&#x56DE;&#x503C;&#x7C7B;&#x578B;&#x3001;&#x64CD;&#x4F5C;&#x6570;&#x7C7B;&#x578B;&#x7B49;&#x3002; &#x5728;&#x865A;&#x62DF;&#x673A;&#x7684;&#x5B9E;&#x73B0;&#x4EE3;&#x7801;&#x4E2D;&#x5C06;&#x5404;&#x79CD;&#x8FD0;&#x7B97;&#x3001;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x7684;&#x7EC4;&#x5408;&#x5206;&#x914D;&#x5230;&#x76F8;&#x5E94;&#x7684;c&#x8BED;&#x8A00;&#x5B9E;&#x73B0;&#xFF0C;&#x8FD0;&#x884C;&#x65F6;&#x5C31;&#x6839;&#x636E;&#x4F20;&#x5165;&#x7684;&#x6307;&#x4EE4;&#x548C;&#x53C2;&#x6570;&#x8C03;&#x7528;&#x5176;&#x76F8;&#x5E94;&#x5B9E;&#x73B0;&#x3002; &#x6CE8;&#xFF1A; &#x6B64;&#x6307;&#x4EE4;&#x53EA;&#x652F;&#x6301;&#x6574;&#x578B;&#x3001;&#x6D6E;&#x70B9;&#x578B;&#x7B49;&#x57FA;&#x672C;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x7684;&#x8FD0;&#x7B97;&#xFF0C;&#x4E0D;&#x652F;&#x6301;&#x81EA;&#x5B9A;&#x4E49;&#x7C7B;&#x578B;&#x91CD;&#x8F7D;&#x7684;&#x8FD0;&#x7B97;&#x7B26; 2.8 &#x5DE6;&#x53F3;&#x503C;&#x8F6C;&#x6362; &#x6307;&#x4EE4;&#x96C6;&#x6709;&#x5DE6;&#x503C;&#x8F6C;&#x53F3;&#x503C;&#x7684;&#x6307;&#x4EE4;&#xFF0C;&#x5176;&#x53C2;&#x6570;&#x4E3A;&#x53F3;&#x503C;&#x7684;size&#x3002;&#x6B64;&#x6307;&#x4EE4;&#x7684;&#x4F5C;&#x7528;&#x4E3A;&#xFF1A;&#x5148;pop&#x64CD;&#x4F5C;&#x6808;&#x9876;&#x5B58;&#x50A8;&#x7684;&#x5730;&#x5740;(addr)&#xFF0C;&#x7136;&#x540E;&#x53D6;&#x5730;&#x5740;&#x4E3A;addr&#x7684;&#x5927;&#x5C0F;&#x4E3A;size&#x7684;&#x5185;&#x5B58;&#x6570;&#x636E;&#xFF0C;push&#x5230;&#x64CD;&#x4F5C;&#x6808;&#x9876;&#x3002; &#x5728;clang&#x751F;&#x6210;&#x7684;AST&#x4E2D;&#xFF0C;&#x6240;&#x6709;VarDeclRef&#x5176;&#x5B9E;&#x5BF9;&#x5E94;&#x7684;&#x662F;&#x53D8;&#x91CF;&#x7684;&#x5730;&#x5740;&#xFF0C;&#x5BF9;&#x4E8E;&#x8BBF;&#x95EE;&#x53D8;&#x91CF;&#x5185;&#x5BB9;&#xFF08;&#x53D8;&#x91CF;&#x53F3;&#x503C;&#xFF09;&#x7684;&#x4EE3;&#x7801;&#xFF0C;AST&#x4E2D;VarDeclRef&#x7684;&#x7236;&#x8282;&#x70B9;&#x90FD;&#x662F;&#x5DE6;&#x53F3;&#x503C;&#x8F6C;&#x6362;&#x8282;&#x70B9;&#x3002;&#x56E0;&#x6B64;OCPack&#x4E2D;push&#x6307;&#x4EE4;&#xFF0C;&#x7C7B;&#x4F3C;push seg index&#x90FD;&#x662F;&#x5C06;seg&#x6BB5;index&#x5904;&#x7684;&#x5730;&#x5740;push&#x8FDB;&#x64CD;&#x4F5C;&#x6808;&#xFF0C;&#x800C;&#x53D6;&#x5BF9;&#x5E94;&#x5730;&#x5740;&#x5904;&#x7684;&#x5177;&#x4F53;&#x5185;&#x5BB9;&#x7531;&#x5DE6;&#x53F3;&#x503C;&#x8F6C;&#x6362;&#x6307;&#x4EE4;&#x6765;&#x5B8C;&#x6210;&#x3002; &#x6CE8;&#xFF1A; &#x5728;&#x5B9E;&#x73B0;&#x521D;&#x671F;&#xFF0C;OCPack&#x7684;push&#x6307;&#x4EE4;&#x662F;&#x76F4;&#x63A5;&#x5C06;seg&#x6BB5;index&#x5904;&#x53D8;&#x91CF;&#x7684;&#x53F3;&#x503C;push&#x8FDB;&#x64CD;&#x4F5C;&#x6808;&#xFF08;&#x5373;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#x5FFD;&#x7565;&#x5DE6;&#x53F3;&#x503C;&#x8F6C;&#x6362;&#x7684;&#x7ED3;&#x70B9;&#xFF09;&#xFF0C;&#x4F46;&#x540E;&#x6765;&#x53D1;&#x73B0;&#x5728;&#x7C7B;&#x4F3C;&#x8D4B;&#x503C;&#x64CD;&#x4F5C;&#x4E2D;&#x7684;&#x5DE6;&#x503C;&#x53D8;&#x91CF;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;AST&#x4E2D;&#x6CA1;&#x6709;&#x5DE6;&#x53F3;&#x503C;&#x8F6C;&#x6362;&#x7ED3;&#x70B9;&#xFF0C;&#x5982;&#x679C;&#x5BF9;&#x8FD9;&#x4E9B;&#x60C5;&#x51B5;&#x7279;&#x6B8A;&#x5904;&#x7406;&#xFF0C;&#x903B;&#x8F91;&#x4F1A;&#x53D8;&#x5F97;&#x8F83;&#x4E3A;&#x590D;&#x6742;&#x4E14;&#x96BE;&#x4EE5;&#x4FDD;&#x8BC1;&#x8986;&#x76D6;&#x5B8C;&#x5168;&#xFF0C;&#x540E;&#x6765;&#x51B3;&#x5B9A;&#x5B8C;&#x5168;&#x4F9D;&#x7167;AST&#x4E2D;&#x7ED3;&#x70B9;&#x7684;&#x6392;&#x5E03;&#x903B;&#x8F91;&#xFF0C;&#x5C06;push&#x64CD;&#x4F5C;&#x7684;&#x5BF9;&#x8C61;&#x6539;&#x6210;&#x4E86;&#x5BF9;&#x5E94;&#x53D8;&#x91CF;&#x7684;&#x5DE6;&#x503C;&#xFF0C;&#x727A;&#x7272;&#x90E8;&#x5206;&#x6027;&#x80FD;&#x6362;&#x53D6;&#x7A0B;&#x5E8F;&#x7684;&#x53EF;&#x9760;&#x6027;&#x3002; 2.9 OC&#x65B9;&#x6CD5;&#x8C03;&#x7528;&#x6307;&#x4EE4; &#x6307;&#x4EE4;&#x96C6;&#x4E2D;&#x6709;&#x4E13;&#x7528;&#x4E8E;&#x8C03;&#x7528;OC&#x65B9;&#x6CD5;&#x7684;&#x6307;&#x4EE4;OBJC_MSG_CLASS/OBJC_MSG_INST&#x3002; &#x865A;&#x62DF;&#x673A;&#x5728;&#x89E3;&#x91CA;&#x6267;&#x884C;&#x6B64;&#x6307;&#x4EE4;&#x65F6;&#xFF0C;&#x5148;&#x53D6;&#x5F97;&#x5B58;&#x50A8;&#x5728;&#x6808;&#x4E0A;&#x7684;&#x6240;&#x6709;&#x53C2;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x6784;&#x9020;&#x76F8;&#x5E94;&#x7684;NSInvocation&#xFF0C;&#x901A;&#x8FC7;invoke&#x6765;&#x5B9E;&#x73B0;&#x5BF9;Objective-C runtime&#x7684;&#x8C03;&#x7528;&#x3002; &#x6307;&#x4EE4;&#x5B9E;&#x73B0;&#x4E2D;&#xFF0C;&#x5BF9;&#x4E8E;target&#x548C;&#x53C2;&#x6570;&#x90FD;&#x91C7;&#x7528;__unsafe_unretained&#x65B9;&#x5F0F;&#x8FDB;&#x884C;&#x5F15;&#x7528;&#xFF0C;&#x5373;&#x4E0D;&#x6539;&#x53D8;&#x5176;&#x751F;&#x547D;&#x5468;&#x671F;&#x3002;&#x8FD4;&#x56DE;&#x503C;&#x5219;&#x4E00;&#x5F8B;&#x4F7F;&#x7528;autorelease&#x65B9;&#x5F0F;&#xFF0C;&#x786E;&#x4FDD;&#x8FD4;&#x56DE;&#x503C;&#x5728;&#x8FD4;&#x56DE;&#x7ED9;&#x76F4;&#x63A5;&#x8C03;&#x7528;&#x8005;&#x65F6;&#x662F;&#x6709;&#x6548;&#x7684;&#x3002; &#x6CE8;&#xFF1A; &#x5B9E;&#x73B0;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;OC&#x8C03;&#x7528;&#x6307;&#x4EE4;&#x6240;&#x9700;&#x7684;&#x8F93;&#x5165;&#x6570;&#x636E;&#x7684;&#x5185;&#x5B58;&#x6392;&#x5E03;&#x987A;&#x5E8F;&#x4E5F;&#x7ECF;&#x5386;&#x4E86;&#x4E00;&#x756A;&#x4FEE;&#x6539;&#x3002;&#x56E0;&#x4E3A;&#x5BF9;&#x4E8E;Objective-C&#x65B9;&#x6CD5;&#x6765;&#x8BF4;&#xFF0C;&#x53EA;&#x6709;&#x62FF;&#x5230;selector&#x624D;&#x80FD;&#x77E5;&#x9053;&#x5177;&#x4F53;&#x6709;&#x591A;&#x5C11;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x6240;&#x4EE5;&#x4E4B;&#x524D;&#x8BBE;&#x8BA1;&#x662F;&#x53C2;&#x6570;&#x8868;&#x5012;&#x7740;&#x653E;&#xFF0C;&#x5373;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x653E;&#x6808;&#x9876;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x53C2;&#x6570;&#x4F9D;&#x6B21;&#x5F80;&#x4E0B;&#x6392;&#x3002;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x7A33;&#x5B9A;&#x5730;pop&#x4E24;&#x6B21;&#x5C31;&#x5F97;&#x5230;selector&#x7684;&#x58F0;&#x660E;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x6839;&#x636E;selector&#x4E2D;&#x6307;&#x660E;&#x7684;&#x53C2;&#x6570;&#x4E2A;&#x6570;&#x53CA;&#x5927;&#x5C0F;pop&#x6240;&#x6709;&#x7684;&#x53C2;&#x6570;&#x3002;&#x4F46;&#x8FD9;&#x79CD;&#x65B9;&#x6CD5;&#x5728;&#x53C2;&#x6570;&#x5927;&#x5C0F;&#x5927;&#x4E8E;64bit&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF08;&#x5982;struct&#xFF09;&#x5C31;&#x6BD4;&#x8F83;&#x96BE;&#x5904;&#x7406;&#x4E86;&#xFF0C;&#x56E0;&#x4E3A;&#x8981;&#x5F97;&#x5230;&#x6B63;&#x786E;&#x7684;struct&#x6570;&#x636E;&#xFF0C;&#x7A0B;&#x5E8F;&#x9700;&#x8981;pop&#x5BF9;&#x5E94;&#x4E2A;&#x6570;&#x7684;64bit&#xFF0C;&#x7136;&#x540E;&#x505A;&#x62FC;&#x63A5;&#xFF0C;&#x70E6;&#x7410;&#x800C;&#x4E14;&#x5BB9;&#x6613;&#x51FA;&#x9519;&#x3002;&#x7ECF;&#x6743;&#x8861;&#xFF0C;&#x8FD8;&#x662F;&#x5728;&#x6307;&#x4EE4;&#x53C2;&#x6570;&#x4E2D;&#x589E;&#x52A0;&#x4E86;&#x53C2;&#x6570;&#x8868;&#x957F;&#x5EA6;&#xFF08;&#x7F16;&#x8BD1;&#x671F;&#x5F97;&#x5230;&#xFF09;&#xFF0C;&#x5728;&#x8C03;&#x7528;OBJC_MSG_CLASS/OBJC_MSG_INST&#x6307;&#x4EE4;&#x524D;&#xFF0C;&#x53C2;&#x6570;&#x8FD8;&#x662F;&#x6309;&#x987A;&#x5E8F;push&#xFF08;&#x5373;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x5148;push&#xFF0C;&#x6808;&#x9876;&#x662F;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#xFF09;&#xFF0C;&#x5728;&#x6307;&#x4EE4;&#x7684;&#x5B9E;&#x73B0;&#x4E2D;&#xFF0C;&#x6839;&#x636E;&#x6307;&#x4EE4;&#x53C2;&#x6570;&#x4E2D;&#x63D0;&#x4F9B;&#x7684;&#x53C2;&#x6570;&#x8868;&#x957F;&#x5EA6;&#xFF0C;&#x76F4;&#x63A5;&#x4ECE;sp&#x7B97;&#x51FA;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x7684;&#x8D77;&#x59CB;&#x4F4D;&#x7F6E;&#xFF0C;&#x8FD9;&#x6837;&#x6240;&#x6709;&#x7684;&#x53C2;&#x6570;&#x90FD;&#x53EF;&#x4EE5;&#x7528;&#x6307;&#x9488;&#x8BBF;&#x95EE;&#xFF0C;&#x800C;&#x4E0D;&#x7528;&#x5173;&#x5FC3;&#x5176;&#x5927;&#x5C0F;&#x4E86;&#x3002;&#x539F;&#x5148;&#x9700;&#x8981;&#x7684;&#x591A;&#x6B21;pop&#x6307;&#x4EE4;&#xFF0C;&#x53D8;&#x6210;&#x53EA;&#x9700;&#x5728;&#x6307;&#x4EE4;&#x9000;&#x51FA;&#x524D;&#xFF0C;&#x5C06;sp&#x56DE;&#x9000;&#x53C2;&#x6570;&#x8868;&#x957F;&#x5EA6;&#x5373;&#x53EF;&#x3002; Assembler&#xFF1A;&#x6C47;&#x7F16;&#x7A0B;&#x5E8F;(.s) -&gt; &#x4E8C;&#x8FDB;&#x5236;&#x7A0B;&#x5E8F;(.bin)&#x89E3;&#x6790;&#x6574;&#x4E2A;.s&#x6587;&#x672C;&#xFF0C;&#x5C06;&#x6587;&#x672C;token&#x8F6C;&#x6362;&#x4E3A;&#x5BF9;&#x5E94;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x6570;&#x636E;&#xFF0C;&#x4E3B;&#x8981;&#x5305;&#x62EC;&#xFF1A; &#x7ACB;&#x5373;&#x6570;&#x4ECE;&#x6587;&#x672C;&#x5230;&#x4E8C;&#x8FDB;&#x5236;&#x6570;&#x636E;&#x7684;&#x8F6C;&#x6362; &#x8DF3;&#x8F6C;label&#x5230;&#x5730;&#x5740;&#x7684;&#x8F6C;&#x6362; &#x5E38;&#x91CF;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x8F6C;&#x6362;&#xFF0C;&#x6B64;&#x5904;&#x4E00;&#x5F00;&#x59CB;&#x76F4;&#x63A5;&#x5728;.s&#x4E2D;&#x5B58;&#x50A8;&#x4E86;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x540E;&#x6765;&#x9047;&#x5230;&#x2019;\n\t&#x2019;&#x7B49;&#x60C5;&#x51B5;&#x4E0D;&#x80FD;&#x5F88;&#x597D;&#x5730;&#x652F;&#x6301;&#xFF0C;&#x5C31;&#x6539;&#x6210;&#x4E86;&#x76F4;&#x63A5;&#x5B58;&#x50A8;&#x5B57;&#x8282;&#x7801; &#x751F;&#x6210;&#x5BFC;&#x51FA;&#x51FD;&#x6570;&#x8868;&#xFF0C;&#x8868;&#x4E2D;&#x8BB0;&#x5F55;&#x4E86;&#x865A;&#x62DF;&#x673A;&#x4E2D;&#x5B9A;&#x4E49;&#x7684;&#x65B9;&#x6CD5;&#x540D;&#x548C;&#x5730;&#x5740;&#x7684;&#x5BF9;&#x5E94;&#x5173;&#x7CFB; &#x751F;&#x6210;&#x5BFC;&#x5165;&#x51FD;&#x6570;&#x8868;&#xFF0C;&#x5305;&#x542B;&#x4E86;&#x6240;&#x6709;&#x8C03;&#x7528;&#x5230;&#x7684;c&#x65B9;&#x6CD5;&#x58F0;&#x660E;&#x53CA;&#x5176;index&#xFF0C;&#x4EE3;&#x7801;&#x6BB5;&#x4E2D;&#x8C03;&#x7528;c&#x65B9;&#x6CD5;&#x65F6;&#x76F4;&#x63A5;&#x8C03;&#x7528;&#x6B64;&#x5904;&#x7684;index static&#x6570;&#x636E;&#x6BB5;&#x5927;&#x5C0F;&#x548C;&#x5168;&#x5C40;&#x533A;&#x7684;&#x603B;&#x5927;&#x5C0F;&#xFF0C;&#x56E0;&#x4E3A;&#x865A;&#x62DF;&#x673A;&#x521D;&#x59CB;&#x5316;&#x65F6;&#x9700;&#x8981;&#x5C06;&#x5168;&#x5C40;&#x533A;&#x653E;&#x5230;&#x4E00;&#x6BB5;shared &amp; anonymous mmap&#x5185;&#x5B58;&#x4E0A;&#xFF0C;&#x6545;&#x9700;&#x8981;&#x6B64;size &#x5B58;&#x50A8;GUID&#x503C; &#x5B58;&#x50A8;Target arch&#xFF0C;&#x6B64;&#x503C;&#x7528;&#x4E8E;&#x9A8C;&#x8BC1;32bit&#x548C;64bit&#xFF0C;&#x786E;&#x4FDD;&#x5E73;&#x53F0;&#x548C;.bin&#x6587;&#x4EF6;&#x7684;&#x5339;&#x914D; &#x6587;&#x672C;&#x6307;&#x4EE4;&#x8F6C;&#x5316;&#x4E3A;&#x4E8C;&#x8FDB;&#x5236;&#x6307;&#x4EE4; &#x8F6C;&#x6362;&#x5B8C;&#x6210;&#x540E;&#x5C06;&#x5404;&#x6570;&#x636E;&#x5B58;&#x5165;&#x5185;&#x5B58;&#x4E2D;&#x76F8;&#x5E94;&#x7684;&#x6570;&#x636E;&#x6BB5;&#xFF0C;&#x518D;&#x5C06;&#x6574;&#x4E2A;&#x5185;&#x5B58;dump&#x6210;&#x4E00;&#x4E2A;&#x4E8C;&#x8FDB;&#x5236;&#x6587;&#x4EF6;&#x3002; &#x6CE8;&#xFF1A; &#x4E8C;&#x8FDB;&#x7A0B;&#x6587;&#x4EF6;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x6240;&#x9700;&#x7684;&#x5927;&#x90E8;&#x5206;&#x6570;&#x636E;&#x5176;&#x6392;&#x5E03;&#x90FD;&#x4E0E;.bin&#x6587;&#x4EF6;&#x91CC;&#x7684;&#x6392;&#x5E03;&#x5B8C;&#x5168;&#x76F8;&#x540C;&#xFF0C;&#x8FD9;&#x6837;&#x80FD;&#x65B9;&#x4FBF;&#x5730;&#x4F7F;&#x7528;&#x5185;&#x5B58;&#x6620;&#x5C04;&#x6765;&#x5B9E;&#x73B0;.bin&#x6587;&#x4EF6;&#x7684;&#x52A0;&#x8F7D;&#xFF0C;&#x4ECE;&#x800C;&#x53EF;&#x4EE5;&#x51CF;&#x5C11;&#x79C1;&#x6709;&#x5185;&#x5B58;&#x7684;&#x5360;&#x7528;&#x91CF;&#x3002; Loader&#xFF1A;&#x4E8C;&#x8FDB;&#x5236;&#x7A0B;&#x5E8F;(.bin)&#x52A0;&#x8F7D;&#x5728;&#x8C03;&#x7528;load_image&#x65F6;&#xFF0C;machine&#x4F1A;&#x5148;&#x5C06;.bin&#x6587;&#x4EF6;mmap&#x5230;&#x4E00;&#x6BB5;&#x5185;&#x5B58;&#x4E2D;&#xFF0C;&#x68C0;&#x6D4B;magic number, bin version&#x53CA;arch&#x662F;&#x5426;&#x5339;&#x914D;&#x3002;&#x6309;&#x5168;&#x5C40;&#x533A;&#x7684;&#x5927;&#x5C0F;&#x7533;&#x8BF7;&#x4E00;&#x6BB5;shared anonymous mmap&#x5185;&#x5B58;&#x5206;&#x522B;&#x52A0;&#x8F7D;&#x5404;&#x4E2A;&#x6570;&#x636E;&#x6BB5;&#xFF0C;&#x5EFA;&#x7ACB;&#x5FC5;&#x8981;&#x7684;&#x8FD0;&#x884C;&#x65F6;&#x5185;&#x5B58;&#x6570;&#x636E;&#xFF0C;&#x4E3B;&#x8981;&#x7684;&#x6570;&#x636E;&#x6BB5;&#x5305;&#x62EC;&#xFF1A; &#x5E38;&#x91CF;&#x5B57;&#x7B26;&#x4E32;&#x6BB5;&#xFF0C;&#x5C06;&#x5168;&#x5C40;&#x533A;&#x5BF9;&#x5E94;&#x5927;&#x5C0F;&#x7684;&#x5185;&#x5B58;&#x5206;&#x914D;&#x7ED9;&#x5E38;&#x91CF;&#x6BB5;&#xFF0C;&#x5E76;&#x5C06;&#x5BF9;&#x5E94;&#x7684;index&#x6307;&#x5411;&#x5BF9;&#x5E94;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x8D77;&#x59CB;&#x5730;&#x5740; &#x9759;&#x6001;&#x6570;&#x636E;&#x6BB5;&#xFF0C;&#x5C06;&#x5168;&#x5C40;&#x533A;&#x5BF9;&#x5E94;&#x5927;&#x5C0F;&#x7684;&#x5185;&#x5B58;&#x5206;&#x914D;&#x7ED9;&#x9759;&#x6001;&#x6BB5; &#x5BFC;&#x51FA;&#x7B26;&#x53F7;&#x8868; &#x5BFC;&#x5165;&#x7B26;&#x53F7;&#x8868; &#x4EE3;&#x7801;&#x6BB5; GUID&#x6570;&#x636E; Executor&#xFF1A;&#x4E8C;&#x8FDB;&#x5236;&#x7A0B;&#x5E8F;(.bin)&#x6267;&#x884C;1) &#x865A;&#x62DF;&#x673A;&#x57FA;&#x672C;&#x4FE1;&#x606F; &#x6808;&#x548C;&#x5404;&#x4E2A;&#x6BB5;&#x90FD;&#x4EE5;64bit&#x4E3A;&#x5355;&#x4F4D; &#x8C03;&#x7528;&#x65B9;&#x6CD5;&#x524D;&#xFF0C;&#x9700;&#x8981;&#x5C06;&#x5BF9;&#x5E94;&#x7684;&#x53C2;&#x6570;push&#x5230;&#x64CD;&#x4F5C;&#x6808;&#x4E0A; &#x8C03;&#x7528;&#x5B8C;&#x6210;&#x540E;&#xFF0C;&#x6808;&#x9876;&#x653E;&#x7684;&#x5C31;&#x662F;&#x8FD4;&#x56DE;&#x503C; &#x8FD0;&#x884C;&#x65F6;&#x4E0A;&#x4E0B;&#x6587;(thread_context)&#x548C;&#x6808;&#x5E27; thread_context&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;&#x6808;&#x5E27;&#x7684;&#x94FE;&#x8868;&#xFF0C;&#x7528;&#x4EE5;&#x5B58;&#x653E;&#x8C03;&#x7528;&#x5173;&#x7CFB; &#x6808;&#x5E27;&#x7528;&#x4E8E;&#x5B58;&#x653E;&#x5F53;&#x524D;&#x65B9;&#x6CD5;&#x7684;&#x8FD0;&#x884C;&#x65F6;&#x4FE1;&#x606F;&#xFF0C;&#x4E3B;&#x8981;&#x5305;&#x62EC;&#xFF1A; &#x6808;&#x5E27;&#x57FA;&#x5730;&#x5740; &#x8FD4;&#x56DE;&#x5730;&#x5740; &#x6307;&#x5411;&#x8C03;&#x7528;&#x65B9;&#x6808;&#x5E27;&#x57FA;&#x5730;&#x5740;&#x7684;&#x6307;&#x9488; &#x6BB5;&#x8868;&#x57FA;&#x5730;&#x5740; &#x64CD;&#x4F5C;&#x6808;&#x57FA;&#x5740; &#x64CD;&#x4F5C;&#x6808;&#x6307;&#x9488;sp &#x7A0B;&#x5E8F;&#x8BA1;&#x6570;&#x5668;ip 2) OC&#x8C03;&#x7528;&#x865A;&#x62DF;&#x673A;&#x65B9;&#x6CD5; Objective-C&#x4EE3;&#x7801;&#x901A;&#x8FC7;&#x5411;machine&#x7684;callVMFunctionWithArgs&#x65B9;&#x6CD5;&#x4F20;&#x5165;&#x8981;&#x8C03;&#x7528;&#x51FD;&#x6570;&#x540D;&#x53CA;&#x5176;&#x53C2;&#x6570;&#xFF08;&#x6B64;&#x5904;&#x7684;&#x53C2;&#x6570;&#x4E3A;&#x771F;&#x6B63;&#x53C2;&#x6570;&#x7684;&#x5730;&#x5740;&#xFF09;&#x5E76;&#x5F97;&#x5230;&#x8FD4;&#x56DE;&#x503C;&#x6765;&#x4E0E;&#x865A;&#x62DF;&#x673A;&#x8FDB;&#x884C;&#x4EA4;&#x4E92;&#x3002; callVMFunctionWithArgs&#x65B9;&#x6CD5;&#x5185;&#x90E8;&#x4F1A;&#x901A;&#x8FC7;&#x51FD;&#x6570;&#x540D;&#x67E5;&#x627E;&#x5BFC;&#x51FA;&#x8868;&#xFF0C;&#x627E;&#x5230;&#x5176;&#x65B9;&#x6CD5;&#x7B7E;&#x540D;&#x548C;&#x5730;&#x5740;&#x3002;&#x7136;&#x540E;&#x6839;&#x636E;&#x65B9;&#x6CD5;&#x7B7E;&#x540D;&#x4E2D;&#x6307;&#x5B9A;&#x7684;&#x53C2;&#x6570;&#x5927;&#x5C0F;&#xFF0C;&#x5C06;&#x4F20;&#x5165;&#x7684;&#x53C2;&#x6570;&#x5730;&#x5740;&#x5904;&#x5BF9;&#x5E94;&#x5927;&#x5C0F;&#x7684;&#x6570;&#x636E;push&#x5230;&#x64CD;&#x4F5C;&#x6808;&#x4E0A;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x8DF3;&#x8F6C;&#x5230;&#x88AB;&#x8C03;&#x65B9;&#x6CD5;&#x7684;&#x5F00;&#x59CB;&#x5730;&#x5740;&#x5904;&#xFF0C;&#x5F00;&#x59CB;&#x6267;&#x884C;&#x6C47;&#x7F16;&#x6307;&#x4EE4;&#x3002; &#x865A;&#x62DF;&#x673A;&#x6267;&#x884C;&#x5B8C;&#x6240;&#x6709;&#x6C47;&#x7F16;&#x6307;&#x4EE4;&#x540E;&#x8FD4;&#x56DE;&#x5230;callVMFunctionWithArgs&#x4E2D;&#xFF0C;&#x8BE5;&#x65B9;&#x6CD5;&#x518D;&#x8D1F;&#x8D23;&#x628A;&#x6808;&#x9876;&#x7684;&#x8FD4;&#x56DE;&#x503C;&#x6570;&#x636E;&#x62F7;&#x8D1D;&#x5230;&#x8C03;&#x7528;&#x65B9;&#x4F20;&#x5165;&#x7684;&#x8FD4;&#x56DE;&#x503C;&#x5730;&#x5740;&#x5904;&#x3002; &#x8C03;&#x7528;&#x5B8C;&#x6210;&#x540E;&#xFF0C;&#x865A;&#x62DF;&#x673A;&#x7684;&#x6808;&#x9876;&#x5730;&#x5740;&#x5E94;&#x8BE5;&#x4FDD;&#x6301;&#x4E0E;&#x8C03;&#x7528;&#x524D;&#x5B8C;&#x5168;&#x4E00;&#x81F4;&#x3002; &#x5982;&#x679C;&#x865A;&#x62DF;&#x673A;&#x65B9;&#x6CD5;&#x7684;&#x8FD4;&#x56DE;&#x503C;&#x662F;NSObject*&#x7C7B;&#x578B;&#xFF0C;OCPack&#x4F1A;&#x6839;&#x636E;&#x5B58;&#x50A8;&#x8FD4;&#x56DE;&#x503C;&#x7684;&#x53D8;&#x91CF;&#x662F;&#x5426;&#x662F;&#x5F3A;&#x5F15;&#x7528;&#x800C;&#x51B3;&#x5B9A;&#x662F;&#x5426;&#x9700;&#x8981;&#x5BF9;&#x8FD4;&#x56DE;&#x7684;&#x5BF9;&#x8C61;&#x505A;__brige_retained&#x64CD;&#x4F5C;&#xFF0C;&#x7528;&#x4EE5;&#x4E2D;&#x548C;&#x8C03;&#x7528;&#x65B9;&#x5BF9;strong&#x7C7B;&#x578B;&#x53D8;&#x91CF;&#x7684;release&#x64CD;&#x4F5C;&#x3002;&#x5176;&#x4ED6;&#x60C5;&#x51B5;&#x4E0B;&#x56E0;&#x4E3A;&#x8FD4;&#x56DE;&#x7684;&#x90FD;&#x662F;autorelease&#x7684;&#x5BF9;&#x8C61;&#xFF0C;&#x8FD4;&#x56DE;&#x65F6;&#x4E0D;&#x505A;&#x7279;&#x6B8A;&#x5904;&#x7406;&#xFF08;&#x8BE6;&#x89C1;Compiler&#x8282;&#x4E2D;2.9&#x6BB5;OC&#x65B9;&#x6CD5;&#x8C03;&#x7528;&#x6307;&#x4EE4;&#xFF09;&#x3002; 3) &#x865A;&#x62DF;&#x673A;&#x8C03;&#x7528;OC&#x65B9;&#x6CD5;(f1)&#xFF0C;f1&#x53C8;&#x8C03;&#x7528;&#x5230;&#x4E86;&#x865A;&#x62DF;&#x673A;&#x7684;&#x65B9;&#x6CD5;(f2)&#x8981;&#x652F;&#x6301;&#x6B64;&#x6D41;&#x7A0B;&#xFF0C;&#x9700;&#x4FDD;&#x8BC1;f2&#x8C03;&#x7528;&#x5B8C;&#x6210;&#x540E;&#x865A;&#x62DF;&#x673A;&#x5F53;&#x524D;&#x6808;&#x5E27;&#x7684;sp&#x4E0E;&#x8C03;&#x7528;&#x524D;&#x5B8C;&#x5168;&#x4E00;&#x81F4;&#xFF0C;&#x4EE5;&#x4FDD;&#x8BC1;f1&#x7684;&#x6267;&#x884C;&#x4E0D;&#x53D7;&#x5F71;&#x54CD;&#x3002; 4) &#x865A;&#x62DF;&#x673A;&#x65B9;&#x6CD5;&#x95F4;&#x4E92;&#x76F8;&#x8C03;&#x7528;&#x5728;&#x8C03;&#x7528;OC&#x65B9;&#x6CD5;&#x65F6;&#xFF0C;&#x4F1A;&#x5148;&#x68C0;&#x6D4B;&#x5BF9;&#x5E94;&#x7684;&#x65B9;&#x6CD5;&#x662F;&#x5426;&#x5728;&#x5BFC;&#x51FA;&#x51FD;&#x6570;&#x8868;&#x4E2D;&#xFF0C;&#x5982;&#x679C;&#x5728;&#xFF0C;&#x5219;&#x8D70;&#x6B64;&#x6D41;&#x7A0B;&#x3002;&#x8FD9;&#x4E5F;&#x8981;&#x6C42;&#x8C03;&#x7528;&#x865A;&#x62DF;&#x673A;&#x65B9;&#x6CD5;&#x65F6;&#x7684;&#x53C2;&#x6570;&#x8868;&#x5E94;&#x8BE5;&#x4E0E;&#x76F4;&#x63A5;&#x8C03;&#x7528;OC&#x65B9;&#x6CD5;&#x662F;&#x4E00;&#x81F4;&#x7684;&#xFF0C;&#x5426;&#x5219;&#x8FD8;&#x9700;&#x8981;&#x91CD;&#x65B0;&#x62F7;&#x8D1D;&#x53C2;&#x6570;&#x505A;&#x9002;&#x914D;&#xFF0C;&#x964D;&#x4F4E;&#x865A;&#x62DF;&#x673A;&#x6027;&#x80FD;&#x3002; 5) &#x591A;&#x7EBF;&#x7A0B;&#x652F;&#x6301; &#x8FD0;&#x884C;&#x65F6;&#x4E0A;&#x4E0B;&#x6587;(thread_context)&#x6307;&#x9488;&#x653E;&#x5728;&#x7EBF;&#x7A0B;&#x5C40;&#x90E8;&#x5B58;&#x50A8;&#x4E2D;&#xFF0C;&#x6BCF;&#x4E2A;&#x7EBF;&#x7A0B;&#x5728;&#x8BFB;&#x3001;&#x5199;&#x4E0A;&#x4E0B;&#x6587;&#x4E2D;&#x6570;&#x636E;&#x65F6;&#x90FD;&#x662F;&#x64CD;&#x4F5C;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x81EA;&#x5DF1;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x80FD;&#x4FDD;&#x8BC1;&#x5404;&#x4E2A;&#x7EBF;&#x7A0B;&#x4E4B;&#x95F4;&#x8FD0;&#x884C;&#x72B6;&#x6001;&#x76F8;&#x4E92;&#x9694;&#x79BB;&#xFF0C;&#x4ECE;&#x800C;&#x652F;&#x6301;&#x591A;&#x7EBF;&#x7A0B;&#x7684;&#x8C03;&#x7528;&#x573A;&#x666F;&#x3002; OCPack&#x6CE8;&#x518C;&#x4E86;&#x7EBF;&#x7A0B;&#x9000;&#x51FA;&#x7684;&#x56DE;&#x8C03;&#x51FD;&#x6570;&#xFF0C;&#x5F53;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x9000;&#x51FA;&#x65F6;OCPack&#x4F1A;&#x5220;&#x9664;&#x6240;&#x6709;machine&#x5728;&#x6B64;&#x7EBF;&#x7A0B;&#x4E2D;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x76F8;&#x5173;&#x6570;&#x636E;&#x3002; 6) &#x5185;&#x5B58;&#x5360;&#x7528; &#x4E8C;&#x8FDB;&#x5236;&#x6587;&#x4EF6;&#x52A0;&#x8F7D;&#x4F7F;&#x7528;mmap&#xFF0C;&#x5168;&#x5C40;&#x6570;&#x636E;&#x533A;&#x4F7F;&#x7528;shared &amp; anonymous mmap&#xFF0C;&#x5E38;&#x91CF;&#x5B57;&#x7B26;&#x4E32;&#x6570;&#x636E;&#x76F4;&#x63A5;&#x6307;&#x5411;.bin&#x4E2D;&#x7684;&#x5730;&#x5740;&#x3002; &#x8FD0;&#x884C;&#x65F6;&#x4E0A;&#x4E0B;&#x6587;(thread_context)&#x662F;&#x6BCF;&#x4E2A;&#x7EBF;&#x7A0B;&#x4E00;&#x4EFD;&#xFF0C;&#x90FD;&#x4F7F;&#x7528;shared &amp; anonymous mmap&#x3002; &#x8FD0;&#x884C;&#x65F6;&#x7684;machine&#x53EA;&#x7EF4;&#x62A4;&#x5BFC;&#x5165;&#x51FD;&#x6570;&#x548C;&#x5BFC;&#x51FA;&#x51FD;&#x6570;&#x6570;&#x636E;&#x4EE5;&#x53CA;&#x5C11;&#x91CF;&#x6307;&#x9488;&#x6570;&#x636E;&#x3002; 7) &#x5D29;&#x6E83;&#x65F6;&#x7684;&#x6808;&#x56DE;&#x6EAF; &#x8FD0;&#x884C;&#x65F6;&#x4E0A;&#x4E0B;&#x6587;(thread_context)&#x4E2D;&#x7EF4;&#x62A4;&#x6709;&#x4E00;&#x4E2A;&#x6808;&#x5E27;&#x7ED3;&#x6784;&#xFF08;thread_frame&#xFF09;&#x7684;&#x94FE;&#x8868;&#xFF0C;&#x5BF9;&#x5E94;&#x7684;&#x5C31;&#x662F;&#x865A;&#x62DF;&#x673A;&#x4E2D;&#x65B9;&#x6CD5;&#x7684;&#x8C03;&#x7528;&#x5173;&#x7CFB;&#x3002; &#x5D29;&#x6E83;&#x65F6;&#x904D;&#x5386;&#x6240;&#x6709;&#x7EBF;&#x7A0B;&#x4E2D;&#x6240;&#x6709;&#x865A;&#x62DF;&#x673A;&#x7684;thread_context&#xFF0C;&#x904D;&#x5386;&#x5176;&#x6808;&#x5E27;&#x7ED3;&#x6784;&#x94FE;&#x8868;&#xFF0C;&#x53D6;&#x51FA;&#x6BCF;&#x4E2A;&#x6808;&#x5E27;&#x4E2D;&#x5B58;&#x50A8;&#x7684;ip&#x5730;&#x5740;&#x5199;&#x5230;&#x5D29;&#x6E83;&#x65E5;&#x5FD7;&#x4E2D;&#x3002; &#x5D29;&#x6E83;&#x65E5;&#x5FD7;&#x4E2D;&#x6309;&#x7167;&#x7EBF;&#x7A0B;&#x7EC4;&#x7EC7;&#x5D29;&#x6E83;&#x6808;&#xFF0C;&#x8FD8;&#x4F1A;&#x8BB0;&#x5F55;&#x6BCF;&#x4E2A;machine&#x7684;&#x5730;&#x5740;&#x548C;&#x5176;&#x52A0;&#x8F7D;&#x7684;.bin&#x6587;&#x4EF6;&#x7684;GUID&#xFF0C;&#x7528;&#x4EE5;&#x6B63;&#x786E;&#x533A;&#x5206;&#x7EBF;&#x7A0B;&#x3001;machine&#x7684;&#x5B9E;&#x4F8B;&#x548C;bin&#x6587;&#x4EF6;&#x3002; 8) &#x5D29;&#x6E83;&#x7B26;&#x53F7;&#x89E3;&#x6790;&#x7531;OCPack&#x7F16;&#x8BD1;&#x5668;&#x751F;&#x6210;&#x6216;&#x6307;&#x5B9A;&#x4E00;&#x4E2A;GUID&#xFF0C;&#x540E;&#x7EED;&#x751F;&#x6210;&#x7684;&#x6240;&#x6709;&#x76F8;&#x5173;&#x6587;&#x4EF6;&#xFF08;&#x5305;&#x62EC;.s&#x3001;.sym&#x3001;.bin&#x4EE5;&#x53CA;&#x8FD0;&#x884C;&#x65F6;&#x751F;&#x6210;&#x7684;&#x5D29;&#x6E83;log&#xFF09;&#x4E2D;&#x90FD;&#x5B58;&#x6709;&#x6B64;GUID&#x3002;&#x7EBF;&#x4E0A;&#x7684;&#x5D29;&#x6E83;log&#x53D1;&#x9001;&#x56DE;&#x6765;&#x540E;&#xFF0C;&#x5D29;&#x6E83;&#x89E3;&#x6790;&#x670D;&#x52A1;&#x5668;&#x80FD;&#x591F;&#x6839;&#x636E;log&#x4E2D;&#x7684;GUID&#x67E5;&#x627E;&#x5230;&#x76F8;&#x5E94;&#x7684;&#x7B26;&#x53F7;&#x6587;&#x4EF6;&#x8FDB;&#x884C;&#x7B26;&#x53F7;&#x89E3;&#x6790;&#x3002;&#x540C;&#x65F6;build&#x670D;&#x52A1;&#x5668;&#x4E2D;&#x5B58;&#x50A8;&#x4E86;&#x5BF9;&#x5E94;GUID&#x7684;bin&#x6587;&#x4EF6;&#x6253;&#x5305;&#x65F6;&#x6240;&#x6709;&#x4F9D;&#x8D56;&#x9879;&#x7684;&#x6E90;&#x4FE1;&#x606F;&#xFF08;&#x5305;&#x62EC;&#x5BF9;&#x5E94;&#x7684;.s&#x6587;&#x4EF6;&#x3001;bin&#x4EE3;&#x7801;&#x5BF9;&#x5E94;&#x7684;&#x6E90;&#x4EE3;&#x7801;&#x7248;&#x672C;&#x3001;OCPack&#x5DE5;&#x5177;&#x94FE;&#x7684;&#x7248;&#x672C;&#x7B49;&#xFF09;&#xFF0C;&#x65B9;&#x4FBF;&#x5F00;&#x53D1;&#x91CD;&#x73B0;&#x3001;&#x5B9A;&#x4F4D;&#x76F8;&#x5173;&#x95EE;&#x9898;&#x3002; 9) Hook Objective-C&#x65B9;&#x6CD5; &#x539F;&#x7406;&#x4E0E;JSPatch&#x7C7B;&#x4F3C;&#xFF0C;&#x901A;&#x8FC7;&#x5C06;&#x76EE;&#x6807;&#x7C7B;&#x7684;&#x76EE;&#x6807;&#x65B9;&#x6CD5;&#x66FF;&#x6362;&#x4E3A;objc_msgForward&#xFF0C;&#x540C;&#x65F6;&#x5C06;forwardInvocation&#x66FF;&#x6362;&#x4E3A;&#x81EA;&#x5B9A;&#x4E49;&#x7684;forward&#x65B9;&#x6CD5;&#xFF0C;&#x5B9E;&#x73B0;&#x5F53;&#x76EE;&#x6807;&#x65B9;&#x6CD5;&#x88AB;&#x8C03;&#x7528;&#x65F6;&#xFF0C;&#x8F6C;&#x5411;forwardInvocation&#x7684;&#x81EA;&#x5B9A;&#x4E49;&#x5B9E;&#x73B0;&#x3002;&#x5728;&#x81EA;&#x5B9A;&#x4E49;&#x7684;forward&#x7684;&#x5B9E;&#x73B0;&#x4E2D;&#xFF0C;&#x5C06;NSInvocation&#x4F20;&#x7ED9;&#x5185;&#x7F6E;&#x7684;machine&#xFF0C;machine&#x4F1A;&#x53D6;&#x51FA;&#x5176;&#x53C2;&#x6570;&#x5E76;&#x8C03;&#x7528;&#x76F8;&#x5E94;&#x7684;&#x865A;&#x62DF;&#x673A;&#x65B9;&#x6CD5;&#xFF0C;&#x6700;&#x540E;&#x5C06;&#x8FD4;&#x56DE;&#x503C;&#x8BBE;&#x56DE;&#x7ED9;NSInvocation&#xFF0C;&#x5373;&#x5B8C;&#x6210;&#x4E86;Hook&#x7684;&#x529F;&#x80FD;&#x3002; &#x4E0E;JSPatch&#x76F8;&#x6BD4;&#xFF0C;&#x7528;OCPack&#x7684;&#x65B9;&#x6CD5;&#x8C03;&#x7528;&#x7701;&#x53BB;&#x4E86;&#x5927;&#x91CF;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x89E3;&#x6790;&#x64CD;&#x4F5C;&#xFF0C;&#x53C2;&#x6570;&#x5927;&#x90FD;&#x53EF;&#x76F4;&#x63A5;&#x4F20;&#x5165;&#x865A;&#x62DF;&#x673A;&#x8FDB;&#x884C;&#x5904;&#x7406;&#xFF0C;&#x65B9;&#x6CD5;&#x8C03;&#x7528;&#x7684;&#x6574;&#x4F53;&#x5F00;&#x9500;&#x6BD4;JSPatch&#x5C0F;&#x3002; &#x6027;&#x80FD;&#x4F18;&#x5316; &#x4E8C;&#x8FDB;&#x5236;&#x7A0B;&#x5E8F;&#x7684;&#x5927;&#x5C0F;&#x4F18;&#x5316; OCPack&#x5728;&#x5B9E;&#x73B0;&#x521D;&#x671F;&#xFF0C;&#x91C7;&#x7528;&#x4E86;&#x6A21;&#x677F;&#x7C7B;&#x7684;&#x65B9;&#x5F0F;&#x5B9E;&#x73B0;&#x4E00;&#x3001;&#x4E8C;&#x5143;&#x64CD;&#x4F5C;&#x7B26;&#x7684;&#x5BF9;&#x4E0D;&#x540C;&#x64CD;&#x4F5C;&#x6570;&#x548C;&#x8FD4;&#x56DE;&#x503C;&#x7C7B;&#x578B;&#x7684;&#x652F;&#x6301;&#xFF0C;&#x8FD9;&#x6837;&#x8C03;&#x8BD5;&#x8D77;&#x6765;&#x6BD4;&#x8F83;&#x65B9;&#x4FBF;&#x3002;&#x4F46;&#x540E;&#x6765;&#x53D1;&#x73B0;&#x8FD9;&#x79CD;&#x65B9;&#x6848;&#x4F1A;&#x5BFC;&#x81F4;&#x4EE3;&#x7801;&#x4F53;&#x79EF;&#x4F1A;&#x66B4;&#x589E;&#x3002;&#x6A21;&#x677F;&#x65B9;&#x6CD5;&#x4F1A;&#x6839;&#x636E;&#x8F93;&#x5165;&#x3001;&#x8F93;&#x51FA;&#x53C2;&#x6570;&#x7684;&#x7C7B;&#x578B;&#x751F;&#x6210;&#x5927;&#x91CF;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x800C;&#x5176;&#x4E2D;&#x5927;&#x90E8;&#x5206;&#x65B9;&#x6CD5;&#x90FD;&#x53EA;&#x6709;&#x5F88;&#x77ED;&#x7684;&#x51E0;&#x6761;&#x6307;&#x4EE4;&#xFF0C;&#x4ECE;&#x6700;&#x540E;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x5185;&#x5BB9;&#x5206;&#x6790;&#x770B;&#xFF0C;&#x5149;&#x65B9;&#x6CD5;&#x540D;&#x5C31;&#x5360;&#x7528;&#x4E86;&#x5927;&#x91CF;&#x5185;&#x5B58;&#x3002; &#x5728;&#x529F;&#x80FD;&#x57FA;&#x672C;&#x7A33;&#x5B9A;&#x540E;&#xFF0C;&#x5728;UT&#x7684;&#x4FDD;&#x8BC1;&#x4E0B;&#xFF0C;&#x5C06;&#x6A21;&#x677F;&#x6539;&#x4E3A;&#x4E86;&#x5B8F;&#x5B9E;&#x73B0;&#xFF0C;&#x5927;&#x5E45;&#x5730;&#x51CF;&#x5C0F;&#x4EE3;&#x7801;&#x6BB5;&#x548C;&#x6570;&#x636E;&#x6BB5;&#x7684;&#x4F53;&#x79EF;&#xFF0C;framework&#x6587;&#x4EF6;&#x7684;&#x5927;&#x5C0F;&#x4ECE;3.5M&#x51CF;&#x5230;&#x4E86;&#x4E0D;&#x5230;150k&#x3002; &#x6027;&#x80FD;&#x4F18;&#x5316; &#x6C47;&#x7F16;&#x4EE3;&#x7801;&#x4F18;&#x5316; &#x7531;&#x8BED;&#x6CD5;&#x6811;&#x76F4;&#x63A5;&#x751F;&#x6210;&#x7684;&#x6C47;&#x7F16;&#x4EE3;&#x7801;&#x91CC;&#x9762;&#x4F1A;&#x6709;&#x5F88;&#x591A;&#x65E0;&#x7528;&#x7684;push&#x64CD;&#x4F5C;&#xFF0C;&#x4E3B;&#x8981;&#x539F;&#x56E0;&#x662F;&#x67D0;&#x4E9B;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x8FD4;&#x56DE;&#x503C;&#x6CA1;&#x6709;&#x88AB;&#x7528;&#x5230;&#xFF0C;&#x6B64;&#x65F6;push&#x662F;&#x591A;&#x4F59;&#x7684;&#xFF0C;&#x800C;&#x4E14;&#x5728;&#x6BD4;&#x8F83;&#x5927;&#x7684;&#x5FAA;&#x73AF;&#x8FD8;&#x53EF;&#x80FD;&#x4F1A;&#x4F7F;&#x6808;&#x957F;&#x5EA6;&#x66B4;&#x589E;&#xFF0C;&#x5F71;&#x54CD;&#x6027;&#x80FD;&#x548C;&#x7A33;&#x5B9A;&#x6027; &#x4F18;&#x5316;&#x65B9;&#x6CD5;&#x662F;&#x5C3D;&#x91CF;&#x53BB;&#x6389;&#x65E0;&#x7528;&#x7684;push&#x6307;&#x4EE4;&#x3002;&#x4E3B;&#x8981;&#x662F;&#x901A;&#x8FC7;&#x5B9A;&#x4E49;&#x4E00;&#x4E9B;&#x89C4;&#x5219;&#x6765;&#x5224;&#x522B;&#x67D0;&#x6307;&#x4EE4;&#x7684;&#x8FD4;&#x56DE;&#x503C;&#x662F;&#x5426;&#x88AB;&#x7528;&#x5230;&#xFF0C;&#x5BF9;&#x4E8E;&#x65E0;&#x7528;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x8FD4;&#x56DE;&#x503C;&#x4E0D;&#x8FDB;&#x884C;push&#x64CD;&#x4F5C;&#x3002; &#x865A;&#x62DF;&#x673A;&#x6027;&#x80FD;&#x4F18;&#x5316; &#x5C06;&#x9891;&#x7E41;&#x7528;&#x5230;&#x7684;&#x6570;&#x636E;&#x7F13;&#x5B58;&#x4E0B;&#x6765;&#xFF1A;&#x53D6;&#x8FD0;&#x884C;&#x65F6;&#x4E0A;&#x4E0B;&#x6587;&#x548C;&#x8BFB;&#x5199;&#x6808;&#x5E27;&#x662F;&#x9891;&#x7E41;&#x64CD;&#x4F5C;&#xFF0C;&#x6D89;&#x53CA;&#x7EBF;&#x7A0B;&#x5C40;&#x90E8;&#x5B58;&#x50A8;&#x6570;&#x636E;&#x7684;&#x8BFB;&#x53D6;&#xFF0C;&#x8FD0;&#x884C;&#x65F6;&#x4E0A;&#x4E0B;&#x6587;&#x7ED3;&#x6784;&#x7684;&#x6307;&#x9488;&#x53EA;&#x4F1A;&#x5728;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x4E2D;&#x8BBF;&#x95EE;&#xFF0C;&#x901A;&#x8FC7;&#x5BF9;&#x4EE3;&#x7801;&#x8FDB;&#x884C;&#x91CD;&#x6784;&#xFF0C;&#x5C06;&#x5B83;&#x7F13;&#x5B58;&#x5230;executor&#x7C7B;&#x4E2D;&#xFF0C;&#x63D0;&#x9AD8;&#x4E86;&#x8FD0;&#x884C;&#x65F6;&#x6548;&#x7387;&#x3002; &#x5C3D;&#x91CF;&#x51CF;&#x5C11;&#x6838;&#x5FC3;&#x5FAA;&#x73AF;&#x5904;&#x4EE3;&#x7801;&#x7684;&#x5185;&#x5B58;&#x8BBF;&#x95EE;&#x6B21;&#x6570;&#xFF1A;&#x5C06;&#x6808;&#x5E27;&#x4E2D;&#x7684;&#x90E8;&#x5206;&#x6570;&#x636E;&#xFF08;&#x5982;&#xFF1A;ip&#xFF09;&#x63D0;&#x51FA;&#x6765;&#x653E;&#x5230;executor&#x7C7B;&#x4E2D;&#xFF0C;&#x51CF;&#x5C11;&#x9891;&#x7E41;&#x8BFB;&#x5199;ip&#x65F6;&#x5BFC;&#x81F4;&#x7684;&#x4E0D;&#x5FC5;&#x8981;&#x7684;&#x5185;&#x5B58;&#x64CD;&#x4F5C;&#x6B21;&#x6570;&#x3002; &#x5C3D;&#x91CF;&#x63D0;&#x9AD8;&#x6838;&#x5FC3;&#x5FAA;&#x73AF;&#x5904;&#x4EE3;&#x7801;&#x6548;&#x7387;&#xFF1A;&#x7528;&#x6570;&#x7EC4;&#x4EE3;&#x66FF;map&#x5B9E;&#x73B0;&#x6307;&#x4EE4;&#x5230;&#x6307;&#x4EE4;&#x5904;&#x7406;&#x5668;&#x7684;&#x6620;&#x5C04;&#x5173;&#x7CFB;&#xFF0C;&#x63D0;&#x9AD8;&#x8FD0;&#x884C;&#x65F6;&#x67E5;&#x8BE2;&#x6548;&#x7387;&#x3002; &#x4F18;&#x5316;&#x540E;&#x6BD4;&#x4F18;&#x5316;&#x524D;&#x63D0;&#x9AD8;&#x4E86;&#x5C06;&#x8FD1;&#x4E00;&#x500D; III. &#x672A;&#x6765;&#x8BA1;&#x5212;Linker&#x652F;&#x6301;&#x591A;&#x4E2A;.m&#x53CA;&#x591A;&#x4E2A;.bin&#x94FE;&#x63A5;&#x6210;&#x4E00;&#x4E2A;.bin&#xFF0C;&#x800C;&#x4E14;.bin&#x4E4B;&#x95F4;&#x4E92;&#x76F8;&#x8C03;&#x7528; &#x5176;&#x4ED6;&#x8BED;&#x6CD5;&#x652F;&#x6301;1) Block&#x652F;&#x6301;block 2) &#x6027;&#x80FD;&#x4F18;&#x5316; &#x53BB;&#x6389;&#x865A;&#x51FD;&#x6570;&#x8C03;&#x7528; &#x6307;&#x4EE4;&#x957F;&#x5EA6;&#x5BF9;&#x9F50; &#x4FDD;&#x8BC1;sp&#x3001;ip&#x7B49;&#x9891;&#x7E41;&#x64CD;&#x4F5C;&#x7684;&#x6570;&#x636E;&#x90FD;&#x653E;&#x5165;&#x5BC4;&#x5B58;&#x5668;&#x2014;&#x2014;&#x6C47;&#x7F16;&#x5B9E;&#x73B0;&#x76F8;&#x5173;&#x6838;&#x5FC3;&#x65B9;&#x6CD5;&#x3001;&#x6216;&#x8005;&#x6539;&#x53D8;&#x4EE3;&#x7801;&#x7ED3;&#x6784; &#x751F;&#x6210;&#x6C47;&#x7F16;&#x4EE3;&#x7801;&#x7684;&#x4F18;&#x5316; Debug&#x5DE5;&#x5177;&#x56E0;&#x4E3A;&#x865A;&#x62DF;&#x673A;&#x6267;&#x884C;&#x65F6;&#x662F;&#x6309;&#x6307;&#x4EE4;&#x6267;&#x884C;&#x7684;&#xFF0C;&#x4E0D;&#x5BB9;&#x6613;&#x76F4;&#x63A5;&#x5BF9;&#x5E94;&#x5230;Objective-C&#x4EE3;&#x7801;&#xFF0C;&#x8C03;&#x8BD5;&#x8D77;&#x6765;&#x6709;&#x70B9;&#x9EBB;&#x70E6;&#xFF0C;&#x540E;&#x7EED;&#x8BA1;&#x5212;&#x505A;&#x4E00;&#x4E9B;&#x529F;&#x80FD;&#xFF0C;&#x8C03;&#x8BD5;&#x65F6;&#x65B9;&#x4FBF;&#x5730;&#x663E;&#x793A;&#x6307;&#x4EE4;&#x5730;&#x5740;&#x5230;Objective-C&#x6E90;&#x4EE3;&#x7801;&#x7684;&#x5BF9;&#x5E94;&#x5173;&#x7CFB;&#x3002;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Xcode cmds]]></title>
    <url>%2F2018%2F12%2F13%2FXcode-cmds%2F</url>
    <content type="text"><![CDATA[1. Xcode commands12345678910111213141516171819202122232425262728//&#x5217;&#x51FA;&#x6240;&#x6709;&#x6A21;&#x62DF;&#x5668; $ xcrun simctl list //&#x627E;&#x4E8C;&#x8FDB;&#x5236;&#x6587;&#x4EF6;&#x7684;symbol, man symbols&#x53EF;&#x4EE5;&#x770B;help&#xFF0C;/Applications/Xcode.app/Contents/Developer/usr/bin/symbols$ xcrun symbols //&#x663E;&#x793A;&#x5F53;&#x524D;xcode&#x7684;&#x8DEF;&#x5F84;$xcode-select -print-path//&#x8F6C;&#x6362;plist$xcrun plutil -convert &lt;xml1&gt;|&lt;binary1&gt; xxx.plist//&#x5217;&#x51FA;&#x6240;&#x6709;&#x7684;scheme$xcodebuild -list &lt;project_file&gt;//&#x5C06;buildsetting&#x5BFC;&#x51FA;&#x5230;.xcconfig&#x6587;&#x4EF6;&#x4E2D;$xcodebuild -scheme &lt;scheme_name&gt; -showbuildSettings &gt;&gt; mynew.xcconfig//&#x4E8C;&#x8FDB;&#x5236;&#x6587;&#x4EF6;&#x4E2D;&#x5404;&#x4E2A;&#x6BB5;&#x7684;&#x5927;&#x5C0F;$xcrun size -x -l -m &lt;&#x4E8C;&#x8FDB;&#x5236;&#x6587;&#x4EF6;&gt;//&#x53EA;&#x8F93;&#x51FA;buuild&#x6240;&#x7528;&#x547D;&#x4EE4;&#xFF0C;&#x4E0D;&#x771F;&#x6B63;build// -n &#x6216; -dry-run$xcodebuild -n -workspace &lt;YOUR_WORKSPACE&gt;.xcworkspace -scheme &lt;YOUR_SCHEME&gt;//&#x663E;&#x793A;ios&#x7684;sdk&#x8DEF;&#x5F84;$xcrun --sdk iphoneos --show-sdk-path&#x4F8B;&#xFF1A;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS12.1.sdk 2. System commands123456789101112//&#x663E;&#x793A;&#x5BFC;&#x5165;symbol$ nm -u //&#x663E;&#x793A;&#x6240;&#x6709;&#x5BFC;&#x51FA;&#x7684;global symbol$ nm -g //&#x5728;&#x76EE;&#x5F55;&#x4E2D;&#x9012;&#x5F52;&#x627E;$ grep -r &lt;thing-to-find&gt; &lt;folder-to-look-into&gt;//&#x8FDC;&#x7A0B;&#x62F7;&#x8D1D;&#xFF0C;&#x5982;&#x679C;&lt;destination&gt;&#x7684;&#x76EE;&#x5F55;&#x4E0D;&#x5B58;&#x5728;&#xFF0C;&#x4F1A;&#x521B;&#x5EFA;&#x5BF9;&#x5E94;&#x7684;folder$ rsync -avzP &lt;source_file_or_dir&gt; &lt;destination&gt; 3. &#x8FDB;&#x7A0B;&#x76F8;&#x5173;12//&#x53EF;&#x4EE5;&#x663E;&#x793A;&#x6587;&#x4EF6;&#x7CFB;&#x7EDF;&#x548C;&#x7F51;&#x7EDC;&#x8BBF;&#x95EE;&#x60C5;&#x51B5;&#xFF0C;&#x4EE5;&#x53CA;&#x7F3A;&#x9875;&#x3001;pagein&#x7B49;$ fs_usage 5. lldb12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182//&#x663E;&#x793A;&#x6240;&#x6709;&#x53EF;&#x7528;&#x5E73;&#x53F0;(lldb) platform list//&#x9009;&#x62E9;remote-ios&#x4E3A;&#x5F53;&#x524D;&#x5E73;&#x53F0;(lldb) platform select remote-ios --sysroot --sysroot /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS5.1.sdk//&#x8FDE;&#x63A5;&#x5230;&#x8FDC;&#x7A0B;&#x7684;debugserver(lldb) platform connect connect://192.168.1.8:6789//&#x5217;&#x51FA;&#x8C03;&#x8BD5;&#x7684;target(lldb) target list//&#x8BBE;&#x7F6E;&#x65AD;&#x70B9;// -a &lt;addr&gt; &#x65AD;&#x5728;&#x6307;&#x5B9A;&#x7684;&#x5185;&#x5B58;&#x5730;&#x5740;// -s &lt;selector&gt; &#x65AD;&#x5728;ObjC&#x7684;&#x6D88;&#x606F;selector(lldb) breakpoint set -a 0x30036//&#x8BFB;&#x53D6;&#x5185;&#x5B58;// -o &#x628A;&#x5185;&#x5B58;&#x7684;&#x4E1C;&#x897F;&#x770B;&#x6210;Objective-C&#x5BF9;&#x8C61;(lldb) memory read &lt;&#x5F00;&#x59CB;&#x5730;&#x5740;&gt; &lt;&#x7ED3;&#x675F;&#x5730;&#x5740;&gt;//&#x7ED9;block&#x8BBE;&#x7F6E;&#x65AD;&#x70B9;&#xFF0C;&#x4F8B;&#x5B50;&#xFF1A;(lldb) bUIKit`__250-[_UIViewServiceViewControllerOperator function:]_block_invoke+214//&#x67E5;&#x627E;&#x6307;&#x5B9A;&#x7684;symbol(lldb) image lookup -vs __snapshotViews//&#x67E5;&#x627E;&#x67D0;&#x5730;&#x5740;&#x7684;symbol(lldb) image lookup -a 0x123456//&#x67E5;&#x627E;&#x6240;&#x6709;&#x540D;&#x5B57;&#x4E2D;&#x5E26;&#x6709;XXX_className&#x7684;objc&#x65B9;&#x6CD5;(lldb) image lookup -rn XXX_className//&#x6253;&#x5370;&#x7C7B;&#x5B9A;&#x4E49;(lldb) exp -lobjc -O -- [UIDebuggingInformationOverlay _shortMethodDescription]&lt;UIDebuggingInformationOverlay: 0x11677e258&gt;:in UIDebuggingInformationOverlay:Class Methods:+ (void) prepareDebuggingOverlay; (0x115da4312)+ (void) pushDisableApplyingConfigurations; (0x115da45c3)+ (void) popDisableApplyingConfigurations; (0x115da45d0)+ (id) overlay; (0x115da4482)Properties:@property (retain, nonatomic) UIEvent* lastTouch; (@synthesize lastTouch = _lastTouch;)@property (nonatomic) struct CGPoint drawingOrigin; (@synthesize drawingOrigin = _drawingOrigin;)@property (readonly, nonatomic) UIDebuggingInformationOverlayViewController* overlayViewController;@property (retain, nonatomic) UIDebuggingInformationRootTableViewController* rootTableViewController;@property (nonatomic) BOOL checkingTouches; (@synthesize checkingTouches = _checkingTouches;)@property (nonatomic) BOOL touchCaptureEnabled; (@synthesize touchCaptureEnabled = _touchCaptureEnabled;)@property (retain, nonatomic) NSMutableArray* touchObservers; (@synthesize touchObservers = _touchObservers;)@property (retain, nonatomic) UIWindow* inspectedWindow; (@synthesize inspectedWindow = _inspectedWindow;)Instance Methods:- (void) .cxx_destruct; (0x115da527d)- (id) hitTest:(struct CGPoint)arg1 withEvent:(id)arg2; (0x115da4b0d)- (id) lastTouch; (0x115da5228)- (id) inspectedWindow; (0x115da5203)- (void) setInspectedWindow:(id)arg1; (0x115da5214)- (void) setTouchCaptureEnabled:(BOOL)arg1; (0x115da51ce)- (id) overlayViewController; (0x115da4300)- (void) setCheckingTouches:(BOOL)arg1; (0x115da51ae)- (void) toggleFullscreen; (0x115da4ad0)- (void) toggleVisibility; (0x115da45dd)- (void) setRootTableViewController:(id)arg1; (0x115da5076)- (id) rootTableViewController; (0x115da5026)- (BOOL) checkingTouches; (0x115da519e)- (id) touchObservers; (0x115da51de)- (void) setLastTouch:(id)arg1; (0x115da5239)- (BOOL) touchCaptureEnabled; (0x115da51be)- (void) setTouchObservers:(id)arg1; (0x115da51ef)- (struct CGPoint) drawingOrigin; (0x115da524d)- (void) setDrawingOrigin:(struct CGPoint)arg1; (0x115da5265)- (id) init; (0x115da423e)- (id) initWithFrame:(struct CGRect)arg1; (0x115da4f76)(UIWindow &#x2026;)//&#x53CD;&#x6C47;&#x7F16;oc&#x51FD;&#x6570;(lldb) disassemble -n &quot;-[UIDebuggingInformationOverlay init]&quot;(lldb) disassemble -n &quot;-[UIDebuggingInformationOverlay init]&quot; -c10 //First 10 lines//&#x5237;&#x65B0;UI(lldb) expression -- (void)[CATransaction flush] lldb&#x6362;&#x76EE;&#x5F55;/&#x673A;&#x5668;debug 1234567891011&#x5C06;User1&#x673A;&#x5668;&#x4E0A;&#x7684;&#x4EE3;&#x7801;&#x90E8;&#x7F72;&#x5230;&#x8BBE;&#x5907;&#x4E0A;&#xFF0C;&#x5C06;dSYM&#x6587;&#x4EF6;&#x62F7;&#x8D1D;&#x7ED9;User2&#x7136;&#x540E;&#x5728;User2&#x7684;&#x673A;&#x5668;&#x4E0A;&#x8FD0;&#x884C;xcode&#xFF0C;attach&#x952E;&#x76D8;&#x8FDB;&#x7A0B;&#xFF0C;break&#x4E0B;&#x6765;&#xFF0C;&#x5728;lldb&#x547D;&#x4EE4;&#x884C;&#x4E2D;&#x8BBE;&#x7F6E;&#x5982;&#x4E0B;&#xFF1A;//&#x8BBE;&#x7F6E;symbol&#x6587;&#x4EF6;&#x8DEF;&#x5F84;lldb&gt; target symbols add &lt;User2&#x673A;&#x5668;&#x4E0A;dSYM&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&gt; //&#x8BBE;&#x7F6E;&#x6E90;&#x673A;&#x5668;&#x4E0E;&#x5F53;&#x524D;&#x673A;&#x5668;&#x4E0A;workarea&#x7684;&#x5BF9;&#x5E94;&#x5173;&#x7CFB;lldb&gt; settings set target.source-map &lt;User1&#x673A;&#x5668;&#x4E0A;&#x7684;&#x4EE3;&#x7801;&#x8DEF;&#x5F84;&gt; &lt;User2&#x673A;&#x5668;&#x4E0A;&#x7684;&#x4EE3;&#x7801;&#x8DEF;&#x5F84;&gt;&#x7136;&#x540E;&#x5C31;&#x53EF;&#x4EE5;&#x5728;xcode GUI&#x4E2D;&#x76F4;&#x63A5;&#x8BBE;&#x7F6E;&#x65AD;&#x70B9;&#x3001;&#x5355;&#x6B65;&#x8C03;&#x8BD5;&#x7B49;&#x4E86;&#x3002; &#x5176;&#x4ED6;&#x547D;&#x4EE4; &#x7EDF;&#x8BA1;&#x4EE3;&#x7801;&#x884C;&#x6570;&#x3001;&#x6587;&#x4EF6;&#x6570;(cloc) 12345678910111213141516171819202122232425262728293031$brew install cloc$clock work_area_path$ cloc &lt;CODE_FOLDER&gt; 3113 text files. 2937 unique files. 360 files ignored.github.com/AlDanial/cloc v 1.74 T=39.83 s (69.2 files/s, 16726.7 lines/s)---------------------------------------------------------------------------------------Language files blank comment code---------------------------------------------------------------------------------------Objective C 776 35073 18954 203497C++ 225 21145 12600 132774C/C++ Header 1320 28043 53283 97934Objective C++ 22 4312 1573 24520C 40 2021 4052 13687JSON 335 1 0 8401Markdown 5 295 0 1005Bourne Shell 7 140 84 887INI 12 0 0 373Python 4 72 40 342XML 1 0 0 296JavaScript 3 47 12 249Swift 4 47 30 230make 1 29 19 105HTML 1 0 0 73Windows Module Definition 1 0 0 3---------------------------------------------------------------------------------------SUM: 2757 91225 90647 484376--------------------------------------------------------------------------------------- codesign error when call xcodebuild over ssh Move keychain Keys from login/local to system]]></content>
  </entry>
  <entry>
    <title><![CDATA[Threads & Locks]]></title>
    <url>%2F2018%2F12%2F13%2FThread-and-Locks%2F</url>
    <content type="text"><![CDATA[1. dispatch_semaphore VS. pthread_mutex_t dispatch_semaphore is an antipattern for synchronization dispatch_semaphores are prone to priority inversions, very much like OSSpinLock It doesn&#x2019;t record the holder of the lock, so the kernel doesn&#x2019;t know which threads to donate priority to. There are two things for synchronization: 1) avoid spinning, 2) tracking the lock owner. Spinlock is 0/2, semaphore 1/2. If some threads are waiting for semaphore, but the semaphore&#x2019;s holding thread has lower priority than other threads (queues), it may hang. The prio-donation/QoS is intended to improve front app responsiveness. Question: The locks that don&#x2019;t record the thread holding the mutex are very common eg on Linux, Android, Win and WebKit. Answer: 1) Linux support for perthread priority is never used 2) All webkit threads run at the same priority, because they also own their thread pool &#x539F;&#x8D34;&#xFF1A;https://twitter.com/cocoawithlove/status/739104279202406400 2. os_unfair_lockRun on my latest gen rMBP, max specs. os_unfair_lock is new in iOS 10 and Sierra and is the fastest option. OSSpinLock and dispatch semaphores don&#x2019;t donate priorities and should not be used. NSLock is basically pthread_mutex + objc_msgSend queues can be slow @synchronized needs to lock twice because it works with an arbitrary object that is not itself a lock object. (thanks, Greg!) testUnfairLock (4.014 seconds) testSpinLock (4.064 seconds) testDispatchSemaphore (46.611 seconds) testPthreadMutex (64.438 seconds) testNSLock (68.508 seconds) testQueue (67.629 seconds) testSynchronized (70.172 seconds)At PSPDFKit we now use a wrapper for os_unfair_lock that falls back to pthread_mutex on iOS 9. TODO: Rewrite in ObjC++ to make sure Swift doesn&#x2019;t change any of the results here. TODO: Measure std::mutex, std::recursive_mutex and std::lock_guard &#x539F;&#x8D34;&#xFF1A;https://gist.github.com/steipete/36350a8a60693d440954b95ea6cbbafc 3. Spinlock Priority inversion Under QOS, low priority tasks may get starved when there&#x2019;s always high priority tasks running. If low priority holds a spinlock and yields, the high priority task will keep spinning when trying to acquire the lock, and the low priority task will not get a chance to release the lock. 4. ThreadSanitizer&#x539F;&#x7406;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;8 byte&#x7684;&#x5185;&#x5B58;&#x5757;&#xFF0C;&#x7EF4;&#x62A4;&#x51E0;&#x4E2A;&#x6570;&#x636E;&#xFF1A; &#x52A0;&#x9501;&#x65F6;&#xFF1A; &#x5C06;&#x9501;&#x4E2D;&#x8BB0;&#x5F55;&#x7684;&#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x8BBF;&#x95EE;&#x6B64;&#x5185;&#x5B58;&#x5757;&#x7684;&#x65F6;&#x95F4;&#x6233;&#x66F4;&#x65B0;&#x5230;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x7684;thread local&#x4E2D; &#x8BBF;&#x95EE;&#x5185;&#x5B58;&#x65F6;&#xFF1A; thread local&#x4E2D;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x7684;time stamp += 1 &#x7528;thread local&#x4E2D;&#x8BB0;&#x5F55;&#x7684;&#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x7684;time stamp&#x8DDF; shadow sate&#x4E2D;&#x8BB0;&#x5F55;&#x7684;&#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x7684;time stamp&#x8FDB;&#x884C;&#x6BD4;&#x8F83;&#xFF0C;&#x5982;&#x679C;&#x53D1;&#x73B0;&#x6BD4;shadow state&#x4E2D;&#x7684;&#x65E7;&#xFF0C;&#x5219;&#x8BF4;&#x660E;&#x6709;data race&#xFF0C;&#x62A5;warning &#x66F4;&#x65B0;shadow state&#x4E2D;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x7684;time stamp &#x66F4;&#x65B0;&#x5F53;&#x524D;&#x6240;&#x5360;&#x7528;&#x7684;&#x9501;&#x4E2D;&#x5BF9;&#x5E94;&#x4E8E;&#x6B64;&#x5185;&#x5B58;&#x5757;&#x7684;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x8BBF;&#x95EE;&#x65F6;&#x95F4;&#x6233; &#x6CE8;&#xFF1A; &#x6BCF;&#x6B21;&#x5185;&#x5B58;&#x8BBF;&#x95EE;&#xFF0C;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x7684;time stamp&#x90FD;&#x4F1A; +1 shadow state&#x4E3A;&#x5168;&#x5C40;&#x6570;&#x636E; &#x5982;&#x679C;&#x6CA1;&#x52A0;&#x9501;&#x5C31;&#x8BBF;&#x95EE;&#x4E86;&#x5185;&#x5B58;&#xFF0C;&#x5219;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x7684;thread local&#x4E2D;&#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x7684;time stamp&#x5C31;&#x4E0D;&#x4F1A;&#x88AB;&#x540C;&#x6B65;&#x8FC7;&#x6765;&#xFF0C;&#x5C31;&#x4F1A;&#x5BFC;&#x81F4;&#x7B2C;2.&#x6B65;&#x4E2D;&#x6BD4;&#x8F83;&#x65F6;thread local&#x91CC;&#x7684;time stamp&#x503C;&#x6BD4;shadow state&#x65E7; &#x53C2;&#x8003;&#x6765;&#x6E90;&#xFF1A;WWDC 2016 &#x89C6;&#x9891; 5. How do I get put into the real time scheduling class?Listing 1 The following code will move a pthread to the real time scheduling class 123456789101112131415161718192021222324252627#include &lt;mach/mach.h&gt;#include &lt;mach/mach_time.h&gt;#include &lt;pthread.h&gt; void move_pthread_to_realtime_scheduling_class(pthread_t pthread){ mach_timebase_info_data_t timebase_info; mach_timebase_info(&amp;timebase_info); const uint64_t NANOS_PER_MSEC = 1000000ULL; double clock2abs = ((double)timebase_info.denom / (double)timebase_info.numer) * NANOS_PER_MSEC; thread_time_constraint_policy_data_t policy; policy.period = 0;policy.computation = (uint32_t)(5 * clock2abs); // 5 ms of work policy.constraint = (uint32_t)(10 * clock2abs); policy.preemptible = FALSE; int kr = thread_policy_set(pthread_mach_thread_np(pthread_self()), THREAD_TIME_CONSTRAINT_POLICY, (thread_policy_t)&amp;policy, THREAD_TIME_CONSTRAINT_POLICY_COUNT); if (kr != KERN_SUCCESS) { mach_error(&quot;thread_policy_set:&quot;, kr); exit(1); }} The period, computation, constraint, and preemptible fields do have an effect, and more can be learned about them at:Using the Mach Thread API to Influence Scheduling 6. Which timing API(s) should I use?As mentioned above, all the timer methods end up in the same place inside the kernel. However, some of them are more efficient than the others. At the time this note was written, mach_wait_until() is the api we would recommend using. It has the lowest overhead of all the timing API that we measured. However, if you have specific needs that aren&#x2019;t met by mach_wait_until(), for example you need to wait on a condvar, then feel free to use the appropriate timer API. Listing 2 This example code demonstrates using mach_wait_until() to wait exactly 10 seconds. 123456789101112131415161718192021222324#include &lt;mach/mach.h&gt;#include &lt;mach/mach_time.h&gt; static const uint64_t NANOS_PER_USEC = 1000ULL;static const uint64_t NANOS_PER_MILLISEC = 1000ULL * NANOS_PER_USEC;static const uint64_t NANOS_PER_SEC = 1000ULL * NANOS_PER_MILLISEC; static mach_timebase_info_data_t timebase_info; static uint64_t abs_to_nanos(uint64_t abs) { return abs * timebase_info.numer / timebase_info.denom;} static uint64_t nanos_to_abs(uint64_t nanos) { return nanos * timebase_info.denom / timebase_info.numer;} void example_mach_wait_until(int argc, const char * argv[]){ mach_timebase_info(&amp;timebase_info); uint64_t time_to_wait = nanos_to_abs(10ULL * NANOS_PER_SEC); uint64_t now = mach_absolute_time(); mach_wait_until(now + time_to_wait);} &#x539F;&#x8D34;&#x5730;&#x5740;&#xFF1A;https://developer.apple.com/library/content/technotes/tn2169/_index.html]]></content>
  </entry>
  <entry>
    <title><![CDATA[Offscreen rendering]]></title>
    <url>%2F2018%2F12%2F13%2FOffscreen-rendering%2F</url>
    <content type="text"><![CDATA[Offscreen rendering CPU: write bits in a bitmap buffer, draw with CPU, happen in app process, &#x4E0D;&#x662F;&#x4E00;&#x822C;&#x8BF4;&#x7684;&#x79BB;&#x5C4F;&#x6E32;&#x67D3; CoreGraphics drawing (any class prefixed with CG*) drawing with CoreText drawRect GPU: performed via GPU, happend in render server process CALayers with a shouldRasterize property set to YES has caching (see below) CALayers using masks (setMasksToBounds) and dynamic shadows (setShadow*) Group opacity (UIViewGroupOpacity) CALayers with corner radius Performance penalty: context switch from on-screen drawing to off-screen drawing &#x539F;&#x8D34;&#xFF1A;https://robots.thoughtbot.com/designing-for-ios-graphics-performance &#x82F9;&#x679C;&#x5458;&#x5DE5;&#x8BC4;&#x8BBA;&#xFF1A; [The] advice as far as the button is good here, but I&#x2019;ve got one small correction and some bonus explanation for interested readers. I&#x2019;d like to clarify a few points about offscreen drawing as described in this post. While your list of cases which might elicit offscreen drawing is accurate, there are two grossly different mechanisms being triggered by elements of this list (each with different performance characteristics), and it&#x2019;s possible that a single view will require both. Those two mechanisms have very different performance considerations. In particular, a few (implementing drawRect and doing any CoreGraphics drawing, drawing with CoreText [which is just using CoreGraphics]) are indeed &#x201C;offscreen drawing,&#x201D; but they&#x2019;re not what we usually mean when we say that. They&#x2019;re very different from the rest of the list. When you implement drawRect or draw with CoreGraphics, you&#x2019;re using the CPU to draw, and that drawing will happen synchronously within your application. You&#x2019;re just calling some function which writes bits in a bitmap buffer, basically. The other forms of offscreen drawing happen on your behalf in the render server (a separate process) and are performed via the GPU (not via the CPU, as suggested in the previous paragraph). When the OpenGL renderer goes to draw each layer, it may have to stop for some subhierarchies and composite them into a single buffer. You&#x2019;d think the GPU would always be faster than the CPU at this sort of thing, but there are some tricky considerations here. It&#x2019;s expensive for the GPU to switch contexts from on-screen to off-screen drawing (it must flush its pipelines and barrier), so for simple drawing operations, the setup cost may be greater than the total cost of doing the drawing in CPU via e.g. CoreGraphics would have been. So if you&#x2019;re trying to deal with a complex hierarchy and are deciding whether it&#x2019;s better to use &#x2013;[CALayer setShouldRasterize:] or to draw a hierarchy&#x2019;s contents via CG, the only way to know is to test and measure. You could certainly end up doing two off-screen passes if you draw via CG within your app and display that image in a layer which requires offscreen rendering. For instance, if you take a screenshot via &#x2013;[CALayer renderInContext:] and then put that screenshot in a layer with a shadow. Also: the considerations for shouldRasterize are very different from masking, shadows, edge antialiasing, and group opacity. If any of the latter are triggered, there&#x2019;s no caching, and offscreen drawing will happen on every frame; rasterization does indeed require an offscreen drawing pass, but so long as the rasterized layer&#x2019;s sublayers aren&#x2019;t changing, that rasterization will be cached and repeated on each frame. And of course, if you&#x2019;re using drawRect: or drawing yourself via CG, you&#x2019;re probably caching locally. More on this in &#x201C;Polishing Your Rotation Animations,&#x201D; WWDC 2012. Speaking of caching: if you&#x2019;re doing a lot of this kind of drawing all over your application, you may need to implement cache-purging behavior for all these (probably large) images you&#x2019;re going to have sitting around on your application&#x2019;s heap. If you get a low memory warning, and some of these images are not actively being used, it may be best for you to get rid of those stretchable images you drew (and lazily regenerate them when needed). But that may end up just making things worse, so testing is required there too.]]></content>
  </entry>
  <entry>
    <title><![CDATA[Objective C related]]></title>
    <url>%2F2018%2F12%2F13%2FObjective-C-related%2F</url>
    <content type="text"><![CDATA[@def @defs &#x7528;&#x4E8E;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A; Objective-C &#x7C7B;&#x7684; struct &#x7ED3;&#x6784;&#xFF0C;&#x8FD9;&#x4E2A; struct &#x4E0E;&#x539F; Objective-C &#x7C7B;&#x5177;&#x6709;&#x76F8;&#x540C;&#x7684;&#x5185;&#x5B58;&#x5E03;&#x5C40;&#x3002; Getting the isa pointer of an NSObject base instance is relatively easy, if we use the useful @defsconstruct:123static inline Class _isa( NSObject *obj) { return( ((struct { @defs( NSObject) } *) obj)-&gt;isa);} NSSelectorFromString(@&#x201D;aaa&#x201D;) Internally calls sel_registerName(&quot;aaa&quot;); system trace Point of Interest (WWDC16) Point of Interest: kdebug_signpost kdebug_signpost_start(code, arg1, arg2, arg3, arg4) kdebug_signpost_end(code, arg1, arg2, arg3, arg4) code&#x662F;&#x4E00;&#x4E2A;id&#xFF0C;&#x7528;&#x4E8E;&#x533A;&#x5206;&#x4E0D;&#x540C;Point of interest ar1, arg2, arg3&#x4E3A;&#x9884;&#x7559;&#x5B57;&#x6BB5; arg4&#x7528;&#x4E8E;&#x533A;&#x5206;&#x989C;&#x8272; 0=Blue; 1=Green; 2=Purple; 3=Orange; 4=Red123456#import &lt;sys/kdebug_signpost.h&gt;- (void)func { kdebug_signpost_start(10, 0, 0, 0, 0); //code kdebug_signpost_end(10, 0, 0, 0, 0);} __kindof&#x5173;&#x952E;&#x5B57;objc&#x6CDB;&#x578B;&#x91CC;&#x5982;&#x679C;&#x4E0D;&#x7528;__kindof&#x6307;&#x5B9A;&#x6CDB;&#x578B;&#x53C2;&#x6570;&#xFF0C;add subclass object&#x53EF;&#x4EE5;&#xFF0C;&#x4F46;&#x53D6;&#x503C;&#x8D4B;&#x7ED9;&#x5B50;&#x7C7B;&#x53D8;&#x91CF;&#x65F6;&#x5C31;&#x4F1A;&#x6709;warning &#x52A0;&#x4E0A;__kindof&#x4EE5;&#x540E;&#x5C31;&#x597D;&#x4E86;&#x3002; 12345678910NSMutableArray&lt;UIView *&gt; *subviews = [[NSMutableArray alloc] init];[subviews addObject:[[UIView alloc] init]]; // Works[subviews addObject:[[UIImageView alloc] init]]; // Also worksUIView *sameView = subviews[0]; // WorksUIImageView *sameImageView = subviews[1]; // Incompatible pointer types initializing &apos;UIImageView *&apos; with an expression of type &apos;UIView *&apos;NSLog(@&quot;%@&quot;, NSStringFromClass([sameView class])); // UIViewNSLog(@&quot;%@&quot;, NSStringFromClass([sameImageView class])); // UIImageView Now, this produces a compile time warning, but does not crash at runtime. The key difference between this and the same example where the array&#x2019;s generic type is marked as __kindof, is that the compiler won&#x2019;t complain if you try to access ones of its elements, and store the result in a variable who&#x2019;s type is UIView or one of its subclasses. 12345678910NSMutableArray&lt;__kindof UIView *&gt; *subviews = [[NSMutableArray alloc] init];[subviews addObject:[[UIView alloc] init]]; // Works[subviews addObject:[[UIImageView alloc] init]]; // Also worksUIView *sameView = subviews[0]; // No problemUIImageView *sameImageView = subviews[1]; // No complaints now!NSLog(@&quot;%@&quot;, NSStringFromClass([sameView class])); // UIViewNSLog(@&quot;%@&quot;, NSStringFromClass([sameImageView class])); // UIImageView]]></content>
  </entry>
  <entry>
    <title><![CDATA[NSURLSession background session details]]></title>
    <url>%2F2018%2F12%2F13%2FNSURLSession-background-session%2F</url>
    <content type="text"><![CDATA[&#x82F9;&#x679C;&#x5458;&#x5DE5;&#x8BC4;&#x8BBA;&#xFF1A; Latest reply: Aug 18, 2015 4:49 AM by eskimo Apple Staff (8,640 points) eskimoAug 18, 2015 4:49 AM When writing an app that uses NSURLSession&#x2019;s background session support, it&#x2019;s easy to get confused by three non-obvious artefacts of the development process: When you run your app from Xcode, Xcode installs the app in a new container, meaning that the path to your app changes. This can confuse NSURLSession&#x2019;s background session support. Note This problem was fixed in iOS 9; if you encounter a problem with NSURLSession not handling a container path change in iOS 9 or later, please file a bug. Xcode&#x2019;s debugging prevents the system from suspending your app. So, if you run your app from Xcode, or you attach to the process some time after launch, and then move your app into the background, your app will continue executing in situations where the system would otherwise have suspended it. Similarly, the iOS Simulator does not accurately simulate app suspend and resume; this has worked in the past but it does not work in the iOS 8 or iOS 9 simulators (r. 16532261). When doing in-depth testing of NSURLSession background sessions I recommend that you test on a real device, running your app from the Home screen rather than running it from Xcode. This avoids all of the issues described above, resulting in a run-time environment that&#x2019;s much closer to what your users will see. If you encounter problems that you need to debug, you have two options: use logging &#x2014; It&#x2019;s important that your app have good logging support anyway, because otherwise it&#x2019;ll be impossible to debug problems that only crop up in the field. Once you&#x2019;ve taken the time to create this logging, you can use it to debug problems during development. attach &#x2014; If you have a specific problem that you must investigate with the debugger, you can run your app from the Home screen and then attach to the running process (via Xcode&#x2019;s Debug &gt; Attach to Process command) or use Wait for executable to be launched in the Info tab of the scheme editor. IMPORTANT As mentioned above, the debugger prevents your app from suspending. If that&#x2019;s a problem, you can always detach and then reattach later on. Finally, while bringing up a feature it&#x2019;s often useful to start from a clean slate on launch; this prevents tasks from a previous debugging session from confusing the current debugging session. You have a couple of options here: If you&#x2019;re developing on the simulator, iOS Simulator &gt; Reset Content and Settings is the quickest way to wipe the slate completely clean. On both the simulator and a real device, you can delete your app. This will not only remove the app and everything in the app&#x2019;s container, but will also remove any background sessions created by the app. You can also take advantage of NSURLSession&#x2019;s -invalidateAndCancel method, which will cancel any running tasks and then invalidate the session. There&#x2019;s a few ways to use this: During active development it might make sense for your app to call this on launch, guaranteeing that you start with a clean slate. Alternatively, you could keep track of your app&#x2019;s install path and call it on launch if the install path has changed. You could have a hidden UI that invalidates the session. This is helpful when you encounter a problem and want to know whether it&#x2019;s caused by some problem with the NSURLSession persistent state.]]></content>
  </entry>
  <entry>
    <title><![CDATA[Networking]]></title>
    <url>%2F2018%2F12%2F13%2FNetworking%2F</url>
    <content type="text"><![CDATA[1. &#x7F51;&#x7EDC;&#x8BF7;&#x6C42;&#x8FD4;&#x56DE;&#x72B6;&#x6001;&#x8C03;&#x8BD5;&#x5DE5;&#x5177;&#xFF1A; http://httpstat.us &#x8FD4;&#x56DE;200&#xFF1A;http://httpstat.us/200 2. tcpdump&#x6293;&#x5305;12345678910111213//Start active device$rvictl -s 7d0982cc809a1ee90ac726267f1f02732ac94320 //device udid//List ongoings active devices$rvictl -l//tcp dump$sudo tcpdump -i rvi0 -w ~/Desktop/output.pcap//Stop$rvictl -x 7d0982cc809a1ee90ac726267f1f02732ac94320 //&#x751F;&#x6210;&#x7684; output.pcap &#x53EF;&#x7528;WireShark&#x6765;&#x67E5;&#x770B;&#x3002; 3. TCP_NODELAY &amp; TCP_QUICKACK1234567891011121314151617181920212223242526By default TCP users Nagle&#x2019;s algorithm to collect small outgoing packets to send all at once. This have a detrimental effect on latency.Using TCP_NODELAY and TCP_CORK to improve network latency1. Applications that require lower latency on every packet sent should be run on sockets with TCP_NODELAY enabled. It can be enabled through the setsockopt command with the sockets API:# int one = 1;# setsockopt(descriptor, SOL_TCP, TCP_NODELAY, &amp;one, sizeof(one));2. For this to be used effectively, applications must avoid doing small, logically related buffer writes. Because TCP_NODELAY is enabled, these small writes will make TCP send these multiple buffers as individual packets, which can result in poor overall performance.If applications have several buffers that are logically related and that should be sent as one packet it could be possible to build a contiguous packet in memory and then send the logical packet to TCP, on a socket configured with TCP_NODELAY.Alternatively, create an I/O vector and pass it to the kernel using writev on a socket configured with TCP_NODELAY.3. Another option is to use TCP_CORK, which tells TCP to wait for the application to remove the cork before sending any packets. This command will cause the buffers it receives to be appended to the existing buffers. This allows applications to build a packet in kernel space, which may be required when using different libraries that provides abstractions for layers. To enable TCP_CORK, set it to a value of 1 using the setsockopt sockets API (this is known as &quot;corking the socket&quot;):# int one = 1;# setsockopt(descriptor, SOL_TCP, TCP_CORK, &amp;one, sizeof(one));4. When the logical packet has been built in the kernel by the various components in the application, tell TCP to remove the cork. TCP will send the accumulated logical packet right away, without waiting for any further packets from the application.# int zero = 0;# setsockopt(descriptor, SOL_TCP, TCP_CORK, &amp;zero, sizeof(zero));Related Manual PagesFor more information, or for further reading, the following man pages are related to the information given in this section.* tcp(7)* setsockopt(3p)* setsockopt(2) 4. nc&#x547D;&#x4EE4;12345678//TCP&#x7684;server&#x7AEF;$nc -l 1234 //&#x76D1;&#x542C;1234&#x7AEF;&#x53E3;//TCP&#x7684;client&#x7AEF;$nc 127.0.0.1 1234 //&#x8FDE;&#x63A5;127.0.0.1&#x7684;1234&#x7AEF;&#x53E3;&#xFF0C;&#x540E;&#x9762;&#x53EF;&#x4EE5;&#x8F93;&#x5165;&#x6587;&#x5B57;$nc 127.0.0.1 1234 &lt; input.file //&#x8FDE;&#x63A5;1234&#x7AEF;&#x53E3;&#xFF0C;&#x5E76;&#x5C06;&#x6587;&#x4EF6;&#x4F20;&#x8FC7;&#x53BB;//&#x8BE6;&#x89C1;&#xFF1A; man nc 5. iOS connection per HostNSURLConnection&#x9650;&#x5236;&#x540C;&#x4E00;host&#x53EA;&#x80FD;&#x540C;&#x65F6;&#x5EFA;&#x7ACB;4&#x4E2A;&#x8FDE;&#x63A5;&#xFF0C;&#x591A;&#x4E86;&#x4F1A;&#x8D85;&#x65F6;&#xFF08;&#x8FD9;&#x5E94;&#x8BE5;&#x662F;&#x4E3A;&#x4EC0;&#x4E48;&#x9891;&#x7E41;&#x7ED9;&#x51E0;&#x4E2A;server&#x53D1;&#x8BF7;&#x6C42;&#x7684;&#x65F6;&#x5019;&#x4F1A;&#x51FA;&#x73B0;&#x8D85;&#x65F6;&#xFF09;&#xFF1A; 1234567891011121314151617181920212223242526272829303132333435363738394041//iOS&#x9650;&#x5236;&#x5BF9;&#x540C;&#x4E00;&#x4E2A;host&#x6700;&#x591A;4&#x4E2A;&#x8FDE;&#x63A5;&#xFF0C;&#x7B2C;&#x4E94;&#x4E2A;&#x8BF7;&#x6C42;&#x4F1A;&#x8D85;&#x65F6;- (void)startConnections { NSMutableArray *connections= [NSMutableArray array]; for (int i= 0; i &lt; 5; i++) { NSURL *url= [NSURL URLWithString:@&quot;https://push.lightstreamer.com/lightstreamer/create_session.txt?LS_user=&amp;LS_adapter_set=DEMO&amp;LS_ios_version=1.0&quot;]; NSMutableURLRequest *req= [NSMutableURLRequest requestWithURL:url]; req.timeoutInterval = 15; NSURLConnection *conn= [[NSURLConnection alloc] initWithRequest:req delegate:self startImmediately:NO]; [connections addObject:conn]; } for (NSURLConnection *conn in connections) [conn start];}- (void)viewDidLoad { [super viewDidLoad]; [self startConnections];}- (void)didReceiveMemoryWarning { [super didReceiveMemoryWarning]; // Dispose of any resources that can be recreated.}- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response{ NSLog(@&quot;Connection %p did receive response %ld&quot;, connection, [(NSHTTPURLResponse *) response statusCode]);}- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data{ NSLog(@&quot;Connection %p did receive %ld bytes:\n%@&quot;, connection, [data length], [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding]);}- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error{ NSLog(@&quot;Connection %p did fail with error %@&quot;, connection, error);} NSURLSession&#x7684;NSURLSessionConfiguration&#x53EF;&#x4EE5;&#x8BBE;&#x7F6E;httpMaximumConnectionsPerHost,&#x8C03;&#x5927;&#x4EE5;&#x540E;&#x5C31;&#x6CA1;&#x95EE;&#x9898;&#x4E86;&#xFF1A; 1234567891011121314151617- (void)startConnections_session { NSURL *url= [NSURL URLWithString:@&quot;https://push.lightstreamer.com/lightstreamer/create_session.txt?LS_user=&amp;LS_adapter_set=DEMO&amp;LS_ios_version=1.0&quot;]; NSURLRequest *request = [NSURLRequest requestWithURL:url]; NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration]; configuration.timeoutIntervalForRequest = 10; [configuration setHTTPMaximumConnectionsPerHost:10]; NSURLSession *session = [NSURLSession sessionWithConfiguration:configuration]; for (int i = 0; i &lt; 6; i++) { NSURLSessionDataTask *task = [session dataTaskWithRequest:request completionHandler: ^(NSData *data, NSURLResponse *response, NSError *error) { NSLog(@&quot;Task %d did receive response %ld, error: %@&quot;, i, [(NSHTTPURLResponse *) response statusCode], error); }]; [task resume]; }}]]></content>
  </entry>
  <entry>
    <title><![CDATA[Networking in short lived extension]]></title>
    <url>%2F2018%2F12%2F13%2FNetworking-in-short-lived-extension%2F</url>
    <content type="text"><![CDATA[1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677692 Views0 RepliesLatest reply: Apr 26, 2017 1:47 AM by eskimo Apple Staff (8,640 points)eskimoApr 26, 2017 1:47 AMThere are many cases where you want to do long-running network operations in a short-lived app extension. For example, you might be creating a share extension that needs to upload a large image to an Internet server. Doing this correctly is quite tricky. The rest of this post describes some of these pitfalls and explains how to get around them.Just by way of context:* Most of the following was written during the iOS 8.1 timeframe, although AFAIK there&#x2019;s been no specific changes in this space since then.* The specific focus here is a share extension, although the behaviour is likely to be similar for other short-lived extensions.* I wasn&#x2019;t using SLComposeServiceViewController although I have no reason to believe that makes a difference.* I was testing on a device, not the simulator. In my experience the simulator is much less likely to terminate a share extension, which affects how things behave as I&#x2019;ll explain later.My app and its share extension have an app group in common. I started by verifying that this app group was working as expected (using NSUserDefaults).The NSURLSession must be in that app group; set this via the sharedContainerIdentifier property of the NSURLSessionConfiguration object you use to create the session.The app and the share extension must use the same NSURLSession background session identifier (the value you pass in to +backgroundSessionConfigurationWithIdentifier: when creating the configuration that you use to create the session).When an NSURLSession background session is shared like this, it&#x2019;s critical to understand that the session only allows one process to &#x2018;connect&#x2019; to it at a time. If a process is connected to the session and another tries to connect, the second process has its session immediately invalidated with NSURLErrorBackgroundSessionInUseByAnotherProcess.The connected session is the one that receives the session&#x2019;s delegate callbacks.IMPORTANT If callbacks are generated when no process is connected, the background session resumes (or relaunches) the app rather than the extension.Also, if a process is connected to a session and is then suspended or terminates, the session disconnects internally. If the process was terminated, the reconnection happens when your code creates its NSURLSession object on next launch. If the process was suspended, the reconnect happens when the app is resumed with the -application:handleEventsForBackgroundURLSession:completionHandler: delegate callback (and remember that this is always the app, not the extension, per the previous paragraph).The only way to programmatically disconnect from a session is to invalidate it.The expected behaviour here is that the extension will start an NSURLSession task and then immediately quit (by calling -completeRequestReturningItems:completionHandler:). The system will then resume (or relaunch) the main app to handle any delegate callbacks.When the system resumes or relaunches the main app to handle background session events, it calls -application:handleEventsForBackgroundURLSession:completionHandler:. The main app is expected to:1. Save away the completion handler block2. Reconnect to the session (if necessary) &#x2014; This involves creating the NSURLSession object if it doesn&#x2019;t currently exist.3. Handle delegate events from that session4. Invalidate the session when those events are all done &#x2014; The app knows this because the session calls the -URLSessionDidFinishEventsForBackgroundURLSession: delegate callback.5. Call the completion handler block that was saved in step 1This leaves the app disconnected from the session, so future invocations of the extension don&#x2019;t have to worry about the NSURLErrorBackgroundSessionInUseByAnotherProcess problem I mentioned earlier.This design works best if each extension hosted by the app has its own shared session. If the app hosts multiple extensions, and they all used the same shared session, they could end up stomping on each other.In my tests I&#x2019;ve noticed that some annoying behaviour falls out of this design: if you start a task from an extension, it&#x2019;s non-deterministic as to whether the app or extension gets the &#x2018;did complete&#x2019; callback. If the task runs super quickly, the extension typically gets the callback. If the task takes longer, the system has time to terminate the extension and the app is resumed to handle it.There&#x2019;s really no way around this. The workaround is to put the code that handles request completion in both your app and your extension (possibly reusing the code via a framework).It would be nice if the extension could disconnect from the session immediately upon starting its request. Alas, that&#x2019;s not currently possible (r. 18748008). The only way to programmatically disconnect from the session is to invalidate it, and that either cancels all the running tasks (-invalidateAndCancel) or waits for them to complete (-finishTasksAndInvalidate), neither of which is appropriate.One interesting edge case occurs when the app is in the foreground while the share extension comes up. For example, the app might have a share button, from which the user can invoke the share extension. If the share extension starts an NSURLSession task in that case, it can result in the app&#x2019;s -application:handleEventsForBackgroundURLSession:completionHandler: callback being called while the app is in the foreground. The app doesn&#x2019;t need to behave differently in this case, but it&#x2019;s a little unusual.Xcode&#x2019;s debugger prevents the system from suspending the process being debugged. So, if you run your extension from Xcode, or you attach to its process some time after launch, the process will continue to execute in situations where the system would otherwise have suspended it. This makes it tricky to investigate problems with the &#x201C;extension was suspended before the network request finished&#x201D; case. The best way to investigate any issues you encounter is via logging.Note For more information about debugging problems with background networking, see Testing Background Session Code.Keep in mind that not all networking done by your extension has to use a background session. You should use a background session for long-running requests, but if you have short-running requests then it&#x2019;s best to run them in a standard session.For example, imagine you have a share extension that needs to make two requests:* The first request simply gets an upload authorisation token from the server. This request is expected to finish very quickly.* The second request actually uploads the file (including the upload authorisation token from the previous request), and is expected to take a long time. It makes sense to only use a background session for the second request. The first request, being short-running, can be done in a standard session, and that will definitely simplify your code. When doing this you have to prevent your extension from suspending while the short-lived request is in flight. You can use -[NSProcessInfo performExpiringActivityWithReason:usingBlock:] for this. Share and Enjoy &#x2014; Quinn &#x201C;The Eskimo!&#x201D; Apple Developer Relations, Developer Technical Support, Core OS/Hardware let myEmail = &quot;eskimo&quot; + &quot;1&quot; + &quot;@apple.com&quot;Change History* 5 Dec 2014 &#x2014; First posted on the old DevForums.* 26 Apr 2017 &#x2014; Moved to the new DevForums. Made many editorial changes. Added the section on Xcode&#x2019;s debugger. Added a section on short-running network requests.]]></content>
  </entry>
  <entry>
    <title><![CDATA[Memory related]]></title>
    <url>%2F2018%2F12%2F13%2FMemory-related%2F</url>
    <content type="text"><![CDATA[Apple A10 cpu cache size: L1 cache: 64KB per-core, one for data and one for instructions L2 cache: 3MB, shared by both CPU cores L3 cache: 4MB MAC&#x4E0A;&#x5185;&#x5B58;&#x76F8;&#x5173;&#x547D;&#x4EE4; 1234567891011//&#x5F97;&#x5230;&#x5F53;&#x524D;heap&#x4E0A;&#x6240;&#x6709;&#x5BF9;&#x8C61;&#x7684;&#x7C7B;&#x578B;&#x3001;&#x5927;&#x5C0F;&#x53CA;&#x5176;&#x76F8;&#x5E94;&#x5730;&#x5740;&#x7B49;$heap -showSizes &lt;pid&gt; //print all object type and sizes$heap -address=all &lt;pid&gt; //print all objects in heap and their addresses//&#x5F97;&#x5230;&#x8FDB;&#x7A0B;&#x751F;&#x547D;&#x5468;&#x671F;&#x5185;&#x6240;&#x6709;&#x7684;&#x5185;&#x5B58;&#x5206;&#x914D;&#x4E8B;&#x4EF6;&#x3001;&#x8C03;&#x7528;&#x6808;$malloc_history -allEvents &lt;pid&gt; //print all ALLOC/FREE events, including call stack$malloc_history -callTree -collapseRecursion &lt;pid&gt; //print memory alloc call trees$malloc_history &lt;pid&gt; &lt;address&gt; //print the ALLOC/FREE event of the &lt;address&gt;, including call stack//&#x5F97;&#x5230;&#x5F53;&#x524D;&#x5185;&#x5B58;&#x4E2D;&#x6240;&#x6709;object&#x7533;&#x8BF7;&#x65F6;&#x7684;call stack$vmmap -v -stacks &lt;pid&gt; //print all call stacks of all objects in the heap]]></content>
  </entry>
  <entry>
    <title><![CDATA[Macro tricks]]></title>
    <url>%2F2018%2F12%2F13%2FMacro-tricks%2F</url>
    <content type="text"><![CDATA[STRINGIFYDefinition: 12#define xstr(s) str(s)#define str(s) #s Example: 1234567#define foo 4str (foo) &#x2192; &quot;foo&quot;xstr (foo) &#x2192; xstr (4) &#x2192; str (4) &#x2192; &quot;4&quot; Nested if followed by else1234567891011121314// The GNU compiler emits a warning if nested &quot;if&quot; statements are followed by// an &quot;else&quot; statement and braces are not used to explicitly disambiguate the// &quot;else&quot; binding. This leads to problems with code like://// if (gate)// ASSERT_*(condition) &lt;&lt; &quot;Some message&quot;;//// The &quot;switch (0) case 0:&quot; idiom is used to suppress this.#ifdef __INTEL_COMPILER# define GTEST_AMBIGUOUS_ELSE_BLOCKER_#else# define GTEST_AMBIGUOUS_ELSE_BLOCKER_ switch (0) case 0: default: // NOLINT#endif]]></content>
  </entry>
  <entry>
    <title><![CDATA[Mach-O]]></title>
    <url>%2F2018%2F12%2F13%2FMach-O%2F</url>
    <content type="text"><![CDATA[1. Dynamic linking (ELF VS. Mach-O) http://timetobleed.com/dynamic-linking-elf-vs-mach-o/ 2. App launching1$ xcrun dyldinfo -rebase -bind -lazy_bind &lt;YOUR_APP&gt; //show what dyld need to do to fix up during launching 3. Show dylib dependency1$ xcrun dyldinfo -dylibs &lt;YOUR_APP&gt; 4. Other cmds123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990//&#x5404;&#x4E2A;&#x6BB5;&#x3001;&#x533A;&#x7684;&#x5927;&#x5C0F;$xcrun zie -x -l -m a.outSegment __PAGEZERO: 0x100000000 (vmaddr 0x0 fileoff 0)Segment __TEXT: 0x1000 (vmaddr 0x100000000 fileoff 0) Section __text: 0x37 (addr 0x100000f30 offset 3888) Section __stubs: 0x6 (addr 0x100000f68 offset 3944) Section __stub_helper: 0x1a (addr 0x100000f70 offset 3952) Section __cstring: 0xe (addr 0x100000f8a offset 3978) Section __unwind_info: 0x48 (addr 0x100000f98 offset 3992) Section __eh_frame: 0x18 (addr 0x100000fe0 offset 4064) total 0xc5Segment __DATA: 0x1000 (vmaddr 0x100001000 fileoff 4096) Section __nl_symbol_ptr: 0x10 (addr 0x100001000 offset 4096) Section __la_symbol_ptr: 0x8 (addr 0x100001010 offset 4112) total 0x18Segment __LINKEDIT: 0x1000 (vmaddr 0x100002000 fileoff 8192)total 0x100003000//&#x67D0;&#x4E2A;&#x6BB5;&#x7684;&#x5177;&#x4F53;&#x5185;&#x5BB9;$xcrun otool -s __TEXT __text a.out a.out:(__TEXT,__text) section0000000100000f30 55 48 89 e5 48 83 ec 20 48 8d 05 4b 00 00 00 c7 0000000100000f40 45 fc 00 00 00 00 89 7d f8 48 89 75 f0 48 89 c7 0000000100000f50 b0 00 e8 11 00 00 00 b9 00 00 00 00 89 45 ec 89 0000000100000f60 c8 48 83 c4 20 5d c3//&#x4EE3;&#x7801;&#x6BB5;&#x7684;&#x6C47;&#x7F16;$xcrun otool -v -t a.outa.out:(__TEXT,__text) section_main:0000000100000f30 pushq %rbp0000000100000f31 movq %rsp, %rbp0000000100000f34 subq $0x20, %rsp0000000100000f38 leaq 0x4b(%rip), %rax0000000100000f3f movl $0x0, 0xfffffffffffffffc(%rbp)0000000100000f46 movl %edi, 0xfffffffffffffff8(%rbp)0000000100000f49 movq %rsi, 0xfffffffffffffff0(%rbp)0000000100000f4d movq %rax, %rdi0000000100000f50 movb $0x0, %al0000000100000f52 callq 0x100000f680000000100000f57 movl $0x0, %ecx0000000100000f5c movl %eax, 0xffffffffffffffec(%rbp)0000000100000f5f movl %ecx, %eax0000000100000f61 addq $0x20, %rsp0000000100000f65 popq %rbp0000000100000f66 ret//&#x5176;&#x4ED6;&#x533A;&#x7684;&#x5185;&#x5BB9;$xcrun otool -v -s __TEXT __cstring a.outa.out:Contents of (__TEXT,__cstring) section0x0000000100000f8a Hello World!\n//&#x5176;&#x4ED6;&#x533A;&#x5185;&#x5BB9;$xcrun otool -v -s __TEXT __eh_frame a.out a.out:Contents of (__TEXT,__eh_frame) section0000000100000fe0 14 00 00 00 00 00 00 00 01 7a 52 00 01 78 10 01 0000000100000ff0 10 0c 07 08 90 01 00 00//&#x663E;&#x793A;&#x4F9D;&#x8D56;&#x7684;&#x52A8;&#x6001;&#x5E93;$xcrun -otool -L a.outa.out: /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation (compatibility version 300.0.0, current version 1056.0.0) /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1197.1.1) /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 855.11.0) /usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0)//&#x663E;&#x793A;symbol table$xcrun nm -nm a.out (undefined) external _NSFullUserName (from Foundation) (undefined) external _NSLog (from Foundation) (undefined) external _OBJC_CLASS_$_NSObject (from CoreFoundation) (undefined) external _OBJC_METACLASS_$_NSObject (from CoreFoundation) (undefined) external ___CFConstantStringClassReference (from CoreFoundation) (undefined) external __objc_empty_cache (from libobjc) (undefined) external __objc_empty_vtable (from libobjc) (undefined) external _objc_autoreleasePoolPop (from libobjc) (undefined) external _objc_autoreleasePoolPush (from libobjc) (undefined) external _objc_msgSend (from libobjc) (undefined) external _objc_msgSend_fixup (from libobjc) (undefined) external dyld_stub_binder (from libSystem)0000000100000000 (__TEXT,__text) [referenced dynamically] external __mh_execute_header0000000100000e50 (__TEXT,__text) external _main0000000100000ed0 (__TEXT,__text) non-external -[Foo run]0000000100001128 (__DATA,__objc_data) external _OBJC_METACLASS_$_Foo0000000100001150 (__DATA,__objc_data) external _OBJC_CLASS_$_Foo]]></content>
  </entry>
  <entry>
    <title><![CDATA[iOS Environment variables]]></title>
    <url>%2F2018%2F12%2F13%2FiOS-Environment-variables%2F</url>
    <content type="text"><![CDATA[Environment variables handled in +[NSObject load]: NSDebugEnabled NSZombieEnabled NSDeallocateZombies NSDisableAutoreleasePoolCache NSDOLoggingEnabled NSUnbufferedIO Log NSURLSession errors: CFNETWORK_DIAGNOSTICS=1 Activity tracingOS_ACTIVITY_MODE=| Malloc environment variables1234567891011121314151617181920212223242526MallocStackLoggingIf set, malloc remembers the function call stack at the time of each allocation. MallocStackLoggingNoCompactThis option is similar to MallocStackLogging but makes sure that all allocations are logged, no matter how small or how short lived the buffer may be.MallocScribbleIf set, free sets each byte of every released block to the value 0x55.MallocPreScribbleIf set, malloc sets each byte of a newly allocated block to the value 0xAA. This increases the likelihood that a program making assumptions about freshly allocated memory fails. MallocGuardEdgesIf set, malloc adds guard pages before and after large allocations.MallocDoNotProtectPrelude Fine-grain control over the behavior of MallocGuardEdges: If set, malloc does not place a guard page at the head of each large block allocation.MallocDoNotProtectPostludeFine-grain control over the behavior of MallocGuardEdges: If set, malloc does not place a guard page at the tail of each large block allocation.MallocCheckHeapStartSet this variable to the number of allocations before malloc will begin validating the heap. If not set, malloc does not validate the heap.MallocCheckHeapEachSet this variable to the number of allocations before malloc should validate the heap. If not set, malloc does not validate the heap.]]></content>
  </entry>
  <entry>
    <title><![CDATA[GCD notes]]></title>
    <url>%2F2018%2F12%2F13%2FGCD-notes%2F</url>
    <content type="text"><![CDATA[1. Mordern GCDs (WWDC2017)Parallelism VS. Concurrency Parallelism: Dispatch.concurrentPerform12dispatch_apply(DISPATCH_APPLY_AUTO, 1000, ^(size_t i) { &#x2026; } //Not necessarily the number of cores, other task may occupying the core, automatic load balancing Concurrency: Context switching - Instrument system trace (system trace in depth in WWDC 16) A higher priority thread needs CPU A thread finishes its current work Waiting to acquire a resource Waiting for an asynchronous request to complete Excessive context switching Repeatedly waiting for exclusive access to contended resources os_ufair_lock may reduce lock-incurred context switch Unfair Fair Available types os_unfair_lock pthread_mutex_t, NSLock, DispatchQueue.sync Contended lock re-aquisition Can steal the lock Context switches to next waiter Subject to waiter starvation Yes No Lock ownership: Single Owner No Owner Mulitple Owners Serial queues dispatch_semaphore Private concurrent queues DispatchWorkItem.wait dispatch_group pthread_rwlock os_unfair_lock pthread_cond, NSCondition pthread_mutex, NSLock Queue suspension Repeatedly switching between independent operations Serial Dispatch Queue 1234// 1 &amp; 2 may be run on worker thread a, while 3 will be transferred to the calling thread and run there.dispatch_async(q, 1); dispatch_async(q, 2); dispatch_sync(q, 3) Dispatch Source Target Queue Hierarchy set target queue for a queue Quality of Service UI, IN, UT, BG One Queue hierarchy per subsystem, one target queue for Network, one target queue for DB Good Granularity of Concurrency Fixed number of serial queue hierarchies Coarse workitem granularity between hierarchies Finer workitem granularity inside a hierarchy Repeatedly bouncing an operation between threads No mutation Past Activation Protect the target queue hierarchy Build queue hierarchy from bottom to top Opt into &#x201C;static queue hierarchy&#x201D; 2. dispatch_queues discussions dispatch_get_global_queue() is in practice on of the worst thing that the dispatch API provides, because despite all the best efforts of the runtime, there aren&#x2019;t enough information at runtime about your operations/actors/&#x2026; to understand what your intent is and optimize for it. Which means that the language should make sure that (1) the anti-pattern is not the default behavior and (2) the interface provides a way to give and propagate the hints (dependency relationships, ordering, execution context, priorities, &#x2026;) the runtime will potentially need upfront. https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20170828/039368.html In general suspending/resuming work is very difficult to handle for a runtime (implementation wise), has large memory costs, and breaks priority inversion avoidance. dispatch_suspend()/dispatch_resume() is one of the banes of my existence when it comes to dispatch API surface. It only makes sense for dispatch source &#x201C;I don&#x2019;t want to receive these events anymore for a while&#x201D; is a perfectly valid thing to say or do. But suspending a queue or work is ripping the carpet from under the feet of the OS as you just basically make all work that is depending on the suspended one invisible and impossible to reason about. [&#x2026;] FWIW dispatch sources, and more importantly dispatch mach channels (which is the private interface that is used to implement XPC Connections) have a design that try really really really hard to not fall into any these pitfalls, are priority inheritance friendly, execute on distributed execution contexts, and have a state machine exposed through &#x201C;on$Event&#x201D; callbacks. We should benefit from the many years of experience that are condensed in these implementations when thinking about Actors and the primitives they provide. https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20170828/039373.html The place where GCD &#x201C;fails&#x201D; at is that if you target your individual serial queues to the global concurrent queues (a.k.a. root queues) which means &#x201C;please pool, do your job&#x201D;, then yes it doesn&#x2019;t scale, because we take these individual serial queues as proxies for OS threads. [&#x2026;] In GCD there&#x2019;s a very big difference between the one queue at the root of your graph (just above the thread pool) and any other that is within. The number that doesn&#x2019;t scale is the number of the former contexts, not the latter. [&#x2026;] The real problem is that if you go async you need to be async all the way. Node.js and other similar projects have understood that a very long time ago. If you express dependencies between asynchronous execution context with a blocking relationship such as above, then you&#x2019;re just committing performance suicide. GCD handles this by adding more threads and overcommitting the system. https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20170828/039405.html The real world is far messier though. In practice, real world code blocks all of the time. In the case of GCD tasks, this is often tolerable for most apps, because their CPU usage is bursty and any accidental &#x201C;thread explosion&#x201D; that is created is super temporary. That being said, programs that create thousands of queues/closures that block on I/O will naturally get thousands of threads. GCD is efficient but not magic. [&#x2026;] I think the real problem is that programmers cannot pretend that resources are infinite. https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20170828/039410.html NSOperation has several implementation issues, and using it to encapsulate asynchronous work means that you don&#x2019;t get the correct priorities (I don&#x2019;t say it cant&#x2019; be fixed, I honnestly don&#x2019;t know, I just know from the mouth of the maintainer that NSOperation makes only guarantees if you do all your work from -[NSOperation main]). https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20170828/039415.html In dispatch, there are 2 kind of queues at the API level in that regard: the global queues, which aren&#x2019;t queues like the other and really is just an abstraction on top of the thread pool all the other queues that you can target on each other the way you want. It is clear today that it was a mistake and that there should have been 3 kind of queues: the global queues, which aren&#x2019;t real queues but represent which family of system attributes your execution context requires (mostly priorities), and we should have disallowed enqueuing raw work on it the bottom queues (which GCD since last year tracks and call &#x201C;bases&#x201D; in the source code) that are known to the kernel when they have work enqueued any other &#x201C;inner&#x201D; queue, which the kernel couldn&#x2019;t care less about In dispatch, we regret every passing day that the difference between the 2nd and 3rd group of queues wasn&#x2019;t made clear in the API originally. I like to call the 2nd category execution contexts, but I can also see why you want to pass them as Actors, it&#x2019;s probably more uniform (and GCD did the same by presenting them both as queues). Such top-level &#x201C;Actors&#x201D; should be few, because if they all become active at once, they will need as many threads in your process, and this is not a resource that scales. This is why it is important to distinguish them. And like we&#x2019;re discussing they usually also wrap some kind of shared mutable state, resource, or similar, which inner actors probably won&#x2019;t do. https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20170828/039420.html Private concurrent queues are not a success in dispatch and cause several issues, these queues are second class citizens in GCD in terms of feature they support, and building something with concurrency within is hard. I would keep it as &#x201C;that&#x2019;s where we&#x2019;ll go some day&#x201D; but not try to attempt it until we&#x2019;ve build the simpler (or rather less hard) purely serial case first. [&#x2026;] This is why our belief (in my larger K(ernel) &amp; R(untime) team) is that instead of trying to paper over the fact that there&#x2019;s a real OS running your stuff, we need to embrace it and explain to people that everywhere in a traditional POSIX world they would have used a real pthread_create()d thread to perform the work of a given subsystem, they create one such category #2 bottom queue that represents this thread (and you make this subsystem an Actor), and that the same way in POSIX you can&#x2019;t quite expect a process to have thousands of threads, you can&#x2019;t really have thousands of such top level actors either. It doesn&#x2019;t mean that there can&#x2019;t be some anonymous pool to run stuff on it for the stuff that is less your raison d&#x2019;&#xEA;tre, it just means that the things your app that are really what it was built to do should be organized in a resource aware way to take maximum advantage of the system. Throwing a million actors to the system without more upfront organization and initial thinking by the developers is not optimizable. https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20170828/039429.html Some Frameworks have a strong need for a serial context, some don&#x2019;t It completely depends on the framework. If your framework is, say, a networking subsystem which is very asynchronous by nature for a long time, then yes, having the framework setup a #2 kind of guy inside it and have callbacks from/to this isolated context is just fine (and incidentally what your networking stack does). However for some frameworks it makes very little sense to do this, they&#x2019;re better served using the &#x201C;location&#x201D; provided by their client and have some internal synchronization (locks) for the shared state they have. Too much framework code today creates their own #2 queue (if not queues) all the time out of fear to be &#x201C;blocked&#x201D; by the client, but this leads to terrible performance. [ disclaimer I don&#x2019;t know that Security.framework works this way or not, this is an hypothetical ] For example, if you&#x2019;re using Security.framework stuff (that requires some state such as say your current security ephemeral keys and what not), using a private context instead of using the callers is really terribly bad because it causes tons of context-switches: such a framework should really not use a context itself, but a traditional lock to protect global state. The reason here is that the global state is really just a few keys and mutable contexts, but the big part of the work is the CPU time to (de)cipher, and you really want to parallelize as much as you can here, the shared state is not reason enough to hop. It is tempting to say that we could still use a private queue to hop through to get the shared state and back to the caller, that&#x2019;d be great if the caller would tail-call into the async to the Security framework and allow for the runtime to do a lightweight switch to the other queue, and then back. The problem is that real life code never does that: it will rarely tail call into the async (though with Swift async/await it would) but more importantly there&#x2019;s other stuff on the caller&#x2019;s context, so the OS will want to continue executing that, and then you will inevitably ask for a thread to drain that Security.framework async. In our experience, the runtime can never optimize this Security async pattern by never using an extra thread for the Security work. Top level contexts are a fundamental part of App (process) design It is actually way better for the app developer to decide what the subsystems of the app are, and create well known #2 context for these. In our WWDC Talk we took the hypothetical example of News.app, that fetches stuff from RSS feeds, has a database to know what to fetch and what you read, the UI thread, and some networking parts to interact with the internet. Such an app should upfront create 3 &#x201C;#2&#x201D; guys: the main thread for UI interactions (this one is made for you obviously) the networking handling context the database handling context The flow of most of the app is: UI triggers action, which asks the database subsystem (brain) what to do, which possibly issues networking requests.When a networking request is finished and that the assets have been reassembled on the network handling queue, it passes them back to the database/brain to decide how to redraw the UI, and issues the command to update the UI back to the UI. At the OS layer we believe strongly that these 3 places should be made upfront and have strong identities. And it&#x2019;s not an advanced need, it should be made easy. The Advanced need is to have lots of these, and have subsystems that share state that use several of these contexts. For everything else, I agree this hypothetical News.app can use an anonymous pools or reuse any of the top-level context it created, until it creates a scalability problem, in which case by [stress] testing the app, you can figure out which new subsystem needs to emerge. For example, maybe in a later version News.app wants beautiful articles and needs to precompute a bunch of things at the time the article is fetched, and that starts to take enough CPU that doing this on the networking context doesn&#x2019;t scale anymore. Then you just create a new top-level &#x201C;Article Massaging&#x201D; context, and migrate some of the workload there. Why this manual partitionning? It is our experience that the runtime cannot figure these partitions out by itself. and it&#x2019;s not only us, like I said earlier, Go can&#x2019;t either. The runtime can&#x2019;t possibly know about locking domains, what your code may or may not hit (I mean it&#x2019;s equivalent to the termination problem so of course we can&#x2019;t guess it), or just data affinity which on asymmetric platforms can have a significant impact on your speed (NUMA machines, some big.LITTLE stuff, &#x2026;). The default anonymous pool is fine for best effort work, no doubt we need to make it good, but it will never beat carefully partitioned subsystems. https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20170904/039461.html]]></content>
  </entry>
  <entry>
    <title><![CDATA[File related]]></title>
    <url>%2F2018%2F12%2F13%2FFile-related%2F</url>
    <content type="text"><![CDATA[1. &#x7981;&#x7528; Unified Buffer Cache (UBC)12//&#x7981;&#x7528; Unified Buffer Cache (UBC), &#x9700;&#x8981;&#x4FDD;&#x8BC1;&#x6587;&#x4EF6;&#x4E4B;&#x524D;&#x4E0D;&#x5728;cache&#x4E2D;&#xFF0C;&#x5426;&#x5219;&#x8FD8;&#x662F;&#x4F1A;&#x7528;cachefcntl(fd, F_NOCACHE, 1) F_GLOBAL_NOCACHE&#x662F;&#x76F4;&#x63A5;&#x5C06;&#x6240;&#x6709;&#x5BF9;&#x6B64;&#x6587;&#x4EF6;&#x7684;&#x8BBF;&#x95EE;&#x90FD;&#x7F6E;&#x4E3A;NO cache&#xFF0C;&#x4F46;&#x597D;&#x50CF;&#x73B0;&#x5728;&#x884C;&#x4E3A;&#x662F;&#x8DDF;F_NOCACHE&#x662F;&#x4E00;&#x6837;&#x7684;&#x3002; &#x539F;&#x8D34;&#x5730;&#x5740;&#xFF1A;https://forums.developer.apple.com/thread/25464 &#x82F9;&#x679C;&#x5458;&#x5DE5;&#x8BC4;&#x8BBA;&#xFF1A; eskimoNov 9, 2015 1:02 AM(in response to Ken Thomases) I belive that F_NOCACHE prevents the file&#x2019;s data from being added to the cache if it&#x2019;s not already there. However, if it&#x2019;s already in the cache, the cache will be used for reading. That&#x2019;s correct. If things didn&#x2019;t behave that way then the file system would be inconsistent depending on whether you set F_NOCACHE or not, which would be a bit of a nightmare (especially when you consider memory mappings).Some things to keep in mind while testing: Set F_NOCACHE on your writes as well as your reads. For each round of testing, deleting the file before you start. That guarantees that no remnants of that file will remaining in the cache. F_NOCACHE has implementation restrictions that can cause it to end up using the cache. To increase the chances of that not happening, do the following: use a page aligned buffer (valloc is your friend) make your I/O length a multiple of the page size make your I/O offset (that is, the offset into the file) a multiple of the page sizeFinally, be aware that F_NOCACHE is a hint, not an absolute requirement, and there are circumstances under which it will use the cache, and those circumstances can change from release to release. If one wanted to write a form of IO benchmarking program, where you are trying to measure the hardware-centric not-host-buffered IO performance, what system calls would be used? F_NOCACHE works fine for that (or it did the last time I tested it, which was quite some time ago). There are two things to watch out for: You have to make sure that the file you&#x2019;re interacting doesn&#x2019;t get into the cache. The easiest way to do that is to create your own test file and write to it with non-cached I/O. You can test whether this is working as expected using mincore. You need to watch out for the file being discontiguous. F_PREALLOCATE can help with that 2. Temp file creation &#x751F;&#x6210;&#x4E34;&#x65F6;&#x6587;&#x4EF6;12345678910NSString *templateStr = [NSTemporaryDirectory() stringByAppendingPathComponent: @&quot;live_crash_report.XXXXXX&quot;];char *path = strdup([templateStr fileSystemRepresentation]); int fd = mkstemp(path); //&#x53D6;&#x968F;&#x673A;&#x6570;&#x586B;&#x5145;XXXXXX&#xFF0C;&#x751F;&#x6210;&#x4E34;&#x65F6;&#x6587;&#x4EF6;&#x540D;&#xFF0C;&#x5E76;&#x4EE5;mode 0600 &#x6253;&#x5F00;if (fd &lt; 0) { plcrash_populate_posix_error(outError, errno, NSLocalizedString(@&quot;Failed to create temporary path&quot;, @&quot;Error opening temporary output path&quot;)); free(path); return nil;}]]></content>
  </entry>
  <entry>
    <title><![CDATA[dtrace]]></title>
    <url>%2F2018%2F12%2F13%2FDtrace%2F</url>
    <content type="text"><![CDATA[&#x5E38;&#x7528;&#x547D;&#x4EE4;&#xFF1A;123$ sudo dtrace -n &apos;proc:::signal-send /pid/ { printf(&quot;%s -%d %d&quot;,execname,args[2],args[1]-&gt;pr_pid); ustack(); }&apos;$ sudo dtrace -n &apos;proc:::exec-success { printf(&quot;%Y %s\n&quot;,walltimestamp,curpsinfo-&gt;pr_psargs); ustack(); }&apos; DTrace&#x53C2;&#x8003;&#x8D44;&#x6599;: Hooked on DTrace part1,2,3,4: http://blog.bignerdranch.com/category/dtrace/ DTrace&#x76D1;&#x63A7;&#x65B0;&#x542F;&#x8FDB;&#x7A0B;&#x53CA;&#x5176;&#x547D;&#x4EE4;&#x884C;&#x53C2;&#x6570;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325#!/usr/sbin/dtrace -C -s#pragma D option quietproc:::exec-success{this-&gt;isx64=(curproc-&gt;p_flag &amp; P_LP64)!=0;#define SELECT_64_86(x64, x86) (this-&gt;isx64 ? (x64) : (x86))#define GET_POINTER(base, offset) (user_addr_t)SELECT_64_86(*(uint64_t*)((base)+sizeof(uint64_t)*(offset)), *(uint32_t*)((base)+sizeof(uint32_t)*(offset)))this-&gt;ptrsize=SELECT_64_86(sizeof(uint64_t),sizeof(uint32_t));this-&gt;argc=curproc-&gt;p_argc;// I havn&apos;t recognized whether the x64 occurs tha same problem (argv\[0\] points invalid area)this-&gt;isClean=SELECT_64_86(1, (curproc-&gt;p_dtrace_argv==(uregs[R_SP],sizeof(uint32_t),sizeof(uint32_t))));this-&gt;argv=(uint64_t)copyin(curproc-&gt;p_dtrace_argv,this-&gt;ptrsize*this-&gt;argc);/* printf(&quot;%s with args:%d (%p, %p)\n&quot;,execname, this-&gt;argc, curproc-&gt;pdtraceargv, uregs\[R_SP\]); */printf(&quot;\nargc: %d\n&quot;, this-&gt;argc);printf(&quot;%s &quot;, (0 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv,0)) : &quot;&quot;);printf(&quot;%s &quot;, (1 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 1)) : &quot;&quot;);printf(&quot;%s &quot;, (2 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 2)) : &quot;&quot;);printf(&quot;%s &quot;, (3 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 3)) : &quot;&quot;);printf(&quot;%s &quot;, (4 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 4)) : &quot;&quot;);printf(&quot;%s &quot;, (5 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 5)) : &quot;&quot;);printf(&quot;%s &quot;, (6 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 6)) : &quot;&quot;);printf(&quot;%s &quot;, (7 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 7)) : &quot;&quot;);printf(&quot;%s &quot;, (8 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 8)) : &quot;&quot;);printf(&quot;%s &quot;, (9 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 9)) : &quot;&quot;);printf(&quot;%s &quot;, (10 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 10)) : &quot;&quot;);printf(&quot;%s &quot;, (11 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 11)) : &quot;&quot;);printf(&quot;%s &quot;, (12 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 12)) : &quot;&quot;);printf(&quot;%s &quot;, (13 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 13)) : &quot;&quot;);printf(&quot;%s &quot;, (14 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 14)) : &quot;&quot;);printf(&quot;%s &quot;, (15 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 15)) : &quot;&quot;);printf(&quot;%s &quot;, (16 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 16)) : &quot;&quot;);printf(&quot;%s &quot;, (17 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 17)) : &quot;&quot;);printf(&quot;%s &quot;, (18 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 18)) : &quot;&quot;);printf(&quot;%s &quot;, (19 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 19)) : &quot;&quot;);printf(&quot;%s &quot;, (20 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 20)) : &quot;&quot;);printf(&quot;%s &quot;, (21 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 21)) : &quot;&quot;);printf(&quot;%s &quot;, (22 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 22)) : &quot;&quot;);printf(&quot;%s &quot;, (23 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 23)) : &quot;&quot;);printf(&quot;%s &quot;, (24 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 24)) : &quot;&quot;);printf(&quot;%s &quot;, (25 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 25)) : &quot;&quot;);printf(&quot;%s &quot;, (26 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 26)) : &quot;&quot;);printf(&quot;%s &quot;, (27 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 27)) : &quot;&quot;);printf(&quot;%s &quot;, (28 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 28)) : &quot;&quot;);printf(&quot;%s &quot;, (29 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 29)) : &quot;&quot;);printf(&quot;%s &quot;, (30 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 30)) : &quot;&quot;);printf(&quot;%s &quot;, (31 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 31)) : &quot;&quot;);printf(&quot;%s &quot;, (32 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 32)) : &quot;&quot;);printf(&quot;%s &quot;, (33 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 33)) : &quot;&quot;);printf(&quot;%s &quot;, (34 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 34)) : &quot;&quot;);printf(&quot;%s &quot;, (35 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 35)) : &quot;&quot;);printf(&quot;%s &quot;, (36 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 36)) : &quot;&quot;);printf(&quot;%s &quot;, (37 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 37)) : &quot;&quot;);printf(&quot;%s &quot;, (38 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 38)) : &quot;&quot;);printf(&quot;%s &quot;, (39 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 39)) : &quot;&quot;);printf(&quot;%s &quot;, (40 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 40)) : &quot;&quot;);printf(&quot;%s &quot;, (41 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 41)) : &quot;&quot;);printf(&quot;%s &quot;, (42 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 42)) : &quot;&quot;);printf(&quot;%s &quot;, (43 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 43)) : &quot;&quot;);printf(&quot;%s &quot;, (44 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 44)) : &quot;&quot;);printf(&quot;%s &quot;, (45 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 45)) : &quot;&quot;);printf(&quot;%s &quot;, (46 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 46)) : &quot;&quot;);printf(&quot;%s &quot;, (47 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 47)) : &quot;&quot;);printf(&quot;%s &quot;, (48 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 48)) : &quot;&quot;);printf(&quot;%s &quot;, (49 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 49)) : &quot;&quot;);printf(&quot;%s &quot;, (50 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 50)) : &quot;&quot;);printf(&quot;%s &quot;, (51 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 51)) : &quot;&quot;);printf(&quot;%s &quot;, (52 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 52)) : &quot;&quot;);printf(&quot;%s &quot;, (53 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 53)) : &quot;&quot;);printf(&quot;%s &quot;, (54 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 54)) : &quot;&quot;);printf(&quot;%s &quot;, (55 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 55)) : &quot;&quot;);printf(&quot;%s &quot;, (56 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 56)) : &quot;&quot;);printf(&quot;%s &quot;, (57 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 57)) : &quot;&quot;);printf(&quot;%s &quot;, (58 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 58)) : &quot;&quot;);printf(&quot;%s &quot;, (59 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 59)) : &quot;&quot;);printf(&quot;%s &quot;, (60 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 60)) : &quot;&quot;);printf(&quot;%s &quot;, (61 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 61)) : &quot;&quot;);printf(&quot;%s &quot;, (62 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 62)) : &quot;&quot;);printf(&quot;%s &quot;, (63 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 63)) : &quot;&quot;);printf(&quot;%s &quot;, (64 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 64)) : &quot;&quot;);printf(&quot;%s &quot;, (65 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 65)) : &quot;&quot;);printf(&quot;%s &quot;, (66 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 66)) : &quot;&quot;);printf(&quot;%s &quot;, (67 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 67)) : &quot;&quot;);printf(&quot;%s &quot;, (68 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 68)) : &quot;&quot;);printf(&quot;%s &quot;, (69 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 69)) : &quot;&quot;);printf(&quot;%s &quot;, (70 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 70)) : &quot;&quot;);printf(&quot;%s &quot;, (71 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 71)) : &quot;&quot;);printf(&quot;%s &quot;, (72 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 72)) : &quot;&quot;);printf(&quot;%s &quot;, (73 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 73)) : &quot;&quot;);printf(&quot;%s &quot;, (74 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 74)) : &quot;&quot;);printf(&quot;%s &quot;, (75 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 75)) : &quot;&quot;);printf(&quot;%s &quot;, (76 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 76)) : &quot;&quot;);printf(&quot;%s &quot;, (77 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 77)) : &quot;&quot;);printf(&quot;%s &quot;, (78 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 78)) : &quot;&quot;);printf(&quot;%s &quot;, (79 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 79)) : &quot;&quot;);printf(&quot;%s &quot;, (80 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 80)) : &quot;&quot;);printf(&quot;%s &quot;, (81 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 81)) : &quot;&quot;);printf(&quot;%s &quot;, (82 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 82)) : &quot;&quot;);printf(&quot;%s &quot;, (83 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 83)) : &quot;&quot;);printf(&quot;%s &quot;, (84 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 84)) : &quot;&quot;);printf(&quot;%s &quot;, (85 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 85)) : &quot;&quot;);printf(&quot;%s &quot;, (86 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 86)) : &quot;&quot;);printf(&quot;%s &quot;, (87 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 87)) : &quot;&quot;);printf(&quot;%s &quot;, (88 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 88)) : &quot;&quot;);printf(&quot;%s &quot;, (89 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 89)) : &quot;&quot;);printf(&quot;%s &quot;, (90 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 90)) : &quot;&quot;);printf(&quot;%s &quot;, (91 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 91)) : &quot;&quot;);printf(&quot;%s &quot;, (92 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 92)) : &quot;&quot;);printf(&quot;%s &quot;, (93 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 93)) : &quot;&quot;);printf(&quot;%s &quot;, (94 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 94)) : &quot;&quot;);printf(&quot;%s &quot;, (95 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 95)) : &quot;&quot;);printf(&quot;%s &quot;, (96 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 96)) : &quot;&quot;);printf(&quot;%s &quot;, (97 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 97)) : &quot;&quot;);printf(&quot;%s &quot;, (98 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 98)) : &quot;&quot;);printf(&quot;%s &quot;, (99 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 99)) : &quot;&quot;);printf(&quot;%s &quot;, (100 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 100)) : &quot;&quot;);printf(&quot;%s &quot;, (101 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 101)) : &quot;&quot;);printf(&quot;%s &quot;, (102 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 102)) : &quot;&quot;);printf(&quot;%s &quot;, (103 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 103)) : &quot;&quot;);printf(&quot;%s &quot;, (104 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 104)) : &quot;&quot;);printf(&quot;%s &quot;, (105 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 105)) : &quot;&quot;);printf(&quot;%s &quot;, (106 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 106)) : &quot;&quot;);printf(&quot;%s &quot;, (107 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 107)) : &quot;&quot;);printf(&quot;%s &quot;, (108 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 108)) : &quot;&quot;);printf(&quot;%s &quot;, (109 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 109)) : &quot;&quot;);printf(&quot;%s &quot;, (110 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 110)) : &quot;&quot;);printf(&quot;%s &quot;, (111 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 111)) : &quot;&quot;);printf(&quot;%s &quot;, (112 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 112)) : &quot;&quot;);printf(&quot;%s &quot;, (113 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 113)) : &quot;&quot;);printf(&quot;%s &quot;, (114 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 114)) : &quot;&quot;);printf(&quot;%s &quot;, (115 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 115)) : &quot;&quot;);printf(&quot;%s &quot;, (116 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 116)) : &quot;&quot;);printf(&quot;%s &quot;, (117 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 117)) : &quot;&quot;);printf(&quot;%s &quot;, (118 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 118)) : &quot;&quot;);printf(&quot;%s &quot;, (119 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 119)) : &quot;&quot;);printf(&quot;%s &quot;, (120 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 120)) : &quot;&quot;);printf(&quot;%s &quot;, (121 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 121)) : &quot;&quot;);printf(&quot;%s &quot;, (122 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 122)) : &quot;&quot;);printf(&quot;%s &quot;, (123 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 123)) : &quot;&quot;);printf(&quot;%s &quot;, (124 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 124)) : &quot;&quot;);printf(&quot;%s &quot;, (125 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 125)) : &quot;&quot;);printf(&quot;%s &quot;, (126 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 126)) : &quot;&quot;);printf(&quot;%s &quot;, (127 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 127)) : &quot;&quot;);printf(&quot;%s &quot;, (128 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 128)) : &quot;&quot;);printf(&quot;%s &quot;, (129 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 129)) : &quot;&quot;);printf(&quot;%s &quot;, (130 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 130)) : &quot;&quot;);printf(&quot;%s &quot;, (131 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 131)) : &quot;&quot;);printf(&quot;%s &quot;, (132 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 132)) : &quot;&quot;);printf(&quot;%s &quot;, (133 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 133)) : &quot;&quot;);printf(&quot;%s &quot;, (134 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 134)) : &quot;&quot;);printf(&quot;%s &quot;, (135 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 135)) : &quot;&quot;);printf(&quot;%s &quot;, (136 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 136)) : &quot;&quot;);printf(&quot;%s &quot;, (137 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 137)) : &quot;&quot;);printf(&quot;%s &quot;, (138 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 138)) : &quot;&quot;);printf(&quot;%s &quot;, (139 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 139)) : &quot;&quot;);printf(&quot;%s &quot;, (140 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 140)) : &quot;&quot;);printf(&quot;%s &quot;, (141 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 141)) : &quot;&quot;);printf(&quot;%s &quot;, (142 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 142)) : &quot;&quot;);printf(&quot;%s &quot;, (143 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 143)) : &quot;&quot;);printf(&quot;%s &quot;, (144 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 144)) : &quot;&quot;);printf(&quot;%s &quot;, (145 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 145)) : &quot;&quot;);printf(&quot;%s &quot;, (146 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 146)) : &quot;&quot;);printf(&quot;%s &quot;, (147 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 147)) : &quot;&quot;);printf(&quot;%s &quot;, (148 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 148)) : &quot;&quot;);printf(&quot;%s &quot;, (149 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 149)) : &quot;&quot;);printf(&quot;%s &quot;, (150 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 150)) : &quot;&quot;);printf(&quot;%s &quot;, (151 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 151)) : &quot;&quot;);printf(&quot;%s &quot;, (152 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 152)) : &quot;&quot;);printf(&quot;%s &quot;, (153 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 153)) : &quot;&quot;);printf(&quot;%s &quot;, (154 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 154)) : &quot;&quot;);printf(&quot;%s &quot;, (155 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 155)) : &quot;&quot;);printf(&quot;%s &quot;, (156 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 156)) : &quot;&quot;);printf(&quot;%s &quot;, (157 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 157)) : &quot;&quot;);printf(&quot;%s &quot;, (158 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 158)) : &quot;&quot;);printf(&quot;%s &quot;, (159 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 159)) : &quot;&quot;);printf(&quot;%s &quot;, (160 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 160)) : &quot;&quot;);printf(&quot;%s &quot;, (161 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 161)) : &quot;&quot;);printf(&quot;%s &quot;, (162 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 162)) : &quot;&quot;);printf(&quot;%s &quot;, (163 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 163)) : &quot;&quot;);printf(&quot;%s &quot;, (164 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 164)) : &quot;&quot;);printf(&quot;%s &quot;, (165 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 165)) : &quot;&quot;);printf(&quot;%s &quot;, (166 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 166)) : &quot;&quot;);printf(&quot;%s &quot;, (167 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 167)) : &quot;&quot;);printf(&quot;%s &quot;, (168 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 168)) : &quot;&quot;);printf(&quot;%s &quot;, (169 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 169)) : &quot;&quot;);printf(&quot;%s &quot;, (170 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 170)) : &quot;&quot;);printf(&quot;%s &quot;, (171 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 171)) : &quot;&quot;);printf(&quot;%s &quot;, (172 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 172)) : &quot;&quot;);printf(&quot;%s &quot;, (173 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 173)) : &quot;&quot;);printf(&quot;%s &quot;, (174 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 174)) : &quot;&quot;);printf(&quot;%s &quot;, (175 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 175)) : &quot;&quot;);printf(&quot;%s &quot;, (176 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 176)) : &quot;&quot;);printf(&quot;%s &quot;, (177 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 177)) : &quot;&quot;);printf(&quot;%s &quot;, (178 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 178)) : &quot;&quot;);printf(&quot;%s &quot;, (179 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 179)) : &quot;&quot;);printf(&quot;%s &quot;, (180 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 180)) : &quot;&quot;);printf(&quot;%s &quot;, (181 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 181)) : &quot;&quot;);printf(&quot;%s &quot;, (182 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 182)) : &quot;&quot;);printf(&quot;%s &quot;, (183 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 183)) : &quot;&quot;);printf(&quot;%s &quot;, (184 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 184)) : &quot;&quot;);printf(&quot;%s &quot;, (185 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 185)) : &quot;&quot;);printf(&quot;%s &quot;, (186 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 186)) : &quot;&quot;);printf(&quot;%s &quot;, (187 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 187)) : &quot;&quot;);printf(&quot;%s &quot;, (188 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 188)) : &quot;&quot;);printf(&quot;%s &quot;, (189 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 189)) : &quot;&quot;);printf(&quot;%s &quot;, (190 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 190)) : &quot;&quot;);printf(&quot;%s &quot;, (191 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 191)) : &quot;&quot;);printf(&quot;%s &quot;, (192 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 192)) : &quot;&quot;);printf(&quot;%s &quot;, (193 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 193)) : &quot;&quot;);printf(&quot;%s &quot;, (194 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 194)) : &quot;&quot;);printf(&quot;%s &quot;, (195 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 195)) : &quot;&quot;);printf(&quot;%s &quot;, (196 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 196)) : &quot;&quot;);printf(&quot;%s &quot;, (197 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 197)) : &quot;&quot;);printf(&quot;%s &quot;, (198 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 198)) : &quot;&quot;);printf(&quot;%s &quot;, (199 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 199)) : &quot;&quot;);printf(&quot;%s &quot;, (200 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 200)) : &quot;&quot;);printf(&quot;%s &quot;, (201 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 201)) : &quot;&quot;);printf(&quot;%s &quot;, (202 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 202)) : &quot;&quot;);printf(&quot;%s &quot;, (203 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 203)) : &quot;&quot;);printf(&quot;%s &quot;, (204 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 204)) : &quot;&quot;);printf(&quot;%s &quot;, (205 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 205)) : &quot;&quot;);printf(&quot;%s &quot;, (206 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 206)) : &quot;&quot;);printf(&quot;%s &quot;, (207 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 207)) : &quot;&quot;);printf(&quot;%s &quot;, (208 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 208)) : &quot;&quot;);printf(&quot;%s &quot;, (209 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 209)) : &quot;&quot;);printf(&quot;%s &quot;, (210 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 210)) : &quot;&quot;);printf(&quot;%s &quot;, (211 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 211)) : &quot;&quot;);printf(&quot;%s &quot;, (212 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 212)) : &quot;&quot;);printf(&quot;%s &quot;, (213 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 213)) : &quot;&quot;);printf(&quot;%s &quot;, (214 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 214)) : &quot;&quot;);printf(&quot;%s &quot;, (215 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 215)) : &quot;&quot;);printf(&quot;%s &quot;, (216 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 216)) : &quot;&quot;);printf(&quot;%s &quot;, (217 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 217)) : &quot;&quot;);printf(&quot;%s &quot;, (218 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 218)) : &quot;&quot;);printf(&quot;%s &quot;, (219 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 219)) : &quot;&quot;);printf(&quot;%s &quot;, (220 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 220)) : &quot;&quot;);printf(&quot;%s &quot;, (221 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 221)) : &quot;&quot;);printf(&quot;%s &quot;, (222 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 222)) : &quot;&quot;);printf(&quot;%s &quot;, (223 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 223)) : &quot;&quot;);printf(&quot;%s &quot;, (224 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 224)) : &quot;&quot;);printf(&quot;%s &quot;, (225 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 225)) : &quot;&quot;);printf(&quot;%s &quot;, (226 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 226)) : &quot;&quot;);printf(&quot;%s &quot;, (227 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 227)) : &quot;&quot;);printf(&quot;%s &quot;, (228 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 228)) : &quot;&quot;);printf(&quot;%s &quot;, (229 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 229)) : &quot;&quot;);printf(&quot;%s &quot;, (230 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 230)) : &quot;&quot;);printf(&quot;%s &quot;, (231 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 231)) : &quot;&quot;);printf(&quot;%s &quot;, (232 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 232)) : &quot;&quot;);printf(&quot;%s &quot;, (233 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 233)) : &quot;&quot;);printf(&quot;%s &quot;, (234 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 234)) : &quot;&quot;);printf(&quot;%s &quot;, (235 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 235)) : &quot;&quot;);printf(&quot;%s &quot;, (236 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 236)) : &quot;&quot;);printf(&quot;%s &quot;, (237 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 237)) : &quot;&quot;);printf(&quot;%s &quot;, (238 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 238)) : &quot;&quot;);printf(&quot;%s &quot;, (239 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 239)) : &quot;&quot;);printf(&quot;%s &quot;, (240 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 240)) : &quot;&quot;);printf(&quot;%s &quot;, (241 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 241)) : &quot;&quot;);printf(&quot;%s &quot;, (242 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 242)) : &quot;&quot;);printf(&quot;%s &quot;, (243 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 243)) : &quot;&quot;);printf(&quot;%s &quot;, (244 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 244)) : &quot;&quot;);printf(&quot;%s &quot;, (245 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 245)) : &quot;&quot;);printf(&quot;%s &quot;, (246 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 246)) : &quot;&quot;);printf(&quot;%s &quot;, (247 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 247)) : &quot;&quot;);printf(&quot;%s &quot;, (248 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 248)) : &quot;&quot;);printf(&quot;%s &quot;, (249 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 249)) : &quot;&quot;);printf(&quot;%s &quot;, (250 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 250)) : &quot;&quot;);printf(&quot;%s &quot;, (251 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 251)) : &quot;&quot;);printf(&quot;%s &quot;, (252 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 252)) : &quot;&quot;);printf(&quot;%s &quot;, (253 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 253)) : &quot;&quot;);printf(&quot;%s &quot;, (254 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 254)) : &quot;&quot;);printf(&quot;%s &quot;, (255 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 255)) : &quot;&quot;);printf(&quot;%s &quot;, (256 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 256)) : &quot;&quot;);printf(&quot;%s &quot;, (257 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 257)) : &quot;&quot;);printf(&quot;%s &quot;, (258 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 258)) : &quot;&quot;);printf(&quot;%s &quot;, (259 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 259)) : &quot;&quot;);printf(&quot;%s &quot;, (260 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 260)) : &quot;&quot;);printf(&quot;%s &quot;, (261 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 261)) : &quot;&quot;);printf(&quot;%s &quot;, (262 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 262)) : &quot;&quot;);printf(&quot;%s &quot;, (263 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 263)) : &quot;&quot;);printf(&quot;%s &quot;, (264 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 264)) : &quot;&quot;);printf(&quot;%s &quot;, (265 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 265)) : &quot;&quot;);printf(&quot;%s &quot;, (266 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 266)) : &quot;&quot;);printf(&quot;%s &quot;, (267 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 267)) : &quot;&quot;);printf(&quot;%s &quot;, (268 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 268)) : &quot;&quot;);printf(&quot;%s &quot;, (269 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 269)) : &quot;&quot;);printf(&quot;%s &quot;, (270 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 270)) : &quot;&quot;);printf(&quot;%s &quot;, (271 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 271)) : &quot;&quot;);printf(&quot;%s &quot;, (272 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 272)) : &quot;&quot;);printf(&quot;%s &quot;, (273 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 273)) : &quot;&quot;);printf(&quot;%s &quot;, (274 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 274)) : &quot;&quot;);printf(&quot;%s &quot;, (275 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 275)) : &quot;&quot;);printf(&quot;%s &quot;, (276 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 276)) : &quot;&quot;);printf(&quot;%s &quot;, (277 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 277)) : &quot;&quot;);printf(&quot;%s &quot;, (278 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 278)) : &quot;&quot;);printf(&quot;%s &quot;, (279 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 279)) : &quot;&quot;);printf(&quot;%s &quot;, (280 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 280)) : &quot;&quot;);printf(&quot;%s &quot;, (281 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 281)) : &quot;&quot;);printf(&quot;%s &quot;, (282 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 282)) : &quot;&quot;);printf(&quot;%s &quot;, (283 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 283)) : &quot;&quot;);printf(&quot;%s &quot;, (284 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 284)) : &quot;&quot;);printf(&quot;%s &quot;, (285 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 285)) : &quot;&quot;);printf(&quot;%s &quot;, (286 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 286)) : &quot;&quot;);printf(&quot;%s &quot;, (287 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 287)) : &quot;&quot;);printf(&quot;%s &quot;, (288 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 288)) : &quot;&quot;);printf(&quot;%s &quot;, (289 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 289)) : &quot;&quot;);printf(&quot;%s &quot;, (290 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 290)) : &quot;&quot;);printf(&quot;%s &quot;, (291 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 291)) : &quot;&quot;);printf(&quot;%s &quot;, (292 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 292)) : &quot;&quot;);printf(&quot;%s &quot;, (293 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 293)) : &quot;&quot;);printf(&quot;%s &quot;, (294 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 294)) : &quot;&quot;);printf(&quot;%s &quot;, (295 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 295)) : &quot;&quot;);printf(&quot;%s &quot;, (296 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 296)) : &quot;&quot;);printf(&quot;%s &quot;, (297 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 297)) : &quot;&quot;);printf(&quot;%s &quot;, (298 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 298)) : &quot;&quot;);printf(&quot;%s &quot;, (299 &lt; this-&gt;argc &amp;&amp; this-&gt;isClean) ? copyinstr(GET_POINTER(this-&gt;argv, 299)) : &quot;&quot;);printf(&quot;\n&quot;);#undef GET_POINTER#undef SELECT_64_86}]]></content>
  </entry>
  <entry>
    <title><![CDATA[dlsym locating]]></title>
    <url>%2F2018%2F12%2F13%2FDlsym-locating%2F</url>
    <content type="text"><![CDATA[&#x56E0;&#x4E3A;&#x201C;&#x4F17;&#x6240;&#x5468;&#x77E5;&#x7684;&#x539F;&#x56E0;&#x201D;&#xFF0C;dlsym&#x4E0D;&#x80FD;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x8C03;&#x7528;&#x4EFB;&#x610F;&#x4F20;&#x5165;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x4E3A;&#x907F;&#x5F00;&#x8FD9;&#x4E00;&#x9650;&#x5236;&#xFF0C;&#x53EF;&#x4F7F;&#x7528;&#x5982;&#x4E0B;&#x52A8;&#x6001;&#x67E5;&#x627E;dlsym&#x7684;&#x673A;&#x5236;&#xFF1A; &#x9996;&#x5148;&#x5728;&#x5F85;&#x4E0A;&#x7EBF;&#x7684;&#x4EE3;&#x7801;&#x4E2D;&#x8C03;&#x7528;dlsym&#x5E76;&#x4F20;&#x5165;&#x4E00;&#x4E2A;&#x5E38;&#x91CF;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x5982;dlsym(&#x201C;CFRelease&#x201D;)&#xFF0C;&#x5E76;&#x8BBE;&#x5B9A;&#x8C03;&#x7528;&#x51FD;&#x6570;&#x7684;&#x4F18;&#x5316;&#x9009;&#x9879;&#x5E76;&#x4E14;&#x4E0D;&#x652F;&#x6301;thumb-mode&#xFF0C;&#x4EE5;&#x4FDD;&#x8BC1;&#x8DF3;&#x8F6C;&#x5230;dlsym&#x7684;&#x6307;&#x4EE4;&#x4E0E;helper_method&#x7684;&#x51FD;&#x6570;&#x8D77;&#x59CB;&#x5730;&#x5740;&#x4FDD;&#x6301;&#x4E0D;&#x53D8;&#xFF0C;&#x5982;&#x4E0B;&#x4F8B;&#xFF1A; 1234__attribute__((noinline, optnone, target(&quot;no-thumb-mode&quot;))) static void *helper_method() { //Will not really call this, just put here to ensure dlsym is here return dlsym(RTLD_DEFAULT, &quot;CFRelease&quot;);} &#x5728;arm64&#x4E0B;&#xFF0C;&#x5176;&#x6C47;&#x7F16;&#x6307;&#x4EE4;&#x5982;&#x4E0B;&#xFF1A; &#x8BB0;&#x5F55;&#x5404;&#x4E2A;&#x5E73;&#x53F0;&#x4E0A;helper_method&#x4E0E;dlsym&#x8DF3;&#x8F6C;&#x6307;&#x4EE4;&#x4E4B;&#x95F4;&#x7684;&#x504F;&#x79FB;&#xFF08;&#x4E0A;&#x4F8B;&#x4E2D;&#x4E3A;0x100006458-0x100006444=0x14&#xFF09;&#xFF0C;&#x4EE5;&#x4FBF;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x6839;&#x636E;&#x6B64;&#x6570;&#x636E;&#x5F97;&#x5230;&#x8DF3;&#x8F6C;&#x6307;&#x4EE4;&#x7684;&#x5730;&#x5740;&#xFF08;bl&#x6216;call&#x6307;&#x4EE4;&#xFF09; 12345678910111213static inline uint16_t getOffsetFromHelperMethod() { uint16_t offsetFromHelperMethod = 0;#if defined(__aarch64__) offsetFromHelperMethod = 0x14;#elif defined(__arm__) offsetFromHelperMethod = 0x18;#elif defined(__i386__) offsetFromHelperMethod = 0x1E;#elif defined(__x86_64__) offsetFromHelperMethod = 0x12;#endif return offsetFromHelperMethod;} &#x6839;&#x636E;&#x6307;&#x4EE4;&#x5730;&#x5740;&#x53D6;&#x6B64;&#x6307;&#x4EE4;&#x7684;&#x5185;&#x5B58;&#x5185;&#x5BB9;&#xFF0C;&#x8FDB;&#x884C;decode&#xFF0C;&#x5F97;&#x5230;dlsym&#x76EE;&#x6807;&#x5730;&#x5740;&#x76F8;&#x5BF9;&#x4E8E;bl/call&#x6307;&#x4EE4;IP&#x7684;&#x504F;&#x79FB;&#xFF0C;&#x5E76;&#x6839;&#x636E;&#x4E0D;&#x540C;&#x5E73;&#x53F0;&#x7684;&#x6362;&#x7B97;&#x65B9;&#x5F0F;&#x7B97;&#x51FA;dlsym&#x7684;&#x76EE;&#x6807;&#x5730;&#x5740;&#xFF08;&#x6B64;&#x5B9E;&#x73B0;&#x4F9D;&#x8D56;&#x4E8E;&#x4E0D;&#x540C;&#x5E73;&#x53F0;&#x4E0A;&#x76F8;&#x5E94;&#x7684;bl/call&#x6307;&#x4EE4;&#x7684;&#x5B9E;&#x73B0;&#xFF09; &#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x5982;&#x4E0B;&#xFF1A; 123456789101112131415161718192021222324SYM_FUNC_POINTER_TYPE get_dlsym_addr() { int64_t func = (int64_t)&amp;helper_method + getOffsetFromHelperMethod(); int64_t relative_offset = 0; #if defined(__aarch64__) //arm64 uint32_t inst = *(uint32_t *)func; uint32_t imm = fieldFromInstruction_4(inst, 0, 26); relative_offset = SignExtend64(imm, 26) * 4;#elif defined(__arm__) //armv7 uint32_t inst = *(uint32_t *)func; unsigned imm = fieldFromInstruction_4(inst, 0, 24) &lt;&lt; 2; relative_offset = SignExtend32(imm, 26) + 8;#elif defined(__i386__) || defined(__x86_64__) //simulator uint32_t imm = 0; memcpy(&amp;imm, (void *)(func+1), 4); relative_offset = SignExtend32(imm, 32)+5; //5&#x4E3A;&#x6B64;call&#x6307;&#x4EE4;&#x7684;&#x957F;&#x5EA6;&#xFF0C;&#x76EE;&#x6807;&#x5730;&#x5740;&#x662F;&#x57FA;&#x4E8E;&#x4E0B;&#x6761;&#x6307;&#x4EE4;&#x7684;&#x5730;&#x5740;#endif func += relative_offset; return (SYM_FUNC_POINTER_TYPE)func;} &#x4F8B;&#xFF1A;&#x4E0A;&#x4F8B;&#x4E2D;&#x6307;&#x4EE4;&#x5185;&#x5BB9;&#x4E3A;0x13010094&#xFF0C;&#x6309;&#x5B57;&#x8282;&#x5E8F;&#x4E3A;0x94000113&#xFF0C;&#x5176;&#x4E8C;&#x8FDB;&#x5236;&#x4E3A;:arm64&#x5E73;&#x53F0;bl&#x6307;&#x4EE4;&#x7684;&#x683C;&#x5F0F;&#x4E3A;&#xFF1A;&#x5F97;&#x5230;&#x5176;pc relative offset&#x4E3A;0x113 * 4 = 0x44c&#xFF0C;&#x5219; dlsym&#x7684;&#x5730;&#x5740;=0x100006458 + 0x44c &#x5F97;&#x5230;dlsym&#x7684;&#x5730;&#x5740;&#x540E;&#xFF0C;&#x5373;&#x53EF;&#x901A;&#x8FC7;&#x5BF9;&#x5176;&#x4F20;&#x5165;&#x51FD;&#x6570;&#x540D;&#x5F97;&#x5230;&#x5176;&#x4ED6;c&#x65B9;&#x6CD5;&#x5730;&#x5740;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Debugger & Anti-debugging]]></title>
    <url>%2F2018%2F12%2F13%2FDebugger-and-Anti-debugging%2F</url>
    <content type="text"><![CDATA[Anti-debugging &#x4F7F;&#x7528;ptrace123456789101112#if !defined(PT_DENY_ATTACH)#define PT_DENY_ATTACH 31#endiftypedef int (*ptrace_ptr)(int request, pid_t pid, caddr_t addr, void *data);- (void)anti_debug { void *handle = dlopen(NULL, RTLD_GLOBAL|RTLD_NOW); ptrace_ptr p_ptr = dlsym(handle, &quot;ptrace&quot;); p_ptr(PT_DENY_ATTACH, 0, 0, 0); dlclose(handle);} &#x4F7F;&#x7528;sysctl1234567891011121314151617181920212223242526272829303132333435363738#include &lt;assert.h&gt;#include &lt;stdbool.h&gt;#include &lt;sys/types.h&gt;#include &lt;unistd.h&gt;#include &lt;sys/sysctl.h&gt;static bool AmIBeingDebugged(void)// Returns true if the current process is being debugged (either// running under the debugger or has a debugger attached post facto).{ int junk; int mib[4]; struct kinfo_proc info; size_t size; // Initialize the flags so that, if sysctl fails for some bizarre // reason, we get a predictable result. info.kp_proc.p_flag = 0; // Initialize mib, which tells sysctl the info we want, in this case // we&apos;re looking for information about a specific process ID. mib[0] = CTL_KERN; mib[1] = KERN_PROC; mib[2] = KERN_PROC_PID; mib[3] = getpid(); // Call sysctl. size = sizeof(info); junk = sysctl(mib, sizeof(mib) / sizeof(*mib), &amp;info, &amp;size, NULL, 0); assert(junk == 0); // We&apos;re being debugged if the P_TRACED flag is set. return ( (info.kp_proc.p_flag &amp; P_TRACED) != 0 );} How debuggers workptrace API&#xFF1A; &#x53EF;&#x4EE5;&#x4F7F;&#x5B50;&#x8FDB;&#x7A0B;&#x6307;&#x5B9A;&#x5141;&#x8BB8;&#x7236;&#x8FDB;&#x7A0B;trace&#x81EA;&#x5DF1; &#x53EF;&#x4EE5;&#x5728;&#x7236;&#x8FDB;&#x7A0B;&#x4E2D;&#x67E5;&#x770B;&#x3001;&#x4FEE;&#x6539;&#x5B50;&#x8FDB;&#x7A0B;&#x5BC4;&#x5B58;&#x5668;&#x3001;&#x5185;&#x5B58;&#x7B49;&#x5185;&#x5BB9;&#xFF0C;&#x6216;&#x8005;&#x5355;&#x6B65;&#x6267;&#x884C;&#x6307;&#x4EE4; breakpoint&#x662F;&#x7528;int 3&#x8F6F;&#x4E2D;&#x65AD;&#x5B9E;&#x73B0;&#xFF0C;&#x5728;&#x65AD;&#x70B9;&#x7684;&#x4EE3;&#x7801;&#x4F4D;&#x7F6E;&#x5C06;&#x539F;&#x4F4D;&#x7F6E;&#x4E0A;&#x7684;&#x4E00;&#x4E2A;&#x5B57;&#x8282;&#x7684;&#x4EE3;&#x7801;&#x7528;0xCC&#x66FF;&#x6362;&#xFF08;0xCC&#x5373;&#x4E3A;int 3&#xFF09;&#xFF0C;&#x5B50;&#x8FDB;&#x7A0B;cpu&#x6267;&#x884C;&#x5230;0xCC&#x5904;&#x5373;&#x505C;&#x6B62;&#xFF0C;&#x5E76;&#x53D1;&#x9001;sigtrap&#xFF0C;&#x7236;&#x8FDB;&#x7A0B;&#x6536;&#x5230;&#x6B64;&#x6D88;&#x606F;&#x5373;&#x53EF;&#x8FDB;&#x884C;&#x76F8;&#x5E94;&#x7684;deug&#x64CD;&#x4F5C; &#x53C2;&#x8003;&#x8D44;&#x6599;&#xFF1A; https://eli.thegreenplace.net/2011/01/23/how-debuggers-work-part-1/https://eli.thegreenplace.net/2011/01/27/how-debuggers-work-part-2-breakpoints/https://eli.thegreenplace.net/2011/02/07/how-debuggers-work-part-3-debugging-information]]></content>
  </entry>
  <entry>
    <title><![CDATA[Crashlog related]]></title>
    <url>%2F2018%2F12%2F13%2FCrashlog-related%2F</url>
    <content type="text"><![CDATA[Crash Log - bad address A crash with a bad address that looks like a valid heap address rotated right 4 bits is a sign of use after free. That 4 bit rotate is an encoding of the malloc free list. Not mentioned in WWDC 2018 session 414: Another malloc free list signature is a bad address 0x&#x2026;bead; 0x&#x2026;bec0 and 0x&#x2026;bec8 are common in objc_msgSend due to masking and offsets. That value is a remnant of the malloc free list encoding by he nanozone allocator on some platforms. EXC_GUARD exception&#x7CFB;&#x7EDF;&#x4F1A;&#x5728;&#x4F7F;&#x7528;&#x67D0;&#x4E9B;&#x8D44;&#x6E90;&#x65F6;&#x7ED9;&#x8D44;&#x6E90;&#x52A0;&#x4E0A;guard&#xFF0C;&#x7CFB;&#x7EDF;&#x8BBF;&#x95EE;&#x8FD9;&#x4E9B;guarded&#x8D44;&#x6E90;&#x65F6;&#x4F1A;&#x4F7F;&#x7528;&#x7279;&#x6B8A;&#x7684;guarded api&#xFF0C;&#x5982;&#x679C;&#x5176;&#x4ED6;&#x6A21;&#x5757;&#x8BBF;&#x95EE;&#x4E86;&#x8FD9;&#x4E9B;&#x8D44;&#x6E90;&#xFF0C;&#x5C31;&#x4F1A;&#x89E6;&#x53D1;EXC_GUARD exception. Guarded Resource Violation [EXC_GUARD] The process violated a guarded resource protection. System libraries may mark certain file descriptors as guarded, after which normal operations on those descriptors will trigger an EXC_GUARD exception (when it wants to operate on these file descriptors, the system uses special &#x2018;guarded&#x2019; private APIs). This helps you quickly track down issues such as closing a file descriptor that had been opened by a system library. For example, if an app closes the file descriptor used to access the SQLite file backing a Core Data store, Core Data would then crash mysteriously much later on. The guard exception gets these problems noticed sooner, and thus makes them easier to debug.Crash reports from newer versions of iOS include human-readable details about the operation that caused the EXC_GUARD exception in the Exception Subtype and Exception Message fields. In crash reports from macOS or older versions of iOS, this information is encoded into the first Exception Code as a bitfield which breaks down as follows: [63:61] - Guard Type: The type of the guarded resource. A value of 0x2 indicates the resource is a file descriptor. [60:32] - Flavor: The conditions under which the violation was triggered.If the first (1 &lt;&lt; 0) bit is set, the process attempted to invoke close() on a guarded file descriptor. If the second (1 &lt;&lt; 1) bit is set, the process attempted to invoke dup(), dup2(), or fcntl() with the F_DUPFD or F_DUPFD_CLOEXEC commands on a guarded file descriptor. If the third (1 &lt;&lt; 2) bit is set, the process attempted to send a guarded file descriptor via a socket. If the fifth (1 &lt;&lt; 4) bit is set, the process attempted to write to a guarded file descriptor. [31:0] - File Descriptor: The guarded file descriptor that the process attempted to modify.]]></content>
  </entry>
  <entry>
    <title><![CDATA[Clang attributes & Xcode project settings]]></title>
    <url>%2F2018%2F12%2F13%2FClang-attributes-and-Xcode-project-settings%2F</url>
    <content type="text"><![CDATA[&#x5FFD;&#x7565;Warning &#x201C;Unknown attribute &#x2018;xxx&#x2019; ignored&#x201D;123456789101112131415161718#pragma clang diagnostic push#pragma clang diagnostic ignored &quot;-Wattributes&quot;//code#pragma clang diagnostic pop//&#x5B9A;&#x4E49;&#x5B8F;&#x91CC;&#x9762;&#x7528;&#x5230;#pragma&#x65F6;&#x9700;&#x8981;&#x7528;_Pragma(&quot;&quot;)&#x6765;&#x4EE3;&#x66FF;&#xFF1A;#define OCPACK_BEGIN \_Pragma(&quot;clang diagnostic push&quot;) \_Pragma(&quot;clang diagnostic ignored \&quot;-Wattributes\&quot;&quot;)#define OCPACK_END \_Pragma(&quot;clang diagnostic pop&quot;)#define OCPACK_METHOD \__attribute__((ocslite)) &#x9519;&#x8BEF;&#x89E3;&#x51B3;&#xFF1A;Cannot specify -o when generating multiple output files12345Showing All Errors OnlyCannot specify -o when generating multiple output files&#x89E3;&#x51B3;&#x529E;&#x6CD5;&#xFF1A;Build setting&#x4E2D;&#x7684; Enable Index-While-Building Functionality &#x8BBE;&#x7F6E;&#x4E3A;NO &#x9519;&#x8BEF;&#x89E3;&#x51B3;&#xFF1A;xcode9 &#x8F93;&#x51FA;&#x7684;SDK&#xFF0C;xcode8&#x65E0;&#x6CD5;&#x96C6;&#x6210;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6CD5;123456789101112131415161718192021&#x5F53;&#x4F4E;&#x7248;&#x672C;&#x7684;xcode&#x96C6;&#x6210;&#x9AD8;&#x7248;&#x672C;&#x7684;&#x9759;&#x6001;&#x5E93;&#x65F6;&#xFF0C;&#x4F1A;&#x63D0;&#x793A;&#xFF1A;Xcode Framework not found FileProvider for architecture x86_64/arm64 &#x65B9;&#x6CD5;&#x4E00;&#xFF1A; &#x4F9D;&#x7136;&#x4F7F;&#x7528;&#x9AD8;&#x7248;&#x672C;&#x65B9;&#x6CD5;&#x8F93;&#x51FA;SDK SDK&#x65B9;&#xFF1A; 1&#x3001;Build Settings &#x4E2D; Link Frameworks Automatically &#x628A;&#x9ED8;&#x8BA4;Yes &#x6539;&#x6210; No! 2&#x3001;Build Phases &#x4E2D;Link Binary With Libraries &#x6DFB;&#x52A0;&#x5BF9;&#x5E94;&#x7684;Lib &#x63A5;&#x5165;&#x65B9;&#xFF1A; 3&#x3001;&#x8981;&#x6C42;&#x63A5;&#x4E5F;&#x5728;Build Phases &#x4E2D;Link Binary With Libraries &#x6DFB;&#x52A0;&#x5BF9;&#x5E94;&#x7684;Lib&#x65B9;&#x6CD5;&#x4E8C;&#xFF1A; SDK&#x65B9;&#x7528;&#x4F4E;&#x7248;&#x672C;&#x7684;xcode&#x8F93;&#x51FA;SDK&#x65B9;&#x6CD5;&#x4E09;&#xFF1A; &#x63A5;&#x5165;&#x65B9;&#x7528;&#x9AD8;&#x7248;&#x672C;&#x7684;xcode&#x96C6;&#x6210; &#x4F4E;&#x7248;&#x672C;iOS&#x4E0A;&#x8C03;&#x7528;&#x9AD8;&#x7248;&#x672C;API&#x7684;&#x68C0;&#x67E5;iOS&#x4EE3;&#x7801;&#x4E2D;&#x7ECF;&#x5E38;&#x4F1A;&#x51FA;&#x73B0;&#x8FD9;&#x6837;&#x7684;&#x60C5;&#x51B5;&#xFF1A; &#x5DE5;&#x7A0B;&#x7684;target&#x662F;iOS 8 &#x4EE3;&#x7801;&#x4E2D;&#x53EF;&#x80FD;&#x6709;&#x8C03;&#x7528;iOS 10&#x7684;API &#x7406;&#x8BBA;&#x4E0A;&#x5728;&#x6240;&#x6709;&#x8C03;&#x7528;iOS 10&#x7684;API&#x65F6;&#x5E94;&#x5224;&#x65AD;&#x6B64;API&#x662F;&#x5426;available &#x4F46;&#x5F00;&#x53D1;&#x8FC7;&#x7A0B;&#x4E2D;&#x6709;&#x53EF;&#x80FD;&#x4F1A;&#x5FD8; &#x7F16;&#x8BD1;&#x5668;&#x652F;&#x6301;&#x4E00;&#x4E2A;warning flag: -Wpartial-availability&#x6765;&#x68C0;&#x6D4B;&#x5230;&#x8FD9;&#x79CD;&#x60C5;&#x51B5; build&#x540E;&#x4F1A;&#x51FA;&#x73B0;&#x7684;warning: 12&apos;xxxxx&apos; is only avaialble on iOS 9.0 or newer&apos;xxxxx&apos; has been explicitly marked partial here &#x5F00;&#x53D1;&#x4FEE;&#x6539;&#x5B8C;&#x540E;&#x53EF;&#x7528;#pragma&#x6765;suppress&#x6389;&#x76F8;&#x5E94;&#x7684;warning 123456#pragma clang diagnostic push#pragma clang diagnostic ignored &quot;-Wpartial-availability&quot;//code#pragma clang diagnostic pop &#x6307;&#x5B9A;Objective-C&#x53D8;&#x91CF;&#x4E0D;&#x88AB;&#x63D0;&#x524D;release&#x7684;attribute12345678// Mark local variables of type &apos;id&apos; or pointer-to-ObjC-object-type so that values stored into that local variable are not aggressively released by the compiler during optimization, but are held until either the variable is assigned to again, or the end of the scope (such as a compound statement, or method definition) of the local variable.#ifndef NS_VALID_UNTIL_END_OF_SCOPE#if __has_attribute(objc_precise_lifetime)#define NS_VALID_UNTIL_END_OF_SCOPE __attribute__((objc_precise_lifetime))#else#define NS_VALID_UNTIL_END_OF_SCOPE#endif#endif &#x53D8;&#x91CF;&#x4F5C;&#x7528;&#x57DF;&#x65F6;&#x81EA;&#x52A8;&#x6267;&#x884C;&#x6307;&#x5B9A;&#x65B9;&#x6CD5;__attribute__((cleanup(...)))&#xFF0C;&#x7528;&#x4E8E;&#x4FEE;&#x9970;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#xFF0C;&#x5728;&#x5B83;&#x7684;&#x4F5C;&#x7528;&#x57DF;&#x7ED3;&#x675F;&#x65F6;&#x53EF;&#x4EE5;&#x81EA;&#x52A8;&#x6267;&#x884C;&#x4E00;&#x4E2A;&#x6307;&#x5B9A;&#x7684;&#x65B9;&#x6CD5; &#x8FD9;&#x6837;&#x7684;&#x5199;&#x6CD5;&#x53EF;&#x4EE5;&#x5C06;&#x6210;&#x5BF9;&#x51FA;&#x73B0;&#x7684;&#x4EE3;&#x7801;&#x5199;&#x5728;&#x4E00;&#x8D77;&#xFF0C;&#x6BD4;&#x5982;&#x8BF4;&#x4E00;&#x4E2A;lock&#xFF1A; 123456NSRecursiveLock *aLock = [[NSRecursiveLock alloc] init];[aLock lock];// &#x8FD9;&#x91CC;// &#x6709;// 100&#x591A;&#x4E07;&#x884C;[aLock unlock]; // &#x770B;&#x5230;&#x8FD9;&#x513F;&#x7684;&#x65F6;&#x5019;&#x65E9;&#x5FD8;&#x4E86;&#x548C;&#x54EA;&#x4E2A;lock&#x5BF9;&#x5E94;&#x7740;&#x4E86; &#x7528;&#x4E86;onExit&#x4E4B;&#x540E;&#xFF0C;&#x4EE3;&#x7801;&#x66F4;&#x96C6;&#x4E2D;&#x4E86;&#xFF1A; 12345678910111213#define onExit\ __strong void(^block)(void) __attribute__((cleanup(blockCleanUp), unused)) = ^NSRecursiveLock *aLock = [[NSRecursiveLock alloc] init];[aLock lock];onExit { [aLock unlock]; // &#x5988;&#x5988;&#x518D;&#x4E5F;&#x4E0D;&#x7528;&#x62C5;&#x5FC3;&#x6211;&#x5FD8;&#x5199;&#x540E;&#x534A;&#x6BB5;&#x4E86;};// &#x8FD9;&#x91CC;// &#x7231;&#x591A;&#x5C11;&#x884C;// &#x5C31;&#x591A;&#x5C11;&#x884C; &#x53C2;&#x8003;&#x8D44;&#x6599;&#xFF1A; &#x539F;&#x8D34;&#xFF1A;http://blog.sunnyxx.com/2014/09/15/objc-attribute-cleanup/ &#x5176;&#x4ED6;&#x4E00;&#x4E9B;&#x5E38;&#x7528;&#x7684;attribute&#x4ECB;&#x7ECD; __builtin functions123//&#x5F53;&#x524D;&#x51FD;&#x6570;&#x7684;&#x8FD4;&#x56DE;&#x5730;&#x5740;&#xFF1A;void *addr = __builtin_return_address(0);NSLog(@&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt; %p&quot;, addr); Unavailable attribute1#define NS_AUTOMATED_REFCOUNT_UNAVAILABLE __attribute__((unavailable(&quot;not available in automatic reference counting mode&quot;)))]]></content>
  </entry>
  <entry>
    <title><![CDATA[Bit operations]]></title>
    <url>%2F2018%2F12%2F13%2FBit-operations%2F</url>
    <content type="text"><![CDATA[http://graphics.stanford.edu/~seander/bithacks.html 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354//Swap two integers:x = x ^ y;y = x ^ y;x = x ^ y;//Find the minimum r of two integers x and y:r = y ^ ((x^y)&amp; -(x&lt;y));//Compute (x+y) mod n: 0 &lt;= x &lt; n, 0 &lt;= y &lt; nr = (x+y)%nz = x+y;r = (z&lt;n)?z:n-n;z = x+y;r = z - (n &amp; -(z &gt;=n));//Note: mis-prediction on branch costs 16 cycles to empty the pipeline//register : 1 cycle (6 ops issued per cycle per core)//(per 64-byte cache line)://L1 cache: 4 cycles//L2 cache: 10 cycles//L3 cache: 50cycles//DRAM: 150 cycles//Round up to a power of 2: Compute 2^(ceil(log n))&#x2014;n;n |= n &gt;&gt; 1;n |= n &gt;&gt; 2;n |= n &gt;&gt; 4;n |= n &gt;&gt; 8;n |= n &gt;&gt; 16;n |= n &gt;&gt; 32;++n//Compute the mask of the least significant bit:r = x &amp; (-x);//Compute lg(x), where x is a power of 2://debruijn sequence//Count the number of 1 in a word x:for (r = 0; x != 0; ++r) { x &amp;= x-1;}//Table lookup:static const int count[256] = {0, 1, 1, 2, 1, 2, 2, 3, 1, &#x2026;, 8};for (r = 0; x !=0; x&gt;&gt;=8) { r += count[x &amp; 0xff];}]]></content>
  </entry>
  <entry>
    <title><![CDATA[A simple scripting language]]></title>
    <url>%2F2018%2F12%2F13%2FA-simple-scripting-language%2F</url>
    <content type="text"><![CDATA[&#x53C2;&#x8003;&#x8D44;&#x6599;&#xFF1A; http://www.incubatorgames.com/20110121/simple-scripting-language-part-4/]]></content>
  </entry>
</search>
